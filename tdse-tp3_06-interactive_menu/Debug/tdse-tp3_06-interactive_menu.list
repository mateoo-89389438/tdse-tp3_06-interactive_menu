
tdse-tp3_06-interactive_menu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b98  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  08003ca4  08003ca4  00004ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f30  08003f30  0000508c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003f30  08003f30  00004f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f38  08003f38  0000508c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f38  08003f38  00004f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f3c  08003f3c  00004f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08003f40  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  2000008c  08003fcc  0000508c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  08003fcc  00005394  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008237  00000000  00000000  000050b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dd9  00000000  00000000  0000d2ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000740  00000000  00000000  0000f0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000056a  00000000  00000000  0000f808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001844d  00000000  00000000  0000fd72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b0a1  00000000  00000000  000281bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083b7f  00000000  00000000  00033260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6ddf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000274c  00000000  00000000  000b6e24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000b9570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c8c 	.word	0x08003c8c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	08003c8c 	.word	0x08003c8c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000160:	f002 fbde 	bl	8002920 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f000 fa46 	bl	80005f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f809 	bl	800017e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f872 	bl	8000254 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000170:	f000 f846 	bl	8000200 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	/* Application Init */
	app_init();
 8000174:	f001 fa9c 	bl	80016b0 <app_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /* Application Update */
	  app_update();
 8000178:	f001 fb60 	bl	800183c <app_update>
 800017c:	e7fc      	b.n	8000178 <main+0x1c>

0800017e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017e:	b580      	push	{r7, lr}
 8000180:	b090      	sub	sp, #64	@ 0x40
 8000182:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000184:	f107 0318 	add.w	r3, r7, #24
 8000188:	2228      	movs	r2, #40	@ 0x28
 800018a:	2100      	movs	r1, #0
 800018c:	4618      	mov	r0, r3
 800018e:	f002 fe4e 	bl	8002e2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000192:	1d3b      	adds	r3, r7, #4
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
 8000198:	605a      	str	r2, [r3, #4]
 800019a:	609a      	str	r2, [r3, #8]
 800019c:	60da      	str	r2, [r3, #12]
 800019e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001a0:	2302      	movs	r3, #2
 80001a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a4:	2301      	movs	r3, #1
 80001a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001a8:	2310      	movs	r3, #16
 80001aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ac:	2302      	movs	r3, #2
 80001ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001b0:	2300      	movs	r3, #0
 80001b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001b4:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80001b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ba:	f107 0318 	add.w	r3, r7, #24
 80001be:	4618      	mov	r0, r3
 80001c0:	f000 fd88 	bl	8000cd4 <HAL_RCC_OscConfig>
 80001c4:	4603      	mov	r3, r0
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d001      	beq.n	80001ce <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001ca:	f000 f905 	bl	80003d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ce:	230f      	movs	r3, #15
 80001d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d2:	2302      	movs	r3, #2
 80001d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d6:	2300      	movs	r3, #0
 80001d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	2102      	movs	r1, #2
 80001e8:	4618      	mov	r0, r3
 80001ea:	f000 fff5 	bl	80011d8 <HAL_RCC_ClockConfig>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d001      	beq.n	80001f8 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80001f4:	f000 f8f0 	bl	80003d8 <Error_Handler>
  }
}
 80001f8:	bf00      	nop
 80001fa:	3740      	adds	r7, #64	@ 0x40
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}

08000200 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000204:	4b11      	ldr	r3, [pc, #68]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000206:	4a12      	ldr	r2, [pc, #72]	@ (8000250 <MX_USART2_UART_Init+0x50>)
 8000208:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800020a:	4b10      	ldr	r3, [pc, #64]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 800020c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000210:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000212:	4b0e      	ldr	r3, [pc, #56]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000214:	2200      	movs	r2, #0
 8000216:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000218:	4b0c      	ldr	r3, [pc, #48]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 800021a:	2200      	movs	r2, #0
 800021c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800021e:	4b0b      	ldr	r3, [pc, #44]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000220:	2200      	movs	r2, #0
 8000222:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000224:	4b09      	ldr	r3, [pc, #36]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000226:	220c      	movs	r2, #12
 8000228:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800022a:	4b08      	ldr	r3, [pc, #32]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 800022c:	2200      	movs	r2, #0
 800022e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000230:	4b06      	ldr	r3, [pc, #24]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000232:	2200      	movs	r2, #0
 8000234:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000236:	4805      	ldr	r0, [pc, #20]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000238:	f001 f95c 	bl	80014f4 <HAL_UART_Init>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000242:	f000 f8c9 	bl	80003d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000246:	bf00      	nop
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	200000a8 	.word	0x200000a8
 8000250:	40004400 	.word	0x40004400

08000254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b088      	sub	sp, #32
 8000258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800025a:	f107 0310 	add.w	r3, r7, #16
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000268:	4b56      	ldr	r3, [pc, #344]	@ (80003c4 <MX_GPIO_Init+0x170>)
 800026a:	699b      	ldr	r3, [r3, #24]
 800026c:	4a55      	ldr	r2, [pc, #340]	@ (80003c4 <MX_GPIO_Init+0x170>)
 800026e:	f043 0310 	orr.w	r3, r3, #16
 8000272:	6193      	str	r3, [r2, #24]
 8000274:	4b53      	ldr	r3, [pc, #332]	@ (80003c4 <MX_GPIO_Init+0x170>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	f003 0310 	and.w	r3, r3, #16
 800027c:	60fb      	str	r3, [r7, #12]
 800027e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000280:	4b50      	ldr	r3, [pc, #320]	@ (80003c4 <MX_GPIO_Init+0x170>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	4a4f      	ldr	r2, [pc, #316]	@ (80003c4 <MX_GPIO_Init+0x170>)
 8000286:	f043 0320 	orr.w	r3, r3, #32
 800028a:	6193      	str	r3, [r2, #24]
 800028c:	4b4d      	ldr	r3, [pc, #308]	@ (80003c4 <MX_GPIO_Init+0x170>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	f003 0320 	and.w	r3, r3, #32
 8000294:	60bb      	str	r3, [r7, #8]
 8000296:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000298:	4b4a      	ldr	r3, [pc, #296]	@ (80003c4 <MX_GPIO_Init+0x170>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	4a49      	ldr	r2, [pc, #292]	@ (80003c4 <MX_GPIO_Init+0x170>)
 800029e:	f043 0304 	orr.w	r3, r3, #4
 80002a2:	6193      	str	r3, [r2, #24]
 80002a4:	4b47      	ldr	r3, [pc, #284]	@ (80003c4 <MX_GPIO_Init+0x170>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	f003 0304 	and.w	r3, r3, #4
 80002ac:	607b      	str	r3, [r7, #4]
 80002ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002b0:	4b44      	ldr	r3, [pc, #272]	@ (80003c4 <MX_GPIO_Init+0x170>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	4a43      	ldr	r2, [pc, #268]	@ (80003c4 <MX_GPIO_Init+0x170>)
 80002b6:	f043 0308 	orr.w	r3, r3, #8
 80002ba:	6193      	str	r3, [r2, #24]
 80002bc:	4b41      	ldr	r3, [pc, #260]	@ (80003c4 <MX_GPIO_Init+0x170>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	f003 0308 	and.w	r3, r3, #8
 80002c4:	603b      	str	r3, [r7, #0]
 80002c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D7_Pin|D8_Pin, GPIO_PIN_RESET);
 80002c8:	2200      	movs	r2, #0
 80002ca:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80002ce:	483e      	ldr	r0, [pc, #248]	@ (80003c8 <MX_GPIO_Init+0x174>)
 80002d0:	f000 fcc5 	bl	8000c5e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 80002d4:	2200      	movs	r2, #0
 80002d6:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 80002da:	483c      	ldr	r0, [pc, #240]	@ (80003cc <MX_GPIO_Init+0x178>)
 80002dc:	f000 fcbf 	bl	8000c5e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, GPIO_PIN_RESET);
 80002e0:	2200      	movs	r2, #0
 80002e2:	2180      	movs	r1, #128	@ 0x80
 80002e4:	483a      	ldr	r0, [pc, #232]	@ (80003d0 <MX_GPIO_Init+0x17c>)
 80002e6:	f000 fcba 	bl	8000c5e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002f0:	4b38      	ldr	r3, [pc, #224]	@ (80003d4 <MX_GPIO_Init+0x180>)
 80002f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f4:	2300      	movs	r3, #0
 80002f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002f8:	f107 0310 	add.w	r3, r7, #16
 80002fc:	4619      	mov	r1, r3
 80002fe:	4834      	ldr	r0, [pc, #208]	@ (80003d0 <MX_GPIO_Init+0x17c>)
 8000300:	f000 fb12 	bl	8000928 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000304:	2320      	movs	r3, #32
 8000306:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000308:	2301      	movs	r3, #1
 800030a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030c:	2300      	movs	r3, #0
 800030e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000310:	2302      	movs	r3, #2
 8000312:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000314:	f107 0310 	add.w	r3, r7, #16
 8000318:	4619      	mov	r1, r3
 800031a:	482b      	ldr	r0, [pc, #172]	@ (80003c8 <MX_GPIO_Init+0x174>)
 800031c:	f000 fb04 	bl	8000928 <HAL_GPIO_Init>

  /*Configure GPIO pins : D12_Pin D11_Pin D2_Pin */
  GPIO_InitStruct.Pin = D12_Pin|D11_Pin|D2_Pin;
 8000320:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000324:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000326:	2300      	movs	r3, #0
 8000328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800032a:	2301      	movs	r3, #1
 800032c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800032e:	f107 0310 	add.w	r3, r7, #16
 8000332:	4619      	mov	r1, r3
 8000334:	4824      	ldr	r0, [pc, #144]	@ (80003c8 <MX_GPIO_Init+0x174>)
 8000336:	f000 faf7 	bl	8000928 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D5_Pin|D4_Pin;
 800033a:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 800033e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000340:	2301      	movs	r3, #1
 8000342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000344:	2301      	movs	r3, #1
 8000346:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000348:	2302      	movs	r3, #2
 800034a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800034c:	f107 0310 	add.w	r3, r7, #16
 8000350:	4619      	mov	r1, r3
 8000352:	481e      	ldr	r0, [pc, #120]	@ (80003cc <MX_GPIO_Init+0x178>)
 8000354:	f000 fae8 	bl	8000928 <HAL_GPIO_Init>

  /*Configure GPIO pin : D9_Pin */
  GPIO_InitStruct.Pin = D9_Pin;
 8000358:	2380      	movs	r3, #128	@ 0x80
 800035a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800035c:	2301      	movs	r3, #1
 800035e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000360:	2301      	movs	r3, #1
 8000362:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000364:	2302      	movs	r3, #2
 8000366:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D9_GPIO_Port, &GPIO_InitStruct);
 8000368:	f107 0310 	add.w	r3, r7, #16
 800036c:	4619      	mov	r1, r3
 800036e:	4818      	ldr	r0, [pc, #96]	@ (80003d0 <MX_GPIO_Init+0x17c>)
 8000370:	f000 fada 	bl	8000928 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D8_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D8_Pin;
 8000374:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000378:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800037a:	2301      	movs	r3, #1
 800037c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800037e:	2301      	movs	r3, #1
 8000380:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000382:	2302      	movs	r3, #2
 8000384:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000386:	f107 0310 	add.w	r3, r7, #16
 800038a:	4619      	mov	r1, r3
 800038c:	480e      	ldr	r0, [pc, #56]	@ (80003c8 <MX_GPIO_Init+0x174>)
 800038e:	f000 facb 	bl	8000928 <HAL_GPIO_Init>

  /*Configure GPIO pin : D10_Pin */
  GPIO_InitStruct.Pin = D10_Pin;
 8000392:	2340      	movs	r3, #64	@ 0x40
 8000394:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000396:	2300      	movs	r3, #0
 8000398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800039a:	2301      	movs	r3, #1
 800039c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(D10_GPIO_Port, &GPIO_InitStruct);
 800039e:	f107 0310 	add.w	r3, r7, #16
 80003a2:	4619      	mov	r1, r3
 80003a4:	4809      	ldr	r0, [pc, #36]	@ (80003cc <MX_GPIO_Init+0x178>)
 80003a6:	f000 fabf 	bl	8000928 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003aa:	2200      	movs	r2, #0
 80003ac:	2100      	movs	r1, #0
 80003ae:	2028      	movs	r0, #40	@ 0x28
 80003b0:	f000 fa7d 	bl	80008ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003b4:	2028      	movs	r0, #40	@ 0x28
 80003b6:	f000 fa96 	bl	80008e6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003ba:	bf00      	nop
 80003bc:	3720      	adds	r7, #32
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	40021000 	.word	0x40021000
 80003c8:	40010800 	.word	0x40010800
 80003cc:	40010c00 	.word	0x40010c00
 80003d0:	40011000 	.word	0x40011000
 80003d4:	10110000 	.word	0x10110000

080003d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003dc:	b672      	cpsid	i
}
 80003de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003e0:	bf00      	nop
 80003e2:	e7fd      	b.n	80003e0 <Error_Handler+0x8>

080003e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b085      	sub	sp, #20
 80003e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ea:	4b15      	ldr	r3, [pc, #84]	@ (8000440 <HAL_MspInit+0x5c>)
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	4a14      	ldr	r2, [pc, #80]	@ (8000440 <HAL_MspInit+0x5c>)
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	6193      	str	r3, [r2, #24]
 80003f6:	4b12      	ldr	r3, [pc, #72]	@ (8000440 <HAL_MspInit+0x5c>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	f003 0301 	and.w	r3, r3, #1
 80003fe:	60bb      	str	r3, [r7, #8]
 8000400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000402:	4b0f      	ldr	r3, [pc, #60]	@ (8000440 <HAL_MspInit+0x5c>)
 8000404:	69db      	ldr	r3, [r3, #28]
 8000406:	4a0e      	ldr	r2, [pc, #56]	@ (8000440 <HAL_MspInit+0x5c>)
 8000408:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800040c:	61d3      	str	r3, [r2, #28]
 800040e:	4b0c      	ldr	r3, [pc, #48]	@ (8000440 <HAL_MspInit+0x5c>)
 8000410:	69db      	ldr	r3, [r3, #28]
 8000412:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800041a:	4b0a      	ldr	r3, [pc, #40]	@ (8000444 <HAL_MspInit+0x60>)
 800041c:	685b      	ldr	r3, [r3, #4]
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000426:	60fb      	str	r3, [r7, #12]
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	4a04      	ldr	r2, [pc, #16]	@ (8000444 <HAL_MspInit+0x60>)
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000436:	bf00      	nop
 8000438:	3714      	adds	r7, #20
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr
 8000440:	40021000 	.word	0x40021000
 8000444:	40010000 	.word	0x40010000

08000448 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b088      	sub	sp, #32
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000450:	f107 0310 	add.w	r3, r7, #16
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
 8000458:	605a      	str	r2, [r3, #4]
 800045a:	609a      	str	r2, [r3, #8]
 800045c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4a15      	ldr	r2, [pc, #84]	@ (80004b8 <HAL_UART_MspInit+0x70>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d123      	bne.n	80004b0 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000468:	4b14      	ldr	r3, [pc, #80]	@ (80004bc <HAL_UART_MspInit+0x74>)
 800046a:	69db      	ldr	r3, [r3, #28]
 800046c:	4a13      	ldr	r2, [pc, #76]	@ (80004bc <HAL_UART_MspInit+0x74>)
 800046e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000472:	61d3      	str	r3, [r2, #28]
 8000474:	4b11      	ldr	r3, [pc, #68]	@ (80004bc <HAL_UART_MspInit+0x74>)
 8000476:	69db      	ldr	r3, [r3, #28]
 8000478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800047c:	60fb      	str	r3, [r7, #12]
 800047e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000480:	4b0e      	ldr	r3, [pc, #56]	@ (80004bc <HAL_UART_MspInit+0x74>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	4a0d      	ldr	r2, [pc, #52]	@ (80004bc <HAL_UART_MspInit+0x74>)
 8000486:	f043 0304 	orr.w	r3, r3, #4
 800048a:	6193      	str	r3, [r2, #24]
 800048c:	4b0b      	ldr	r3, [pc, #44]	@ (80004bc <HAL_UART_MspInit+0x74>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	f003 0304 	and.w	r3, r3, #4
 8000494:	60bb      	str	r3, [r7, #8]
 8000496:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000498:	230c      	movs	r3, #12
 800049a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800049c:	2302      	movs	r3, #2
 800049e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a0:	2302      	movs	r3, #2
 80004a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a4:	f107 0310 	add.w	r3, r7, #16
 80004a8:	4619      	mov	r1, r3
 80004aa:	4805      	ldr	r0, [pc, #20]	@ (80004c0 <HAL_UART_MspInit+0x78>)
 80004ac:	f000 fa3c 	bl	8000928 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80004b0:	bf00      	nop
 80004b2:	3720      	adds	r7, #32
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	40004400 	.word	0x40004400
 80004bc:	40021000 	.word	0x40021000
 80004c0:	40010800 	.word	0x40010800

080004c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004c8:	bf00      	nop
 80004ca:	e7fd      	b.n	80004c8 <NMI_Handler+0x4>

080004cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004d0:	bf00      	nop
 80004d2:	e7fd      	b.n	80004d0 <HardFault_Handler+0x4>

080004d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004d8:	bf00      	nop
 80004da:	e7fd      	b.n	80004d8 <MemManage_Handler+0x4>

080004dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004e0:	bf00      	nop
 80004e2:	e7fd      	b.n	80004e0 <BusFault_Handler+0x4>

080004e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004e8:	bf00      	nop
 80004ea:	e7fd      	b.n	80004e8 <UsageFault_Handler+0x4>

080004ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr

080004f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr

08000504 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr

08000510 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000514:	f000 f8b4 	bl	8000680 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  	HAL_SYSTICK_IRQHandler();
 8000518:	f000 f9ff 	bl	800091a <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 800051c:	bf00      	nop
 800051e:	bd80      	pop	{r7, pc}

08000520 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000524:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000528:	f000 fbb2 	bl	8000c90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800052c:	bf00      	nop
 800052e:	bd80      	pop	{r7, pc}

08000530 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000538:	4a14      	ldr	r2, [pc, #80]	@ (800058c <_sbrk+0x5c>)
 800053a:	4b15      	ldr	r3, [pc, #84]	@ (8000590 <_sbrk+0x60>)
 800053c:	1ad3      	subs	r3, r2, r3
 800053e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000544:	4b13      	ldr	r3, [pc, #76]	@ (8000594 <_sbrk+0x64>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d102      	bne.n	8000552 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800054c:	4b11      	ldr	r3, [pc, #68]	@ (8000594 <_sbrk+0x64>)
 800054e:	4a12      	ldr	r2, [pc, #72]	@ (8000598 <_sbrk+0x68>)
 8000550:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000552:	4b10      	ldr	r3, [pc, #64]	@ (8000594 <_sbrk+0x64>)
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4413      	add	r3, r2
 800055a:	693a      	ldr	r2, [r7, #16]
 800055c:	429a      	cmp	r2, r3
 800055e:	d207      	bcs.n	8000570 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000560:	f002 fcb4 	bl	8002ecc <__errno>
 8000564:	4603      	mov	r3, r0
 8000566:	220c      	movs	r2, #12
 8000568:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800056a:	f04f 33ff 	mov.w	r3, #4294967295
 800056e:	e009      	b.n	8000584 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000570:	4b08      	ldr	r3, [pc, #32]	@ (8000594 <_sbrk+0x64>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000576:	4b07      	ldr	r3, [pc, #28]	@ (8000594 <_sbrk+0x64>)
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4413      	add	r3, r2
 800057e:	4a05      	ldr	r2, [pc, #20]	@ (8000594 <_sbrk+0x64>)
 8000580:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000582:	68fb      	ldr	r3, [r7, #12]
}
 8000584:	4618      	mov	r0, r3
 8000586:	3718      	adds	r7, #24
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20005000 	.word	0x20005000
 8000590:	00000400 	.word	0x00000400
 8000594:	200000f0 	.word	0x200000f0
 8000598:	20000398 	.word	0x20000398

0800059c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr

080005a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005a8:	f7ff fff8 	bl	800059c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005ac:	480b      	ldr	r0, [pc, #44]	@ (80005dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005ae:	490c      	ldr	r1, [pc, #48]	@ (80005e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005b0:	4a0c      	ldr	r2, [pc, #48]	@ (80005e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005b4:	e002      	b.n	80005bc <LoopCopyDataInit>

080005b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ba:	3304      	adds	r3, #4

080005bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c0:	d3f9      	bcc.n	80005b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005c2:	4a09      	ldr	r2, [pc, #36]	@ (80005e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005c4:	4c09      	ldr	r4, [pc, #36]	@ (80005ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c8:	e001      	b.n	80005ce <LoopFillZerobss>

080005ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005cc:	3204      	adds	r2, #4

080005ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d0:	d3fb      	bcc.n	80005ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005d2:	f002 fc81 	bl	8002ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005d6:	f7ff fdc1 	bl	800015c <main>
  bx lr
 80005da:	4770      	bx	lr
  ldr r0, =_sdata
 80005dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005e0:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80005e4:	08003f40 	.word	0x08003f40
  ldr r2, =_sbss
 80005e8:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80005ec:	20000394 	.word	0x20000394

080005f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005f0:	e7fe      	b.n	80005f0 <ADC1_2_IRQHandler>
	...

080005f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005f8:	4b08      	ldr	r3, [pc, #32]	@ (800061c <HAL_Init+0x28>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a07      	ldr	r2, [pc, #28]	@ (800061c <HAL_Init+0x28>)
 80005fe:	f043 0310 	orr.w	r3, r3, #16
 8000602:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000604:	2003      	movs	r0, #3
 8000606:	f000 f947 	bl	8000898 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800060a:	2000      	movs	r0, #0
 800060c:	f000 f808 	bl	8000620 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000610:	f7ff fee8 	bl	80003e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000614:	2300      	movs	r3, #0
}
 8000616:	4618      	mov	r0, r3
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40022000 	.word	0x40022000

08000620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000628:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <HAL_InitTick+0x54>)
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	4b12      	ldr	r3, [pc, #72]	@ (8000678 <HAL_InitTick+0x58>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	4619      	mov	r1, r3
 8000632:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000636:	fbb3 f3f1 	udiv	r3, r3, r1
 800063a:	fbb2 f3f3 	udiv	r3, r2, r3
 800063e:	4618      	mov	r0, r3
 8000640:	f000 f95f 	bl	8000902 <HAL_SYSTICK_Config>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800064a:	2301      	movs	r3, #1
 800064c:	e00e      	b.n	800066c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2b0f      	cmp	r3, #15
 8000652:	d80a      	bhi.n	800066a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000654:	2200      	movs	r2, #0
 8000656:	6879      	ldr	r1, [r7, #4]
 8000658:	f04f 30ff 	mov.w	r0, #4294967295
 800065c:	f000 f927 	bl	80008ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000660:	4a06      	ldr	r2, [pc, #24]	@ (800067c <HAL_InitTick+0x5c>)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000666:	2300      	movs	r3, #0
 8000668:	e000      	b.n	800066c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800066a:	2301      	movs	r3, #1
}
 800066c:	4618      	mov	r0, r3
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000000 	.word	0x20000000
 8000678:	20000008 	.word	0x20000008
 800067c:	20000004 	.word	0x20000004

08000680 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000684:	4b05      	ldr	r3, [pc, #20]	@ (800069c <HAL_IncTick+0x1c>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	461a      	mov	r2, r3
 800068a:	4b05      	ldr	r3, [pc, #20]	@ (80006a0 <HAL_IncTick+0x20>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4413      	add	r3, r2
 8000690:	4a03      	ldr	r2, [pc, #12]	@ (80006a0 <HAL_IncTick+0x20>)
 8000692:	6013      	str	r3, [r2, #0]
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr
 800069c:	20000008 	.word	0x20000008
 80006a0:	200000f4 	.word	0x200000f4

080006a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  return uwTick;
 80006a8:	4b02      	ldr	r3, [pc, #8]	@ (80006b4 <HAL_GetTick+0x10>)
 80006aa:	681b      	ldr	r3, [r3, #0]
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr
 80006b4:	200000f4 	.word	0x200000f4

080006b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006c0:	f7ff fff0 	bl	80006a4 <HAL_GetTick>
 80006c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006d0:	d005      	beq.n	80006de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006d2:	4b0a      	ldr	r3, [pc, #40]	@ (80006fc <HAL_Delay+0x44>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	461a      	mov	r2, r3
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	4413      	add	r3, r2
 80006dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006de:	bf00      	nop
 80006e0:	f7ff ffe0 	bl	80006a4 <HAL_GetTick>
 80006e4:	4602      	mov	r2, r0
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	68fa      	ldr	r2, [r7, #12]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d8f7      	bhi.n	80006e0 <HAL_Delay+0x28>
  {
  }
}
 80006f0:	bf00      	nop
 80006f2:	bf00      	nop
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000008 	.word	0x20000008

08000700 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f003 0307 	and.w	r3, r3, #7
 800070e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000710:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <__NVIC_SetPriorityGrouping+0x44>)
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000716:	68ba      	ldr	r2, [r7, #8]
 8000718:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800071c:	4013      	ands	r3, r2
 800071e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000728:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800072c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000732:	4a04      	ldr	r2, [pc, #16]	@ (8000744 <__NVIC_SetPriorityGrouping+0x44>)
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	60d3      	str	r3, [r2, #12]
}
 8000738:	bf00      	nop
 800073a:	3714      	adds	r7, #20
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	e000ed00 	.word	0xe000ed00

08000748 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800074c:	4b04      	ldr	r3, [pc, #16]	@ (8000760 <__NVIC_GetPriorityGrouping+0x18>)
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	0a1b      	lsrs	r3, r3, #8
 8000752:	f003 0307 	and.w	r3, r3, #7
}
 8000756:	4618      	mov	r0, r3
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800076e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000772:	2b00      	cmp	r3, #0
 8000774:	db0b      	blt.n	800078e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	f003 021f 	and.w	r2, r3, #31
 800077c:	4906      	ldr	r1, [pc, #24]	@ (8000798 <__NVIC_EnableIRQ+0x34>)
 800077e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000782:	095b      	lsrs	r3, r3, #5
 8000784:	2001      	movs	r0, #1
 8000786:	fa00 f202 	lsl.w	r2, r0, r2
 800078a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr
 8000798:	e000e100 	.word	0xe000e100

0800079c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	6039      	str	r1, [r7, #0]
 80007a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	db0a      	blt.n	80007c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	490c      	ldr	r1, [pc, #48]	@ (80007e8 <__NVIC_SetPriority+0x4c>)
 80007b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ba:	0112      	lsls	r2, r2, #4
 80007bc:	b2d2      	uxtb	r2, r2
 80007be:	440b      	add	r3, r1
 80007c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007c4:	e00a      	b.n	80007dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	4908      	ldr	r1, [pc, #32]	@ (80007ec <__NVIC_SetPriority+0x50>)
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	f003 030f 	and.w	r3, r3, #15
 80007d2:	3b04      	subs	r3, #4
 80007d4:	0112      	lsls	r2, r2, #4
 80007d6:	b2d2      	uxtb	r2, r2
 80007d8:	440b      	add	r3, r1
 80007da:	761a      	strb	r2, [r3, #24]
}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	e000e100 	.word	0xe000e100
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b089      	sub	sp, #36	@ 0x24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	f003 0307 	and.w	r3, r3, #7
 8000802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000804:	69fb      	ldr	r3, [r7, #28]
 8000806:	f1c3 0307 	rsb	r3, r3, #7
 800080a:	2b04      	cmp	r3, #4
 800080c:	bf28      	it	cs
 800080e:	2304      	movcs	r3, #4
 8000810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	3304      	adds	r3, #4
 8000816:	2b06      	cmp	r3, #6
 8000818:	d902      	bls.n	8000820 <NVIC_EncodePriority+0x30>
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	3b03      	subs	r3, #3
 800081e:	e000      	b.n	8000822 <NVIC_EncodePriority+0x32>
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000824:	f04f 32ff 	mov.w	r2, #4294967295
 8000828:	69bb      	ldr	r3, [r7, #24]
 800082a:	fa02 f303 	lsl.w	r3, r2, r3
 800082e:	43da      	mvns	r2, r3
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	401a      	ands	r2, r3
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000838:	f04f 31ff 	mov.w	r1, #4294967295
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	fa01 f303 	lsl.w	r3, r1, r3
 8000842:	43d9      	mvns	r1, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000848:	4313      	orrs	r3, r2
         );
}
 800084a:	4618      	mov	r0, r3
 800084c:	3724      	adds	r7, #36	@ 0x24
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr

08000854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	3b01      	subs	r3, #1
 8000860:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000864:	d301      	bcc.n	800086a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000866:	2301      	movs	r3, #1
 8000868:	e00f      	b.n	800088a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800086a:	4a0a      	ldr	r2, [pc, #40]	@ (8000894 <SysTick_Config+0x40>)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3b01      	subs	r3, #1
 8000870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000872:	210f      	movs	r1, #15
 8000874:	f04f 30ff 	mov.w	r0, #4294967295
 8000878:	f7ff ff90 	bl	800079c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800087c:	4b05      	ldr	r3, [pc, #20]	@ (8000894 <SysTick_Config+0x40>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000882:	4b04      	ldr	r3, [pc, #16]	@ (8000894 <SysTick_Config+0x40>)
 8000884:	2207      	movs	r2, #7
 8000886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000888:	2300      	movs	r3, #0
}
 800088a:	4618      	mov	r0, r3
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	e000e010 	.word	0xe000e010

08000898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f7ff ff2d 	bl	8000700 <__NVIC_SetPriorityGrouping>
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b086      	sub	sp, #24
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	4603      	mov	r3, r0
 80008b6:	60b9      	str	r1, [r7, #8]
 80008b8:	607a      	str	r2, [r7, #4]
 80008ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008c0:	f7ff ff42 	bl	8000748 <__NVIC_GetPriorityGrouping>
 80008c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	68b9      	ldr	r1, [r7, #8]
 80008ca:	6978      	ldr	r0, [r7, #20]
 80008cc:	f7ff ff90 	bl	80007f0 <NVIC_EncodePriority>
 80008d0:	4602      	mov	r2, r0
 80008d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008d6:	4611      	mov	r1, r2
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff ff5f 	bl	800079c <__NVIC_SetPriority>
}
 80008de:	bf00      	nop
 80008e0:	3718      	adds	r7, #24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	4603      	mov	r3, r0
 80008ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff ff35 	bl	8000764 <__NVIC_EnableIRQ>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff ffa2 	bl	8000854 <SysTick_Config>
 8000910:	4603      	mov	r3, r0
}
 8000912:	4618      	mov	r0, r3
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800091e:	f000 fff3 	bl	8001908 <HAL_SYSTICK_Callback>
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000928:	b480      	push	{r7}
 800092a:	b08b      	sub	sp, #44	@ 0x2c
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000936:	2300      	movs	r3, #0
 8000938:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800093a:	e169      	b.n	8000c10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800093c:	2201      	movs	r2, #1
 800093e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	69fa      	ldr	r2, [r7, #28]
 800094c:	4013      	ands	r3, r2
 800094e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000950:	69ba      	ldr	r2, [r7, #24]
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	429a      	cmp	r2, r3
 8000956:	f040 8158 	bne.w	8000c0a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	4a9a      	ldr	r2, [pc, #616]	@ (8000bc8 <HAL_GPIO_Init+0x2a0>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d05e      	beq.n	8000a22 <HAL_GPIO_Init+0xfa>
 8000964:	4a98      	ldr	r2, [pc, #608]	@ (8000bc8 <HAL_GPIO_Init+0x2a0>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d875      	bhi.n	8000a56 <HAL_GPIO_Init+0x12e>
 800096a:	4a98      	ldr	r2, [pc, #608]	@ (8000bcc <HAL_GPIO_Init+0x2a4>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d058      	beq.n	8000a22 <HAL_GPIO_Init+0xfa>
 8000970:	4a96      	ldr	r2, [pc, #600]	@ (8000bcc <HAL_GPIO_Init+0x2a4>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d86f      	bhi.n	8000a56 <HAL_GPIO_Init+0x12e>
 8000976:	4a96      	ldr	r2, [pc, #600]	@ (8000bd0 <HAL_GPIO_Init+0x2a8>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d052      	beq.n	8000a22 <HAL_GPIO_Init+0xfa>
 800097c:	4a94      	ldr	r2, [pc, #592]	@ (8000bd0 <HAL_GPIO_Init+0x2a8>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d869      	bhi.n	8000a56 <HAL_GPIO_Init+0x12e>
 8000982:	4a94      	ldr	r2, [pc, #592]	@ (8000bd4 <HAL_GPIO_Init+0x2ac>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d04c      	beq.n	8000a22 <HAL_GPIO_Init+0xfa>
 8000988:	4a92      	ldr	r2, [pc, #584]	@ (8000bd4 <HAL_GPIO_Init+0x2ac>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d863      	bhi.n	8000a56 <HAL_GPIO_Init+0x12e>
 800098e:	4a92      	ldr	r2, [pc, #584]	@ (8000bd8 <HAL_GPIO_Init+0x2b0>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d046      	beq.n	8000a22 <HAL_GPIO_Init+0xfa>
 8000994:	4a90      	ldr	r2, [pc, #576]	@ (8000bd8 <HAL_GPIO_Init+0x2b0>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d85d      	bhi.n	8000a56 <HAL_GPIO_Init+0x12e>
 800099a:	2b12      	cmp	r3, #18
 800099c:	d82a      	bhi.n	80009f4 <HAL_GPIO_Init+0xcc>
 800099e:	2b12      	cmp	r3, #18
 80009a0:	d859      	bhi.n	8000a56 <HAL_GPIO_Init+0x12e>
 80009a2:	a201      	add	r2, pc, #4	@ (adr r2, 80009a8 <HAL_GPIO_Init+0x80>)
 80009a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a8:	08000a23 	.word	0x08000a23
 80009ac:	080009fd 	.word	0x080009fd
 80009b0:	08000a0f 	.word	0x08000a0f
 80009b4:	08000a51 	.word	0x08000a51
 80009b8:	08000a57 	.word	0x08000a57
 80009bc:	08000a57 	.word	0x08000a57
 80009c0:	08000a57 	.word	0x08000a57
 80009c4:	08000a57 	.word	0x08000a57
 80009c8:	08000a57 	.word	0x08000a57
 80009cc:	08000a57 	.word	0x08000a57
 80009d0:	08000a57 	.word	0x08000a57
 80009d4:	08000a57 	.word	0x08000a57
 80009d8:	08000a57 	.word	0x08000a57
 80009dc:	08000a57 	.word	0x08000a57
 80009e0:	08000a57 	.word	0x08000a57
 80009e4:	08000a57 	.word	0x08000a57
 80009e8:	08000a57 	.word	0x08000a57
 80009ec:	08000a05 	.word	0x08000a05
 80009f0:	08000a19 	.word	0x08000a19
 80009f4:	4a79      	ldr	r2, [pc, #484]	@ (8000bdc <HAL_GPIO_Init+0x2b4>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d013      	beq.n	8000a22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009fa:	e02c      	b.n	8000a56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	623b      	str	r3, [r7, #32]
          break;
 8000a02:	e029      	b.n	8000a58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	3304      	adds	r3, #4
 8000a0a:	623b      	str	r3, [r7, #32]
          break;
 8000a0c:	e024      	b.n	8000a58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	68db      	ldr	r3, [r3, #12]
 8000a12:	3308      	adds	r3, #8
 8000a14:	623b      	str	r3, [r7, #32]
          break;
 8000a16:	e01f      	b.n	8000a58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	330c      	adds	r3, #12
 8000a1e:	623b      	str	r3, [r7, #32]
          break;
 8000a20:	e01a      	b.n	8000a58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	689b      	ldr	r3, [r3, #8]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d102      	bne.n	8000a30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a2a:	2304      	movs	r3, #4
 8000a2c:	623b      	str	r3, [r7, #32]
          break;
 8000a2e:	e013      	b.n	8000a58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d105      	bne.n	8000a44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a38:	2308      	movs	r3, #8
 8000a3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	69fa      	ldr	r2, [r7, #28]
 8000a40:	611a      	str	r2, [r3, #16]
          break;
 8000a42:	e009      	b.n	8000a58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a44:	2308      	movs	r3, #8
 8000a46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	69fa      	ldr	r2, [r7, #28]
 8000a4c:	615a      	str	r2, [r3, #20]
          break;
 8000a4e:	e003      	b.n	8000a58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a50:	2300      	movs	r3, #0
 8000a52:	623b      	str	r3, [r7, #32]
          break;
 8000a54:	e000      	b.n	8000a58 <HAL_GPIO_Init+0x130>
          break;
 8000a56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	2bff      	cmp	r3, #255	@ 0xff
 8000a5c:	d801      	bhi.n	8000a62 <HAL_GPIO_Init+0x13a>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	e001      	b.n	8000a66 <HAL_GPIO_Init+0x13e>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	3304      	adds	r3, #4
 8000a66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	2bff      	cmp	r3, #255	@ 0xff
 8000a6c:	d802      	bhi.n	8000a74 <HAL_GPIO_Init+0x14c>
 8000a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	e002      	b.n	8000a7a <HAL_GPIO_Init+0x152>
 8000a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a76:	3b08      	subs	r3, #8
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	210f      	movs	r1, #15
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	fa01 f303 	lsl.w	r3, r1, r3
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	401a      	ands	r2, r3
 8000a8c:	6a39      	ldr	r1, [r7, #32]
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	fa01 f303 	lsl.w	r3, r1, r3
 8000a94:	431a      	orrs	r2, r3
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	f000 80b1 	beq.w	8000c0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000aa8:	4b4d      	ldr	r3, [pc, #308]	@ (8000be0 <HAL_GPIO_Init+0x2b8>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	4a4c      	ldr	r2, [pc, #304]	@ (8000be0 <HAL_GPIO_Init+0x2b8>)
 8000aae:	f043 0301 	orr.w	r3, r3, #1
 8000ab2:	6193      	str	r3, [r2, #24]
 8000ab4:	4b4a      	ldr	r3, [pc, #296]	@ (8000be0 <HAL_GPIO_Init+0x2b8>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ac0:	4a48      	ldr	r2, [pc, #288]	@ (8000be4 <HAL_GPIO_Init+0x2bc>)
 8000ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac4:	089b      	lsrs	r3, r3, #2
 8000ac6:	3302      	adds	r3, #2
 8000ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000acc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ad0:	f003 0303 	and.w	r3, r3, #3
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	220f      	movs	r2, #15
 8000ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8000adc:	43db      	mvns	r3, r3
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4a40      	ldr	r2, [pc, #256]	@ (8000be8 <HAL_GPIO_Init+0x2c0>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d013      	beq.n	8000b14 <HAL_GPIO_Init+0x1ec>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4a3f      	ldr	r2, [pc, #252]	@ (8000bec <HAL_GPIO_Init+0x2c4>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d00d      	beq.n	8000b10 <HAL_GPIO_Init+0x1e8>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4a3e      	ldr	r2, [pc, #248]	@ (8000bf0 <HAL_GPIO_Init+0x2c8>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d007      	beq.n	8000b0c <HAL_GPIO_Init+0x1e4>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4a3d      	ldr	r2, [pc, #244]	@ (8000bf4 <HAL_GPIO_Init+0x2cc>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d101      	bne.n	8000b08 <HAL_GPIO_Init+0x1e0>
 8000b04:	2303      	movs	r3, #3
 8000b06:	e006      	b.n	8000b16 <HAL_GPIO_Init+0x1ee>
 8000b08:	2304      	movs	r3, #4
 8000b0a:	e004      	b.n	8000b16 <HAL_GPIO_Init+0x1ee>
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	e002      	b.n	8000b16 <HAL_GPIO_Init+0x1ee>
 8000b10:	2301      	movs	r3, #1
 8000b12:	e000      	b.n	8000b16 <HAL_GPIO_Init+0x1ee>
 8000b14:	2300      	movs	r3, #0
 8000b16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b18:	f002 0203 	and.w	r2, r2, #3
 8000b1c:	0092      	lsls	r2, r2, #2
 8000b1e:	4093      	lsls	r3, r2
 8000b20:	68fa      	ldr	r2, [r7, #12]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b26:	492f      	ldr	r1, [pc, #188]	@ (8000be4 <HAL_GPIO_Init+0x2bc>)
 8000b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2a:	089b      	lsrs	r3, r3, #2
 8000b2c:	3302      	adds	r3, #2
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d006      	beq.n	8000b4e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b40:	4b2d      	ldr	r3, [pc, #180]	@ (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000b42:	689a      	ldr	r2, [r3, #8]
 8000b44:	492c      	ldr	r1, [pc, #176]	@ (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	608b      	str	r3, [r1, #8]
 8000b4c:	e006      	b.n	8000b5c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000b50:	689a      	ldr	r2, [r3, #8]
 8000b52:	69bb      	ldr	r3, [r7, #24]
 8000b54:	43db      	mvns	r3, r3
 8000b56:	4928      	ldr	r1, [pc, #160]	@ (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000b58:	4013      	ands	r3, r2
 8000b5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d006      	beq.n	8000b76 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b68:	4b23      	ldr	r3, [pc, #140]	@ (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000b6a:	68da      	ldr	r2, [r3, #12]
 8000b6c:	4922      	ldr	r1, [pc, #136]	@ (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	60cb      	str	r3, [r1, #12]
 8000b74:	e006      	b.n	8000b84 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b76:	4b20      	ldr	r3, [pc, #128]	@ (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000b78:	68da      	ldr	r2, [r3, #12]
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	43db      	mvns	r3, r3
 8000b7e:	491e      	ldr	r1, [pc, #120]	@ (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000b80:	4013      	ands	r3, r2
 8000b82:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d006      	beq.n	8000b9e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b90:	4b19      	ldr	r3, [pc, #100]	@ (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000b92:	685a      	ldr	r2, [r3, #4]
 8000b94:	4918      	ldr	r1, [pc, #96]	@ (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	604b      	str	r3, [r1, #4]
 8000b9c:	e006      	b.n	8000bac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b9e:	4b16      	ldr	r3, [pc, #88]	@ (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000ba0:	685a      	ldr	r2, [r3, #4]
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	4914      	ldr	r1, [pc, #80]	@ (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000ba8:	4013      	ands	r3, r2
 8000baa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d021      	beq.n	8000bfc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	490e      	ldr	r1, [pc, #56]	@ (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	600b      	str	r3, [r1, #0]
 8000bc4:	e021      	b.n	8000c0a <HAL_GPIO_Init+0x2e2>
 8000bc6:	bf00      	nop
 8000bc8:	10320000 	.word	0x10320000
 8000bcc:	10310000 	.word	0x10310000
 8000bd0:	10220000 	.word	0x10220000
 8000bd4:	10210000 	.word	0x10210000
 8000bd8:	10120000 	.word	0x10120000
 8000bdc:	10110000 	.word	0x10110000
 8000be0:	40021000 	.word	0x40021000
 8000be4:	40010000 	.word	0x40010000
 8000be8:	40010800 	.word	0x40010800
 8000bec:	40010c00 	.word	0x40010c00
 8000bf0:	40011000 	.word	0x40011000
 8000bf4:	40011400 	.word	0x40011400
 8000bf8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000c2c <HAL_GPIO_Init+0x304>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	43db      	mvns	r3, r3
 8000c04:	4909      	ldr	r1, [pc, #36]	@ (8000c2c <HAL_GPIO_Init+0x304>)
 8000c06:	4013      	ands	r3, r2
 8000c08:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c16:	fa22 f303 	lsr.w	r3, r2, r3
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	f47f ae8e 	bne.w	800093c <HAL_GPIO_Init+0x14>
  }
}
 8000c20:	bf00      	nop
 8000c22:	bf00      	nop
 8000c24:	372c      	adds	r7, #44	@ 0x2c
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	40010400 	.word	0x40010400

08000c30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	460b      	mov	r3, r1
 8000c3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	689a      	ldr	r2, [r3, #8]
 8000c40:	887b      	ldrh	r3, [r7, #2]
 8000c42:	4013      	ands	r3, r2
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d002      	beq.n	8000c4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	73fb      	strb	r3, [r7, #15]
 8000c4c:	e001      	b.n	8000c52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr

08000c5e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	b083      	sub	sp, #12
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
 8000c66:	460b      	mov	r3, r1
 8000c68:	807b      	strh	r3, [r7, #2]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c6e:	787b      	ldrb	r3, [r7, #1]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d003      	beq.n	8000c7c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c74:	887a      	ldrh	r2, [r7, #2]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c7a:	e003      	b.n	8000c84 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c7c:	887b      	ldrh	r3, [r7, #2]
 8000c7e:	041a      	lsls	r2, r3, #16
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	611a      	str	r2, [r3, #16]
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr
	...

08000c90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c9a:	4b08      	ldr	r3, [pc, #32]	@ (8000cbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c9c:	695a      	ldr	r2, [r3, #20]
 8000c9e:	88fb      	ldrh	r3, [r7, #6]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d006      	beq.n	8000cb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ca6:	4a05      	ldr	r2, [pc, #20]	@ (8000cbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ca8:	88fb      	ldrh	r3, [r7, #6]
 8000caa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000cac:	88fb      	ldrh	r3, [r7, #6]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 f806 	bl	8000cc0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40010400 	.word	0x40010400

08000cc0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr

08000cd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d101      	bne.n	8000ce6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e272      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	f000 8087 	beq.w	8000e02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cf4:	4b92      	ldr	r3, [pc, #584]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f003 030c 	and.w	r3, r3, #12
 8000cfc:	2b04      	cmp	r3, #4
 8000cfe:	d00c      	beq.n	8000d1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d00:	4b8f      	ldr	r3, [pc, #572]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f003 030c 	and.w	r3, r3, #12
 8000d08:	2b08      	cmp	r3, #8
 8000d0a:	d112      	bne.n	8000d32 <HAL_RCC_OscConfig+0x5e>
 8000d0c:	4b8c      	ldr	r3, [pc, #560]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d18:	d10b      	bne.n	8000d32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d1a:	4b89      	ldr	r3, [pc, #548]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d06c      	beq.n	8000e00 <HAL_RCC_OscConfig+0x12c>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d168      	bne.n	8000e00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e24c      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d3a:	d106      	bne.n	8000d4a <HAL_RCC_OscConfig+0x76>
 8000d3c:	4b80      	ldr	r3, [pc, #512]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a7f      	ldr	r2, [pc, #508]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d46:	6013      	str	r3, [r2, #0]
 8000d48:	e02e      	b.n	8000da8 <HAL_RCC_OscConfig+0xd4>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d10c      	bne.n	8000d6c <HAL_RCC_OscConfig+0x98>
 8000d52:	4b7b      	ldr	r3, [pc, #492]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a7a      	ldr	r2, [pc, #488]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d5c:	6013      	str	r3, [r2, #0]
 8000d5e:	4b78      	ldr	r3, [pc, #480]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a77      	ldr	r2, [pc, #476]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d64:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d68:	6013      	str	r3, [r2, #0]
 8000d6a:	e01d      	b.n	8000da8 <HAL_RCC_OscConfig+0xd4>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d74:	d10c      	bne.n	8000d90 <HAL_RCC_OscConfig+0xbc>
 8000d76:	4b72      	ldr	r3, [pc, #456]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a71      	ldr	r2, [pc, #452]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d80:	6013      	str	r3, [r2, #0]
 8000d82:	4b6f      	ldr	r3, [pc, #444]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a6e      	ldr	r2, [pc, #440]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d8c:	6013      	str	r3, [r2, #0]
 8000d8e:	e00b      	b.n	8000da8 <HAL_RCC_OscConfig+0xd4>
 8000d90:	4b6b      	ldr	r3, [pc, #428]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a6a      	ldr	r2, [pc, #424]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d9a:	6013      	str	r3, [r2, #0]
 8000d9c:	4b68      	ldr	r3, [pc, #416]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a67      	ldr	r2, [pc, #412]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000da2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000da6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d013      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db0:	f7ff fc78 	bl	80006a4 <HAL_GetTick>
 8000db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db6:	e008      	b.n	8000dca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000db8:	f7ff fc74 	bl	80006a4 <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	2b64      	cmp	r3, #100	@ 0x64
 8000dc4:	d901      	bls.n	8000dca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e200      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dca:	4b5d      	ldr	r3, [pc, #372]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d0f0      	beq.n	8000db8 <HAL_RCC_OscConfig+0xe4>
 8000dd6:	e014      	b.n	8000e02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd8:	f7ff fc64 	bl	80006a4 <HAL_GetTick>
 8000ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dde:	e008      	b.n	8000df2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000de0:	f7ff fc60 	bl	80006a4 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	2b64      	cmp	r3, #100	@ 0x64
 8000dec:	d901      	bls.n	8000df2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dee:	2303      	movs	r3, #3
 8000df0:	e1ec      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000df2:	4b53      	ldr	r3, [pc, #332]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d1f0      	bne.n	8000de0 <HAL_RCC_OscConfig+0x10c>
 8000dfe:	e000      	b.n	8000e02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d063      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e0e:	4b4c      	ldr	r3, [pc, #304]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f003 030c 	and.w	r3, r3, #12
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d00b      	beq.n	8000e32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e1a:	4b49      	ldr	r3, [pc, #292]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f003 030c 	and.w	r3, r3, #12
 8000e22:	2b08      	cmp	r3, #8
 8000e24:	d11c      	bne.n	8000e60 <HAL_RCC_OscConfig+0x18c>
 8000e26:	4b46      	ldr	r3, [pc, #280]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d116      	bne.n	8000e60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e32:	4b43      	ldr	r3, [pc, #268]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f003 0302 	and.w	r3, r3, #2
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d005      	beq.n	8000e4a <HAL_RCC_OscConfig+0x176>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	691b      	ldr	r3, [r3, #16]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d001      	beq.n	8000e4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e1c0      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e4a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	00db      	lsls	r3, r3, #3
 8000e58:	4939      	ldr	r1, [pc, #228]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e5e:	e03a      	b.n	8000ed6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	691b      	ldr	r3, [r3, #16]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d020      	beq.n	8000eaa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e68:	4b36      	ldr	r3, [pc, #216]	@ (8000f44 <HAL_RCC_OscConfig+0x270>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e6e:	f7ff fc19 	bl	80006a4 <HAL_GetTick>
 8000e72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e74:	e008      	b.n	8000e88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e76:	f7ff fc15 	bl	80006a4 <HAL_GetTick>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d901      	bls.n	8000e88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e84:	2303      	movs	r3, #3
 8000e86:	e1a1      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e88:	4b2d      	ldr	r3, [pc, #180]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 0302 	and.w	r3, r3, #2
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d0f0      	beq.n	8000e76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e94:	4b2a      	ldr	r3, [pc, #168]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	695b      	ldr	r3, [r3, #20]
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	4927      	ldr	r1, [pc, #156]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	600b      	str	r3, [r1, #0]
 8000ea8:	e015      	b.n	8000ed6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eaa:	4b26      	ldr	r3, [pc, #152]	@ (8000f44 <HAL_RCC_OscConfig+0x270>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb0:	f7ff fbf8 	bl	80006a4 <HAL_GetTick>
 8000eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eb6:	e008      	b.n	8000eca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eb8:	f7ff fbf4 	bl	80006a4 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d901      	bls.n	8000eca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e180      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eca:	4b1d      	ldr	r3, [pc, #116]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d1f0      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f003 0308 	and.w	r3, r3, #8
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d03a      	beq.n	8000f58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d019      	beq.n	8000f1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000eea:	4b17      	ldr	r3, [pc, #92]	@ (8000f48 <HAL_RCC_OscConfig+0x274>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef0:	f7ff fbd8 	bl	80006a4 <HAL_GetTick>
 8000ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ef6:	e008      	b.n	8000f0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ef8:	f7ff fbd4 	bl	80006a4 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d901      	bls.n	8000f0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	e160      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d0f0      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f16:	2001      	movs	r0, #1
 8000f18:	f000 face 	bl	80014b8 <RCC_Delay>
 8000f1c:	e01c      	b.n	8000f58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f48 <HAL_RCC_OscConfig+0x274>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f24:	f7ff fbbe 	bl	80006a4 <HAL_GetTick>
 8000f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f2a:	e00f      	b.n	8000f4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f2c:	f7ff fbba 	bl	80006a4 <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d908      	bls.n	8000f4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e146      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
 8000f3e:	bf00      	nop
 8000f40:	40021000 	.word	0x40021000
 8000f44:	42420000 	.word	0x42420000
 8000f48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f4c:	4b92      	ldr	r3, [pc, #584]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1e9      	bne.n	8000f2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f003 0304 	and.w	r3, r3, #4
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	f000 80a6 	beq.w	80010b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f66:	2300      	movs	r3, #0
 8000f68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f6a:	4b8b      	ldr	r3, [pc, #556]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d10d      	bne.n	8000f92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f76:	4b88      	ldr	r3, [pc, #544]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	4a87      	ldr	r2, [pc, #540]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000f7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f80:	61d3      	str	r3, [r2, #28]
 8000f82:	4b85      	ldr	r3, [pc, #532]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f92:	4b82      	ldr	r3, [pc, #520]	@ (800119c <HAL_RCC_OscConfig+0x4c8>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d118      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f9e:	4b7f      	ldr	r3, [pc, #508]	@ (800119c <HAL_RCC_OscConfig+0x4c8>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a7e      	ldr	r2, [pc, #504]	@ (800119c <HAL_RCC_OscConfig+0x4c8>)
 8000fa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000faa:	f7ff fb7b 	bl	80006a4 <HAL_GetTick>
 8000fae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb0:	e008      	b.n	8000fc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fb2:	f7ff fb77 	bl	80006a4 <HAL_GetTick>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	2b64      	cmp	r3, #100	@ 0x64
 8000fbe:	d901      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	e103      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc4:	4b75      	ldr	r3, [pc, #468]	@ (800119c <HAL_RCC_OscConfig+0x4c8>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d0f0      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d106      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x312>
 8000fd8:	4b6f      	ldr	r3, [pc, #444]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000fda:	6a1b      	ldr	r3, [r3, #32]
 8000fdc:	4a6e      	ldr	r2, [pc, #440]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000fde:	f043 0301 	orr.w	r3, r3, #1
 8000fe2:	6213      	str	r3, [r2, #32]
 8000fe4:	e02d      	b.n	8001042 <HAL_RCC_OscConfig+0x36e>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d10c      	bne.n	8001008 <HAL_RCC_OscConfig+0x334>
 8000fee:	4b6a      	ldr	r3, [pc, #424]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000ff0:	6a1b      	ldr	r3, [r3, #32]
 8000ff2:	4a69      	ldr	r2, [pc, #420]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000ff4:	f023 0301 	bic.w	r3, r3, #1
 8000ff8:	6213      	str	r3, [r2, #32]
 8000ffa:	4b67      	ldr	r3, [pc, #412]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000ffc:	6a1b      	ldr	r3, [r3, #32]
 8000ffe:	4a66      	ldr	r2, [pc, #408]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001000:	f023 0304 	bic.w	r3, r3, #4
 8001004:	6213      	str	r3, [r2, #32]
 8001006:	e01c      	b.n	8001042 <HAL_RCC_OscConfig+0x36e>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	2b05      	cmp	r3, #5
 800100e:	d10c      	bne.n	800102a <HAL_RCC_OscConfig+0x356>
 8001010:	4b61      	ldr	r3, [pc, #388]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001012:	6a1b      	ldr	r3, [r3, #32]
 8001014:	4a60      	ldr	r2, [pc, #384]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001016:	f043 0304 	orr.w	r3, r3, #4
 800101a:	6213      	str	r3, [r2, #32]
 800101c:	4b5e      	ldr	r3, [pc, #376]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 800101e:	6a1b      	ldr	r3, [r3, #32]
 8001020:	4a5d      	ldr	r2, [pc, #372]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6213      	str	r3, [r2, #32]
 8001028:	e00b      	b.n	8001042 <HAL_RCC_OscConfig+0x36e>
 800102a:	4b5b      	ldr	r3, [pc, #364]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 800102c:	6a1b      	ldr	r3, [r3, #32]
 800102e:	4a5a      	ldr	r2, [pc, #360]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001030:	f023 0301 	bic.w	r3, r3, #1
 8001034:	6213      	str	r3, [r2, #32]
 8001036:	4b58      	ldr	r3, [pc, #352]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001038:	6a1b      	ldr	r3, [r3, #32]
 800103a:	4a57      	ldr	r2, [pc, #348]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 800103c:	f023 0304 	bic.w	r3, r3, #4
 8001040:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d015      	beq.n	8001076 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800104a:	f7ff fb2b 	bl	80006a4 <HAL_GetTick>
 800104e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001050:	e00a      	b.n	8001068 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001052:	f7ff fb27 	bl	80006a4 <HAL_GetTick>
 8001056:	4602      	mov	r2, r0
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001060:	4293      	cmp	r3, r2
 8001062:	d901      	bls.n	8001068 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001064:	2303      	movs	r3, #3
 8001066:	e0b1      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001068:	4b4b      	ldr	r3, [pc, #300]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 800106a:	6a1b      	ldr	r3, [r3, #32]
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	2b00      	cmp	r3, #0
 8001072:	d0ee      	beq.n	8001052 <HAL_RCC_OscConfig+0x37e>
 8001074:	e014      	b.n	80010a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001076:	f7ff fb15 	bl	80006a4 <HAL_GetTick>
 800107a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800107c:	e00a      	b.n	8001094 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800107e:	f7ff fb11 	bl	80006a4 <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	f241 3288 	movw	r2, #5000	@ 0x1388
 800108c:	4293      	cmp	r3, r2
 800108e:	d901      	bls.n	8001094 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	e09b      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001094:	4b40      	ldr	r3, [pc, #256]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	f003 0302 	and.w	r3, r3, #2
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1ee      	bne.n	800107e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010a0:	7dfb      	ldrb	r3, [r7, #23]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d105      	bne.n	80010b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	4a3b      	ldr	r2, [pc, #236]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 80010ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80010b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f000 8087 	beq.w	80011ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010bc:	4b36      	ldr	r3, [pc, #216]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 030c 	and.w	r3, r3, #12
 80010c4:	2b08      	cmp	r3, #8
 80010c6:	d061      	beq.n	800118c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	69db      	ldr	r3, [r3, #28]
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d146      	bne.n	800115e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010d0:	4b33      	ldr	r3, [pc, #204]	@ (80011a0 <HAL_RCC_OscConfig+0x4cc>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d6:	f7ff fae5 	bl	80006a4 <HAL_GetTick>
 80010da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010dc:	e008      	b.n	80010f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010de:	f7ff fae1 	bl	80006a4 <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e06d      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010f0:	4b29      	ldr	r3, [pc, #164]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1f0      	bne.n	80010de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a1b      	ldr	r3, [r3, #32]
 8001100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001104:	d108      	bne.n	8001118 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001106:	4b24      	ldr	r3, [pc, #144]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	4921      	ldr	r1, [pc, #132]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001114:	4313      	orrs	r3, r2
 8001116:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001118:	4b1f      	ldr	r3, [pc, #124]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a19      	ldr	r1, [r3, #32]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001128:	430b      	orrs	r3, r1
 800112a:	491b      	ldr	r1, [pc, #108]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 800112c:	4313      	orrs	r3, r2
 800112e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001130:	4b1b      	ldr	r3, [pc, #108]	@ (80011a0 <HAL_RCC_OscConfig+0x4cc>)
 8001132:	2201      	movs	r2, #1
 8001134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001136:	f7ff fab5 	bl	80006a4 <HAL_GetTick>
 800113a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800113c:	e008      	b.n	8001150 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800113e:	f7ff fab1 	bl	80006a4 <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d901      	bls.n	8001150 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e03d      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001150:	4b11      	ldr	r3, [pc, #68]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d0f0      	beq.n	800113e <HAL_RCC_OscConfig+0x46a>
 800115c:	e035      	b.n	80011ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800115e:	4b10      	ldr	r3, [pc, #64]	@ (80011a0 <HAL_RCC_OscConfig+0x4cc>)
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001164:	f7ff fa9e 	bl	80006a4 <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800116c:	f7ff fa9a 	bl	80006a4 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e026      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800117e:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1f0      	bne.n	800116c <HAL_RCC_OscConfig+0x498>
 800118a:	e01e      	b.n	80011ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69db      	ldr	r3, [r3, #28]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d107      	bne.n	80011a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e019      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
 8001198:	40021000 	.word	0x40021000
 800119c:	40007000 	.word	0x40007000
 80011a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011a4:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <HAL_RCC_OscConfig+0x500>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a1b      	ldr	r3, [r3, #32]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d106      	bne.n	80011c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d001      	beq.n	80011ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e000      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40021000 	.word	0x40021000

080011d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d101      	bne.n	80011ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e0d0      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011ec:	4b6a      	ldr	r3, [pc, #424]	@ (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0307 	and.w	r3, r3, #7
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d910      	bls.n	800121c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011fa:	4b67      	ldr	r3, [pc, #412]	@ (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f023 0207 	bic.w	r2, r3, #7
 8001202:	4965      	ldr	r1, [pc, #404]	@ (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	4313      	orrs	r3, r2
 8001208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800120a:	4b63      	ldr	r3, [pc, #396]	@ (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	429a      	cmp	r2, r3
 8001216:	d001      	beq.n	800121c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e0b8      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d020      	beq.n	800126a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	2b00      	cmp	r3, #0
 8001232:	d005      	beq.n	8001240 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001234:	4b59      	ldr	r3, [pc, #356]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	4a58      	ldr	r2, [pc, #352]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 800123a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800123e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0308 	and.w	r3, r3, #8
 8001248:	2b00      	cmp	r3, #0
 800124a:	d005      	beq.n	8001258 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800124c:	4b53      	ldr	r3, [pc, #332]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	4a52      	ldr	r2, [pc, #328]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001252:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001256:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001258:	4b50      	ldr	r3, [pc, #320]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	494d      	ldr	r1, [pc, #308]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001266:	4313      	orrs	r3, r2
 8001268:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	2b00      	cmp	r3, #0
 8001274:	d040      	beq.n	80012f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d107      	bne.n	800128e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800127e:	4b47      	ldr	r3, [pc, #284]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d115      	bne.n	80012b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e07f      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2b02      	cmp	r3, #2
 8001294:	d107      	bne.n	80012a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001296:	4b41      	ldr	r3, [pc, #260]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d109      	bne.n	80012b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e073      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a6:	4b3d      	ldr	r3, [pc, #244]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e06b      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012b6:	4b39      	ldr	r3, [pc, #228]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f023 0203 	bic.w	r2, r3, #3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	4936      	ldr	r1, [pc, #216]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 80012c4:	4313      	orrs	r3, r2
 80012c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012c8:	f7ff f9ec 	bl	80006a4 <HAL_GetTick>
 80012cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ce:	e00a      	b.n	80012e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012d0:	f7ff f9e8 	bl	80006a4 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012de:	4293      	cmp	r3, r2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e053      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012e6:	4b2d      	ldr	r3, [pc, #180]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f003 020c 	and.w	r2, r3, #12
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d1eb      	bne.n	80012d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012f8:	4b27      	ldr	r3, [pc, #156]	@ (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0307 	and.w	r3, r3, #7
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	429a      	cmp	r2, r3
 8001304:	d210      	bcs.n	8001328 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001306:	4b24      	ldr	r3, [pc, #144]	@ (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f023 0207 	bic.w	r2, r3, #7
 800130e:	4922      	ldr	r1, [pc, #136]	@ (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	4313      	orrs	r3, r2
 8001314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001316:	4b20      	ldr	r3, [pc, #128]	@ (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	683a      	ldr	r2, [r7, #0]
 8001320:	429a      	cmp	r2, r3
 8001322:	d001      	beq.n	8001328 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e032      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	2b00      	cmp	r3, #0
 8001332:	d008      	beq.n	8001346 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001334:	4b19      	ldr	r3, [pc, #100]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	4916      	ldr	r1, [pc, #88]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001342:	4313      	orrs	r3, r2
 8001344:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0308 	and.w	r3, r3, #8
 800134e:	2b00      	cmp	r3, #0
 8001350:	d009      	beq.n	8001366 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001352:	4b12      	ldr	r3, [pc, #72]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	490e      	ldr	r1, [pc, #56]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001362:	4313      	orrs	r3, r2
 8001364:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001366:	f000 f821 	bl	80013ac <HAL_RCC_GetSysClockFreq>
 800136a:	4602      	mov	r2, r0
 800136c:	4b0b      	ldr	r3, [pc, #44]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	091b      	lsrs	r3, r3, #4
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	490a      	ldr	r1, [pc, #40]	@ (80013a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001378:	5ccb      	ldrb	r3, [r1, r3]
 800137a:	fa22 f303 	lsr.w	r3, r2, r3
 800137e:	4a09      	ldr	r2, [pc, #36]	@ (80013a4 <HAL_RCC_ClockConfig+0x1cc>)
 8001380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001382:	4b09      	ldr	r3, [pc, #36]	@ (80013a8 <HAL_RCC_ClockConfig+0x1d0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f94a 	bl	8000620 <HAL_InitTick>

  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40022000 	.word	0x40022000
 800139c:	40021000 	.word	0x40021000
 80013a0:	08003e5c 	.word	0x08003e5c
 80013a4:	20000000 	.word	0x20000000
 80013a8:	20000004 	.word	0x20000004

080013ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b087      	sub	sp, #28
 80013b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	2300      	movs	r3, #0
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001440 <HAL_RCC_GetSysClockFreq+0x94>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f003 030c 	and.w	r3, r3, #12
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	d002      	beq.n	80013dc <HAL_RCC_GetSysClockFreq+0x30>
 80013d6:	2b08      	cmp	r3, #8
 80013d8:	d003      	beq.n	80013e2 <HAL_RCC_GetSysClockFreq+0x36>
 80013da:	e027      	b.n	800142c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013dc:	4b19      	ldr	r3, [pc, #100]	@ (8001444 <HAL_RCC_GetSysClockFreq+0x98>)
 80013de:	613b      	str	r3, [r7, #16]
      break;
 80013e0:	e027      	b.n	8001432 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	0c9b      	lsrs	r3, r3, #18
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	4a17      	ldr	r2, [pc, #92]	@ (8001448 <HAL_RCC_GetSysClockFreq+0x9c>)
 80013ec:	5cd3      	ldrb	r3, [r2, r3]
 80013ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d010      	beq.n	800141c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013fa:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <HAL_RCC_GetSysClockFreq+0x94>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	0c5b      	lsrs	r3, r3, #17
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	4a11      	ldr	r2, [pc, #68]	@ (800144c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001406:	5cd3      	ldrb	r3, [r2, r3]
 8001408:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a0d      	ldr	r2, [pc, #52]	@ (8001444 <HAL_RCC_GetSysClockFreq+0x98>)
 800140e:	fb03 f202 	mul.w	r2, r3, r2
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	fbb2 f3f3 	udiv	r3, r2, r3
 8001418:	617b      	str	r3, [r7, #20]
 800141a:	e004      	b.n	8001426 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a0c      	ldr	r2, [pc, #48]	@ (8001450 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001420:	fb02 f303 	mul.w	r3, r2, r3
 8001424:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	613b      	str	r3, [r7, #16]
      break;
 800142a:	e002      	b.n	8001432 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800142c:	4b05      	ldr	r3, [pc, #20]	@ (8001444 <HAL_RCC_GetSysClockFreq+0x98>)
 800142e:	613b      	str	r3, [r7, #16]
      break;
 8001430:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001432:	693b      	ldr	r3, [r7, #16]
}
 8001434:	4618      	mov	r0, r3
 8001436:	371c      	adds	r7, #28
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	40021000 	.word	0x40021000
 8001444:	007a1200 	.word	0x007a1200
 8001448:	08003e74 	.word	0x08003e74
 800144c:	08003e84 	.word	0x08003e84
 8001450:	003d0900 	.word	0x003d0900

08001454 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001458:	4b02      	ldr	r3, [pc, #8]	@ (8001464 <HAL_RCC_GetHCLKFreq+0x10>)
 800145a:	681b      	ldr	r3, [r3, #0]
}
 800145c:	4618      	mov	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	20000000 	.word	0x20000000

08001468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800146c:	f7ff fff2 	bl	8001454 <HAL_RCC_GetHCLKFreq>
 8001470:	4602      	mov	r2, r0
 8001472:	4b05      	ldr	r3, [pc, #20]	@ (8001488 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	0a1b      	lsrs	r3, r3, #8
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	4903      	ldr	r1, [pc, #12]	@ (800148c <HAL_RCC_GetPCLK1Freq+0x24>)
 800147e:	5ccb      	ldrb	r3, [r1, r3]
 8001480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001484:	4618      	mov	r0, r3
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40021000 	.word	0x40021000
 800148c:	08003e6c 	.word	0x08003e6c

08001490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001494:	f7ff ffde 	bl	8001454 <HAL_RCC_GetHCLKFreq>
 8001498:	4602      	mov	r2, r0
 800149a:	4b05      	ldr	r3, [pc, #20]	@ (80014b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	0adb      	lsrs	r3, r3, #11
 80014a0:	f003 0307 	and.w	r3, r3, #7
 80014a4:	4903      	ldr	r1, [pc, #12]	@ (80014b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014a6:	5ccb      	ldrb	r3, [r1, r3]
 80014a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40021000 	.word	0x40021000
 80014b4:	08003e6c 	.word	0x08003e6c

080014b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014c0:	4b0a      	ldr	r3, [pc, #40]	@ (80014ec <RCC_Delay+0x34>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a0a      	ldr	r2, [pc, #40]	@ (80014f0 <RCC_Delay+0x38>)
 80014c6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ca:	0a5b      	lsrs	r3, r3, #9
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	fb02 f303 	mul.w	r3, r2, r3
 80014d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014d4:	bf00      	nop
  }
  while (Delay --);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	1e5a      	subs	r2, r3, #1
 80014da:	60fa      	str	r2, [r7, #12]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1f9      	bne.n	80014d4 <RCC_Delay+0x1c>
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr
 80014ec:	20000000 	.word	0x20000000
 80014f0:	10624dd3 	.word	0x10624dd3

080014f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d101      	bne.n	8001506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e042      	b.n	800158c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	d106      	bne.n	8001520 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7fe ff94 	bl	8000448 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2224      	movs	r2, #36	@ 0x24
 8001524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001536:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f000 f82b 	bl	8001594 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	691a      	ldr	r2, [r3, #16]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800154c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	695a      	ldr	r2, [r3, #20]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800155c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800156c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2220      	movs	r2, #32
 8001578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2220      	movs	r2, #32
 8001580:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68da      	ldr	r2, [r3, #12]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	430a      	orrs	r2, r1
 80015b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	431a      	orrs	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80015ce:	f023 030c 	bic.w	r3, r3, #12
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	6812      	ldr	r2, [r2, #0]
 80015d6:	68b9      	ldr	r1, [r7, #8]
 80015d8:	430b      	orrs	r3, r1
 80015da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	699a      	ldr	r2, [r3, #24]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a2c      	ldr	r2, [pc, #176]	@ (80016a8 <UART_SetConfig+0x114>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d103      	bne.n	8001604 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80015fc:	f7ff ff48 	bl	8001490 <HAL_RCC_GetPCLK2Freq>
 8001600:	60f8      	str	r0, [r7, #12]
 8001602:	e002      	b.n	800160a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001604:	f7ff ff30 	bl	8001468 <HAL_RCC_GetPCLK1Freq>
 8001608:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	4613      	mov	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	009a      	lsls	r2, r3, #2
 8001614:	441a      	add	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001620:	4a22      	ldr	r2, [pc, #136]	@ (80016ac <UART_SetConfig+0x118>)
 8001622:	fba2 2303 	umull	r2, r3, r2, r3
 8001626:	095b      	lsrs	r3, r3, #5
 8001628:	0119      	lsls	r1, r3, #4
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	4613      	mov	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	009a      	lsls	r2, r3, #2
 8001634:	441a      	add	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001640:	4b1a      	ldr	r3, [pc, #104]	@ (80016ac <UART_SetConfig+0x118>)
 8001642:	fba3 0302 	umull	r0, r3, r3, r2
 8001646:	095b      	lsrs	r3, r3, #5
 8001648:	2064      	movs	r0, #100	@ 0x64
 800164a:	fb00 f303 	mul.w	r3, r0, r3
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	011b      	lsls	r3, r3, #4
 8001652:	3332      	adds	r3, #50	@ 0x32
 8001654:	4a15      	ldr	r2, [pc, #84]	@ (80016ac <UART_SetConfig+0x118>)
 8001656:	fba2 2303 	umull	r2, r3, r2, r3
 800165a:	095b      	lsrs	r3, r3, #5
 800165c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001660:	4419      	add	r1, r3
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	4613      	mov	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	009a      	lsls	r2, r3, #2
 800166c:	441a      	add	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	fbb2 f2f3 	udiv	r2, r2, r3
 8001678:	4b0c      	ldr	r3, [pc, #48]	@ (80016ac <UART_SetConfig+0x118>)
 800167a:	fba3 0302 	umull	r0, r3, r3, r2
 800167e:	095b      	lsrs	r3, r3, #5
 8001680:	2064      	movs	r0, #100	@ 0x64
 8001682:	fb00 f303 	mul.w	r3, r0, r3
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	011b      	lsls	r3, r3, #4
 800168a:	3332      	adds	r3, #50	@ 0x32
 800168c:	4a07      	ldr	r2, [pc, #28]	@ (80016ac <UART_SetConfig+0x118>)
 800168e:	fba2 2303 	umull	r2, r3, r2, r3
 8001692:	095b      	lsrs	r3, r3, #5
 8001694:	f003 020f 	and.w	r2, r3, #15
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	440a      	add	r2, r1
 800169e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80016a0:	bf00      	nop
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40013800 	.word	0x40013800
 80016ac:	51eb851f 	.word	0x51eb851f

080016b0 <app_init>:

task_dta_t task_dta_list[TASK_QTY];

/********************** external functions definition ************************/
void app_init(void)
{
 80016b0:	b590      	push	{r4, r7, lr}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af02      	add	r7, sp, #8
	uint32_t index;

	/* Print out: Application Initialized */
	LOGGER_LOG("\r\n");
 80016b6:	b672      	cpsid	i
 80016b8:	4b4f      	ldr	r3, [pc, #316]	@ (80017f8 <app_init+0x148>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a4f      	ldr	r2, [pc, #316]	@ (80017fc <app_init+0x14c>)
 80016be:	213f      	movs	r1, #63	@ 0x3f
 80016c0:	4618      	mov	r0, r3
 80016c2:	f001 fb3b 	bl	8002d3c <sniprintf>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4a4d      	ldr	r2, [pc, #308]	@ (8001800 <app_init+0x150>)
 80016ca:	6013      	str	r3, [r2, #0]
 80016cc:	4b4a      	ldr	r3, [pc, #296]	@ (80017f8 <app_init+0x148>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f000 fb4d 	bl	8001d70 <logger_log_print_>
 80016d6:	b662      	cpsie	i
	LOGGER_LOG("%s is running - Tick [mS] = %lu\r\n", GET_NAME(app_init), HAL_GetTick());
 80016d8:	b672      	cpsid	i
 80016da:	4b47      	ldr	r3, [pc, #284]	@ (80017f8 <app_init+0x148>)
 80016dc:	681c      	ldr	r4, [r3, #0]
 80016de:	f7fe ffe1 	bl	80006a4 <HAL_GetTick>
 80016e2:	4603      	mov	r3, r0
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	4b47      	ldr	r3, [pc, #284]	@ (8001804 <app_init+0x154>)
 80016e8:	4a47      	ldr	r2, [pc, #284]	@ (8001808 <app_init+0x158>)
 80016ea:	213f      	movs	r1, #63	@ 0x3f
 80016ec:	4620      	mov	r0, r4
 80016ee:	f001 fb25 	bl	8002d3c <sniprintf>
 80016f2:	4603      	mov	r3, r0
 80016f4:	4a42      	ldr	r2, [pc, #264]	@ (8001800 <app_init+0x150>)
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	4b3f      	ldr	r3, [pc, #252]	@ (80017f8 <app_init+0x148>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f000 fb37 	bl	8001d70 <logger_log_print_>
 8001702:	b662      	cpsie	i

	LOGGER_LOG(p_sys);
 8001704:	b672      	cpsid	i
 8001706:	4b3c      	ldr	r3, [pc, #240]	@ (80017f8 <app_init+0x148>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a40      	ldr	r2, [pc, #256]	@ (800180c <app_init+0x15c>)
 800170c:	6812      	ldr	r2, [r2, #0]
 800170e:	213f      	movs	r1, #63	@ 0x3f
 8001710:	4618      	mov	r0, r3
 8001712:	f001 fb13 	bl	8002d3c <sniprintf>
 8001716:	4603      	mov	r3, r0
 8001718:	4a39      	ldr	r2, [pc, #228]	@ (8001800 <app_init+0x150>)
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	4b36      	ldr	r3, [pc, #216]	@ (80017f8 <app_init+0x148>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f000 fb25 	bl	8001d70 <logger_log_print_>
 8001726:	b662      	cpsie	i
	LOGGER_LOG(p_app);
 8001728:	b672      	cpsid	i
 800172a:	4b33      	ldr	r3, [pc, #204]	@ (80017f8 <app_init+0x148>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a38      	ldr	r2, [pc, #224]	@ (8001810 <app_init+0x160>)
 8001730:	6812      	ldr	r2, [r2, #0]
 8001732:	213f      	movs	r1, #63	@ 0x3f
 8001734:	4618      	mov	r0, r3
 8001736:	f001 fb01 	bl	8002d3c <sniprintf>
 800173a:	4603      	mov	r3, r0
 800173c:	4a30      	ldr	r2, [pc, #192]	@ (8001800 <app_init+0x150>)
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	4b2d      	ldr	r3, [pc, #180]	@ (80017f8 <app_init+0x148>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f000 fb13 	bl	8001d70 <logger_log_print_>
 800174a:	b662      	cpsie	i

	g_app_cnt = G_APP_CNT_INI;
 800174c:	4b31      	ldr	r3, [pc, #196]	@ (8001814 <app_init+0x164>)
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]

	/* Print out: Application execution counter */
	LOGGER_LOG(" %s = %lu\r\n", GET_NAME(g_app_cnt), g_app_cnt);
 8001752:	b672      	cpsid	i
 8001754:	4b28      	ldr	r3, [pc, #160]	@ (80017f8 <app_init+0x148>)
 8001756:	6818      	ldr	r0, [r3, #0]
 8001758:	4b2e      	ldr	r3, [pc, #184]	@ (8001814 <app_init+0x164>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	4b2e      	ldr	r3, [pc, #184]	@ (8001818 <app_init+0x168>)
 8001760:	4a2e      	ldr	r2, [pc, #184]	@ (800181c <app_init+0x16c>)
 8001762:	213f      	movs	r1, #63	@ 0x3f
 8001764:	f001 faea 	bl	8002d3c <sniprintf>
 8001768:	4603      	mov	r3, r0
 800176a:	4a25      	ldr	r2, [pc, #148]	@ (8001800 <app_init+0x150>)
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	4b22      	ldr	r3, [pc, #136]	@ (80017f8 <app_init+0x148>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f000 fafc 	bl	8001d70 <logger_log_print_>
 8001778:	b662      	cpsie	i

	/* Go through the task arrays */
	for (index = 0; TASK_QTY > index; index++)
 800177a:	2300      	movs	r3, #0
 800177c:	607b      	str	r3, [r7, #4]
 800177e:	e01a      	b.n	80017b6 <app_init+0x106>
	{
		/* Run task_x_init */
		(*task_cfg_list[index].task_init)(task_cfg_list[index].parameters);
 8001780:	4927      	ldr	r1, [pc, #156]	@ (8001820 <app_init+0x170>)
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	4613      	mov	r3, r2
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	4413      	add	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	440b      	add	r3, r1
 800178e:	6819      	ldr	r1, [r3, #0]
 8001790:	4823      	ldr	r0, [pc, #140]	@ (8001820 <app_init+0x170>)
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	4613      	mov	r3, r2
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	4413      	add	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4403      	add	r3, r0
 800179e:	3308      	adds	r3, #8
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	4788      	blx	r1

		/* Init variables */
		task_dta_list[index].WCET = TASK_X_WCET_INI;
 80017a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001824 <app_init+0x174>)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2100      	movs	r1, #0
 80017ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (index = 0; TASK_QTY > index; index++)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3301      	adds	r3, #1
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d9e1      	bls.n	8001780 <app_init+0xd0>
	}

	cycle_counter_init();
 80017bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001828 <app_init+0x178>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	4a19      	ldr	r2, [pc, #100]	@ (8001828 <app_init+0x178>)
 80017c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017c6:	60d3      	str	r3, [r2, #12]
 80017c8:	4b18      	ldr	r3, [pc, #96]	@ (800182c <app_init+0x17c>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	4b17      	ldr	r3, [pc, #92]	@ (800182c <app_init+0x17c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a16      	ldr	r2, [pc, #88]	@ (800182c <app_init+0x17c>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6013      	str	r3, [r2, #0]

	__asm("CPSID i");	/* disable interrupts*/
 80017da:	b672      	cpsid	i
	g_app_tick_cnt = G_APP_TICK_CNT_INI;
 80017dc:	4b14      	ldr	r3, [pc, #80]	@ (8001830 <app_init+0x180>)
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
	g_task_sensor_tick_cnt = G_APP_TICK_CNT_INI;
 80017e2:	4b14      	ldr	r3, [pc, #80]	@ (8001834 <app_init+0x184>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
	g_task_menu_tick_cnt = G_APP_TICK_CNT_INI;
 80017e8:	4b13      	ldr	r3, [pc, #76]	@ (8001838 <app_init+0x188>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
    __asm("CPSIE i");	/* enable interrupts*/
 80017ee:	b662      	cpsie	i
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd90      	pop	{r4, r7, pc}
 80017f8:	08003ea0 	.word	0x08003ea0
 80017fc:	08003cf0 	.word	0x08003cf0
 8001800:	20000150 	.word	0x20000150
 8001804:	08003cf4 	.word	0x08003cf4
 8001808:	08003d00 	.word	0x08003d00
 800180c:	2000000c 	.word	0x2000000c
 8001810:	20000010 	.word	0x20000010
 8001814:	200000f8 	.word	0x200000f8
 8001818:	08003d24 	.word	0x08003d24
 800181c:	08003d30 	.word	0x08003d30
 8001820:	08003e88 	.word	0x08003e88
 8001824:	20000104 	.word	0x20000104
 8001828:	e000edf0 	.word	0xe000edf0
 800182c:	e0001000 	.word	0xe0001000
 8001830:	20000100 	.word	0x20000100
 8001834:	20000198 	.word	0x20000198
 8001838:	2000015c 	.word	0x2000015c

0800183c <app_update>:

void app_update(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
	uint32_t index;
	uint32_t cycle_counter_time_us;

	/* Check if it's time to run tasks */
	if (G_APP_TICK_CNT_INI < g_app_tick_cnt)
 8001842:	4b29      	ldr	r3, [pc, #164]	@ (80018e8 <app_update+0xac>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d049      	beq.n	80018de <app_update+0xa2>
    {
    	g_app_tick_cnt--;
 800184a:	4b27      	ldr	r3, [pc, #156]	@ (80018e8 <app_update+0xac>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	3b01      	subs	r3, #1
 8001850:	4a25      	ldr	r2, [pc, #148]	@ (80018e8 <app_update+0xac>)
 8001852:	6013      	str	r3, [r2, #0]

    	/* Update App Counter */
    	g_app_cnt++;
 8001854:	4b25      	ldr	r3, [pc, #148]	@ (80018ec <app_update+0xb0>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	3301      	adds	r3, #1
 800185a:	4a24      	ldr	r2, [pc, #144]	@ (80018ec <app_update+0xb0>)
 800185c:	6013      	str	r3, [r2, #0]
    	g_app_time_us = 0;
 800185e:	4b24      	ldr	r3, [pc, #144]	@ (80018f0 <app_update+0xb4>)
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]

    	/* Go through the task arrays */
    	for (index = 0; TASK_QTY > index; index++)
 8001864:	2300      	movs	r3, #0
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	e036      	b.n	80018d8 <app_update+0x9c>
    	{
			cycle_counter_reset();
 800186a:	4b22      	ldr	r3, [pc, #136]	@ (80018f4 <app_update+0xb8>)
 800186c:	2200      	movs	r2, #0
 800186e:	605a      	str	r2, [r3, #4]

    		/* Run task_x_update */
			(*task_cfg_list[index].task_update)(task_cfg_list[index].parameters);
 8001870:	4921      	ldr	r1, [pc, #132]	@ (80018f8 <app_update+0xbc>)
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	4613      	mov	r3, r2
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	4413      	add	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	440b      	add	r3, r1
 800187e:	3304      	adds	r3, #4
 8001880:	6819      	ldr	r1, [r3, #0]
 8001882:	481d      	ldr	r0, [pc, #116]	@ (80018f8 <app_update+0xbc>)
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	4413      	add	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4403      	add	r3, r0
 8001890:	3308      	adds	r3, #8
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	4788      	blx	r1

			cycle_counter_time_us = cycle_counter_time_us();
 8001898:	4b16      	ldr	r3, [pc, #88]	@ (80018f4 <app_update+0xb8>)
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	4b17      	ldr	r3, [pc, #92]	@ (80018fc <app_update+0xc0>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4917      	ldr	r1, [pc, #92]	@ (8001900 <app_update+0xc4>)
 80018a2:	fba1 1303 	umull	r1, r3, r1, r3
 80018a6:	0c9b      	lsrs	r3, r3, #18
 80018a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ac:	603b      	str	r3, [r7, #0]

			/* Update variables */
	    	g_app_time_us += cycle_counter_time_us;
 80018ae:	4b10      	ldr	r3, [pc, #64]	@ (80018f0 <app_update+0xb4>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	4413      	add	r3, r2
 80018b6:	4a0e      	ldr	r2, [pc, #56]	@ (80018f0 <app_update+0xb4>)
 80018b8:	6013      	str	r3, [r2, #0]

			if (task_dta_list[index].WCET < cycle_counter_time_us)
 80018ba:	4a12      	ldr	r2, [pc, #72]	@ (8001904 <app_update+0xc8>)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d904      	bls.n	80018d2 <app_update+0x96>
			{
				task_dta_list[index].WCET = cycle_counter_time_us;
 80018c8:	490e      	ldr	r1, [pc, #56]	@ (8001904 <app_update+0xc8>)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    	for (index = 0; TASK_QTY > index; index++)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3301      	adds	r3, #1
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d9c5      	bls.n	800186a <app_update+0x2e>
			}
	    }
    }
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000100 	.word	0x20000100
 80018ec:	200000f8 	.word	0x200000f8
 80018f0:	200000fc 	.word	0x200000fc
 80018f4:	e0001000 	.word	0xe0001000
 80018f8:	08003e88 	.word	0x08003e88
 80018fc:	20000000 	.word	0x20000000
 8001900:	431bde83 	.word	0x431bde83
 8001904:	20000104 	.word	0x20000104

08001908 <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
	g_app_tick_cnt++;
 800190c:	4b09      	ldr	r3, [pc, #36]	@ (8001934 <HAL_SYSTICK_Callback+0x2c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	3301      	adds	r3, #1
 8001912:	4a08      	ldr	r2, [pc, #32]	@ (8001934 <HAL_SYSTICK_Callback+0x2c>)
 8001914:	6013      	str	r3, [r2, #0]

	g_task_sensor_tick_cnt++;
 8001916:	4b08      	ldr	r3, [pc, #32]	@ (8001938 <HAL_SYSTICK_Callback+0x30>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	3301      	adds	r3, #1
 800191c:	4a06      	ldr	r2, [pc, #24]	@ (8001938 <HAL_SYSTICK_Callback+0x30>)
 800191e:	6013      	str	r3, [r2, #0]
	g_task_menu_tick_cnt++;
 8001920:	4b06      	ldr	r3, [pc, #24]	@ (800193c <HAL_SYSTICK_Callback+0x34>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	3301      	adds	r3, #1
 8001926:	4a05      	ldr	r2, [pc, #20]	@ (800193c <HAL_SYSTICK_Callback+0x34>)
 8001928:	6013      	str	r3, [r2, #0]
}
 800192a:	bf00      	nop
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	20000100 	.word	0x20000100
 8001938:	20000198 	.word	0x20000198
 800193c:	2000015c 	.word	0x2000015c

08001940 <displayInit>:

void display_delay_us(uint32_t delay_us);

//=====[Implementations of public functions]===================================
void displayInit( displayConnection_t connection )
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	71fb      	strb	r3, [r7, #7]
    display.connection = connection;
 800194a:	4a2f      	ldr	r2, [pc, #188]	@ (8001a08 <displayInit+0xc8>)
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	7013      	strb	r3, [r2, #0]

    initial8BitCommunicationIsCompleted = false;
 8001950:	4b2e      	ldr	r3, [pc, #184]	@ (8001a0c <displayInit+0xcc>)
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]

    HAL_Delay(50);
 8001956:	2032      	movs	r0, #50	@ 0x32
 8001958:	f7fe feae 	bl	80006b8 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 800195c:	2130      	movs	r1, #48	@ 0x30
 800195e:	2000      	movs	r0, #0
 8001960:	f000 f8b6 	bl	8001ad0 <displayCodeWrite>
                      DISPLAY_IR_FUNCTION_SET |
                      DISPLAY_IR_FUNCTION_SET_8BITS );
    HAL_Delay(5);
 8001964:	2005      	movs	r0, #5
 8001966:	f7fe fea7 	bl	80006b8 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 800196a:	2130      	movs	r1, #48	@ 0x30
 800196c:	2000      	movs	r0, #0
 800196e:	f000 f8af 	bl	8001ad0 <displayCodeWrite>
                      DISPLAY_IR_FUNCTION_SET |
                      DISPLAY_IR_FUNCTION_SET_8BITS );
    HAL_Delay(1);
 8001972:	2001      	movs	r0, #1
 8001974:	f7fe fea0 	bl	80006b8 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8001978:	2130      	movs	r1, #48	@ 0x30
 800197a:	2000      	movs	r0, #0
 800197c:	f000 f8a8 	bl	8001ad0 <displayCodeWrite>
                      DISPLAY_IR_FUNCTION_SET |
                      DISPLAY_IR_FUNCTION_SET_8BITS );
    HAL_Delay(1);
 8001980:	2001      	movs	r0, #1
 8001982:	f7fe fe99 	bl	80006b8 <HAL_Delay>

    switch( display.connection ) {
 8001986:	4b20      	ldr	r3, [pc, #128]	@ (8001a08 <displayInit+0xc8>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d009      	beq.n	80019a2 <displayInit+0x62>
 800198e:	2b01      	cmp	r3, #1
 8001990:	d119      	bne.n	80019c6 <displayInit+0x86>
        case DISPLAY_CONNECTION_GPIO_8BITS:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8001992:	2138      	movs	r1, #56	@ 0x38
 8001994:	2000      	movs	r0, #0
 8001996:	f000 f89b 	bl	8001ad0 <displayCodeWrite>
                              DISPLAY_IR_FUNCTION_SET |
                              DISPLAY_IR_FUNCTION_SET_8BITS |
                              DISPLAY_IR_FUNCTION_SET_2LINES |
                              DISPLAY_IR_FUNCTION_SET_5x8DOTS );
            HAL_Delay(1);
 800199a:	2001      	movs	r0, #1
 800199c:	f7fe fe8c 	bl	80006b8 <HAL_Delay>
        break;
 80019a0:	e011      	b.n	80019c6 <displayInit+0x86>

        case DISPLAY_CONNECTION_GPIO_4BITS:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80019a2:	2120      	movs	r1, #32
 80019a4:	2000      	movs	r0, #0
 80019a6:	f000 f893 	bl	8001ad0 <displayCodeWrite>
                              DISPLAY_IR_FUNCTION_SET |
                              DISPLAY_IR_FUNCTION_SET_4BITS );
            HAL_Delay(1);
 80019aa:	2001      	movs	r0, #1
 80019ac:	f7fe fe84 	bl	80006b8 <HAL_Delay>

            initial8BitCommunicationIsCompleted = true;
 80019b0:	4b16      	ldr	r3, [pc, #88]	@ (8001a0c <displayInit+0xcc>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	701a      	strb	r2, [r3, #0]

            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80019b6:	2128      	movs	r1, #40	@ 0x28
 80019b8:	2000      	movs	r0, #0
 80019ba:	f000 f889 	bl	8001ad0 <displayCodeWrite>
                              DISPLAY_IR_FUNCTION_SET |
                              DISPLAY_IR_FUNCTION_SET_4BITS |
                              DISPLAY_IR_FUNCTION_SET_2LINES |
                              DISPLAY_IR_FUNCTION_SET_5x8DOTS );
            HAL_Delay(1);
 80019be:	2001      	movs	r0, #1
 80019c0:	f7fe fe7a 	bl	80006b8 <HAL_Delay>
        break;
 80019c4:	bf00      	nop
    }

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80019c6:	2108      	movs	r1, #8
 80019c8:	2000      	movs	r0, #0
 80019ca:	f000 f881 	bl	8001ad0 <displayCodeWrite>
                      DISPLAY_IR_DISPLAY_CONTROL |
                      DISPLAY_IR_DISPLAY_CONTROL_DISPLAY_OFF |
                      DISPLAY_IR_DISPLAY_CONTROL_CURSOR_OFF |
                      DISPLAY_IR_DISPLAY_CONTROL_BLINK_OFF );
    HAL_Delay(1);
 80019ce:	2001      	movs	r0, #1
 80019d0:	f7fe fe72 	bl	80006b8 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80019d4:	2101      	movs	r1, #1
 80019d6:	2000      	movs	r0, #0
 80019d8:	f000 f87a 	bl	8001ad0 <displayCodeWrite>
                      DISPLAY_IR_CLEAR_DISPLAY );
    HAL_Delay(1);
 80019dc:	2001      	movs	r0, #1
 80019de:	f7fe fe6b 	bl	80006b8 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80019e2:	2106      	movs	r1, #6
 80019e4:	2000      	movs	r0, #0
 80019e6:	f000 f873 	bl	8001ad0 <displayCodeWrite>
                      DISPLAY_IR_ENTRY_MODE_SET |
                      DISPLAY_IR_ENTRY_MODE_SET_INCREMENT |
                      DISPLAY_IR_ENTRY_MODE_SET_NO_SHIFT );
    HAL_Delay(1);
 80019ea:	2001      	movs	r0, #1
 80019ec:	f7fe fe64 	bl	80006b8 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80019f0:	210c      	movs	r1, #12
 80019f2:	2000      	movs	r0, #0
 80019f4:	f000 f86c 	bl	8001ad0 <displayCodeWrite>
                      DISPLAY_IR_DISPLAY_CONTROL |
                      DISPLAY_IR_DISPLAY_CONTROL_DISPLAY_ON |
                      DISPLAY_IR_DISPLAY_CONTROL_CURSOR_OFF |
                      DISPLAY_IR_DISPLAY_CONTROL_BLINK_OFF );
    HAL_Delay(1);
 80019f8:	2001      	movs	r0, #1
 80019fa:	f7fe fe5d 	bl	80006b8 <HAL_Delay>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	2000010c 	.word	0x2000010c
 8001a0c:	2000010d 	.word	0x2000010d

08001a10 <displayCharPositionWrite>:

void displayCharPositionWrite( uint8_t charPositionX, uint8_t charPositionY )
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	460a      	mov	r2, r1
 8001a1a:	71fb      	strb	r3, [r7, #7]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	71bb      	strb	r3, [r7, #6]
    switch( charPositionY ) {
 8001a20:	79bb      	ldrb	r3, [r7, #6]
 8001a22:	2b03      	cmp	r3, #3
 8001a24:	d83a      	bhi.n	8001a9c <displayCharPositionWrite+0x8c>
 8001a26:	a201      	add	r2, pc, #4	@ (adr r2, 8001a2c <displayCharPositionWrite+0x1c>)
 8001a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a2c:	08001a3d 	.word	0x08001a3d
 8001a30:	08001a4f 	.word	0x08001a4f
 8001a34:	08001a69 	.word	0x08001a69
 8001a38:	08001a83 	.word	0x08001a83
        case 0:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	4619      	mov	r1, r3
 8001a46:	2000      	movs	r0, #0
 8001a48:	f000 f842 	bl	8001ad0 <displayCodeWrite>
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE1_FIRST_CHARACTER_ADDRESS +
                                charPositionX ) );
            //HAL_Delay(1);
        break;
 8001a4c:	e026      	b.n	8001a9c <displayCharPositionWrite+0x8c>

        case 1:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE2_FIRST_CHARACTER_ADDRESS +
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	3340      	adds	r3, #64	@ 0x40
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	b25b      	sxtb	r3, r3
                              DISPLAY_IR_SET_DDRAM_ADDR |
 8001a56:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a5a:	b25b      	sxtb	r3, r3
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	4619      	mov	r1, r3
 8001a60:	2000      	movs	r0, #0
 8001a62:	f000 f835 	bl	8001ad0 <displayCodeWrite>
                                charPositionX ) );
            //HAL_Delay(1);
        break;
 8001a66:	e019      	b.n	8001a9c <displayCharPositionWrite+0x8c>

        case 2:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE3_FIRST_CHARACTER_ADDRESS +
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	3314      	adds	r3, #20
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	b25b      	sxtb	r3, r3
                              DISPLAY_IR_SET_DDRAM_ADDR |
 8001a70:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a74:	b25b      	sxtb	r3, r3
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	4619      	mov	r1, r3
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	f000 f828 	bl	8001ad0 <displayCodeWrite>
                                charPositionX ) );
            //HAL_Delay(1);
        break;
 8001a80:	e00c      	b.n	8001a9c <displayCharPositionWrite+0x8c>

        case 3:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE4_FIRST_CHARACTER_ADDRESS +
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	3354      	adds	r3, #84	@ 0x54
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	b25b      	sxtb	r3, r3
                              DISPLAY_IR_SET_DDRAM_ADDR |
 8001a8a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a8e:	b25b      	sxtb	r3, r3
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	4619      	mov	r1, r3
 8001a94:	2000      	movs	r0, #0
 8001a96:	f000 f81b 	bl	8001ad0 <displayCodeWrite>
                                charPositionX ) );
            //HAL_Delay(1);
        break;
 8001a9a:	bf00      	nop
    }
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <displayStringWrite>:

void displayStringWrite( const char * str )
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
    while (*str) {
 8001aac:	e007      	b.n	8001abe <displayStringWrite+0x1a>
    	displayCodeWrite(DISPLAY_RS_DATA, *str++);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	1c5a      	adds	r2, r3, #1
 8001ab2:	607a      	str	r2, [r7, #4]
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	2001      	movs	r0, #1
 8001aba:	f000 f809 	bl	8001ad0 <displayCodeWrite>
    while (*str) {
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1f3      	bne.n	8001aae <displayStringWrite+0xa>
    }
}
 8001ac6:	bf00      	nop
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <displayCodeWrite>:

//=====[Implementations of private functions]==================================
static void displayCodeWrite( bool type, uint8_t dataBus )
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	460a      	mov	r2, r1
 8001ada:	71fb      	strb	r3, [r7, #7]
 8001adc:	4613      	mov	r3, r2
 8001ade:	71bb      	strb	r3, [r7, #6]
	if ( type == DISPLAY_RS_INSTRUCTION )
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	f083 0301 	eor.w	r3, r3, #1
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d004      	beq.n	8001af6 <displayCodeWrite+0x26>
		displayPinWrite( DISPLAY_PIN_RS, DISPLAY_RS_INSTRUCTION );
 8001aec:	2100      	movs	r1, #0
 8001aee:	2004      	movs	r0, #4
 8001af0:	f000 f812 	bl	8001b18 <displayPinWrite>
 8001af4:	e003      	b.n	8001afe <displayCodeWrite+0x2e>
	else
		displayPinWrite( DISPLAY_PIN_RS, DISPLAY_RS_DATA );
 8001af6:	2101      	movs	r1, #1
 8001af8:	2004      	movs	r0, #4
 8001afa:	f000 f80d 	bl	8001b18 <displayPinWrite>
	displayPinWrite( DISPLAY_PIN_RW, DISPLAY_RW_WRITE );
 8001afe:	2100      	movs	r1, #0
 8001b00:	2005      	movs	r0, #5
 8001b02:	f000 f809 	bl	8001b18 <displayPinWrite>
	displayDataBusWrite( dataBus );
 8001b06:	79bb      	ldrb	r3, [r7, #6]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f000 f873 	bl	8001bf4 <displayDataBusWrite>
}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <displayPinWrite>:

static void displayPinWrite( uint8_t pinName, int value )
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	6039      	str	r1, [r7, #0]
 8001b22:	71fb      	strb	r3, [r7, #7]
    switch( display.connection ) {
 8001b24:	4b2f      	ldr	r3, [pc, #188]	@ (8001be4 <displayPinWrite+0xcc>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d003      	beq.n	8001b34 <displayPinWrite+0x1c>
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d154      	bne.n	8001bda <displayPinWrite+0xc2>
                case DISPLAY_PIN_D7: displayD7 = value;   break;
                case DISPLAY_PIN_RS: displayRs = value;   break;
                case DISPLAY_PIN_EN: displayEn = value;   break;
                case DISPLAY_PIN_RW: break;
                */
                default: break;
 8001b30:	bf00      	nop
            }
            break;
 8001b32:	e052      	b.n	8001bda <displayPinWrite+0xc2>

        case DISPLAY_CONNECTION_GPIO_4BITS:
            switch( pinName ) {
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	3b04      	subs	r3, #4
 8001b38:	2b0a      	cmp	r3, #10
 8001b3a:	d84c      	bhi.n	8001bd6 <displayPinWrite+0xbe>
 8001b3c:	a201      	add	r2, pc, #4	@ (adr r2, 8001b44 <displayPinWrite+0x2c>)
 8001b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b42:	bf00      	nop
 8001b44:	08001bb5 	.word	0x08001bb5
 8001b48:	08001bd7 	.word	0x08001bd7
 8001b4c:	08001bc7 	.word	0x08001bc7
 8001b50:	08001bd7 	.word	0x08001bd7
 8001b54:	08001bd7 	.word	0x08001bd7
 8001b58:	08001bd7 	.word	0x08001bd7
 8001b5c:	08001bd7 	.word	0x08001bd7
 8001b60:	08001b71 	.word	0x08001b71
 8001b64:	08001b81 	.word	0x08001b81
 8001b68:	08001b91 	.word	0x08001b91
 8001b6c:	08001ba3 	.word	0x08001ba3
            	case DISPLAY_PIN_D4: HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, value);   break;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	461a      	mov	r2, r3
 8001b76:	2120      	movs	r1, #32
 8001b78:	481b      	ldr	r0, [pc, #108]	@ (8001be8 <displayPinWrite+0xd0>)
 8001b7a:	f7ff f870 	bl	8000c5e <HAL_GPIO_WritePin>
 8001b7e:	e02b      	b.n	8001bd8 <displayPinWrite+0xc0>
				case DISPLAY_PIN_D5: HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, value);   break;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	461a      	mov	r2, r3
 8001b86:	2110      	movs	r1, #16
 8001b88:	4817      	ldr	r0, [pc, #92]	@ (8001be8 <displayPinWrite+0xd0>)
 8001b8a:	f7ff f868 	bl	8000c5e <HAL_GPIO_WritePin>
 8001b8e:	e023      	b.n	8001bd8 <displayPinWrite+0xc0>
				case DISPLAY_PIN_D6: HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, value);   break;
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	461a      	mov	r2, r3
 8001b96:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b9a:	4813      	ldr	r0, [pc, #76]	@ (8001be8 <displayPinWrite+0xd0>)
 8001b9c:	f7ff f85f 	bl	8000c5e <HAL_GPIO_WritePin>
 8001ba0:	e01a      	b.n	8001bd8 <displayPinWrite+0xc0>
				case DISPLAY_PIN_D7: HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, value);   break;
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bac:	480f      	ldr	r0, [pc, #60]	@ (8001bec <displayPinWrite+0xd4>)
 8001bae:	f7ff f856 	bl	8000c5e <HAL_GPIO_WritePin>
 8001bb2:	e011      	b.n	8001bd8 <displayPinWrite+0xc0>
				case DISPLAY_PIN_RS: HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, value);   break;
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	461a      	mov	r2, r3
 8001bba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bbe:	480b      	ldr	r0, [pc, #44]	@ (8001bec <displayPinWrite+0xd4>)
 8001bc0:	f7ff f84d 	bl	8000c5e <HAL_GPIO_WritePin>
 8001bc4:	e008      	b.n	8001bd8 <displayPinWrite+0xc0>
				case DISPLAY_PIN_EN: HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, value);   break;
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	461a      	mov	r2, r3
 8001bcc:	2180      	movs	r1, #128	@ 0x80
 8001bce:	4808      	ldr	r0, [pc, #32]	@ (8001bf0 <displayPinWrite+0xd8>)
 8001bd0:	f7ff f845 	bl	8000c5e <HAL_GPIO_WritePin>
 8001bd4:	e000      	b.n	8001bd8 <displayPinWrite+0xc0>
                case DISPLAY_PIN_RW: break;
                default: break;
 8001bd6:	bf00      	nop
            }
            break;
 8001bd8:	bf00      	nop
    }
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	2000010c 	.word	0x2000010c
 8001be8:	40010c00 	.word	0x40010c00
 8001bec:	40010800 	.word	0x40010800
 8001bf0:	40011000 	.word	0x40011000

08001bf4 <displayDataBusWrite>:

static void displayDataBusWrite( uint8_t dataBus )
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
    displayPinWrite( DISPLAY_PIN_EN, OFF );
 8001bfe:	2100      	movs	r1, #0
 8001c00:	2006      	movs	r0, #6
 8001c02:	f7ff ff89 	bl	8001b18 <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D7, dataBus & 0b10000000 );
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	200e      	movs	r0, #14
 8001c10:	f7ff ff82 	bl	8001b18 <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D6, dataBus & 0b01000000 );
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	200d      	movs	r0, #13
 8001c1e:	f7ff ff7b 	bl	8001b18 <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D5, dataBus & 0b00100000 );
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	f003 0320 	and.w	r3, r3, #32
 8001c28:	4619      	mov	r1, r3
 8001c2a:	200c      	movs	r0, #12
 8001c2c:	f7ff ff74 	bl	8001b18 <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D4, dataBus & 0b00010000 );
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	f003 0310 	and.w	r3, r3, #16
 8001c36:	4619      	mov	r1, r3
 8001c38:	200b      	movs	r0, #11
 8001c3a:	f7ff ff6d 	bl	8001b18 <displayPinWrite>
    switch( display.connection ) {
 8001c3e:	4b32      	ldr	r3, [pc, #200]	@ (8001d08 <displayDataBusWrite+0x114>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d01e      	beq.n	8001c84 <displayDataBusWrite+0x90>
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d14b      	bne.n	8001ce2 <displayDataBusWrite+0xee>
        case DISPLAY_CONNECTION_GPIO_8BITS:
            displayPinWrite( DISPLAY_PIN_D3, dataBus & 0b00001000 );
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	f003 0308 	and.w	r3, r3, #8
 8001c50:	4619      	mov	r1, r3
 8001c52:	200a      	movs	r0, #10
 8001c54:	f7ff ff60 	bl	8001b18 <displayPinWrite>
            displayPinWrite( DISPLAY_PIN_D2, dataBus & 0b00000100 );
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	4619      	mov	r1, r3
 8001c60:	2009      	movs	r0, #9
 8001c62:	f7ff ff59 	bl	8001b18 <displayPinWrite>
            displayPinWrite( DISPLAY_PIN_D1, dataBus & 0b00000010 );
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	2008      	movs	r0, #8
 8001c70:	f7ff ff52 	bl	8001b18 <displayPinWrite>
            displayPinWrite( DISPLAY_PIN_D0, dataBus & 0b00000001 );
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	2007      	movs	r0, #7
 8001c7e:	f7ff ff4b 	bl	8001b18 <displayPinWrite>
        break;
 8001c82:	e02e      	b.n	8001ce2 <displayDataBusWrite+0xee>

        case DISPLAY_CONNECTION_GPIO_4BITS:
            if ( initial8BitCommunicationIsCompleted == true) {
 8001c84:	4b21      	ldr	r3, [pc, #132]	@ (8001d0c <displayDataBusWrite+0x118>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d029      	beq.n	8001ce0 <displayDataBusWrite+0xec>
                displayPinWrite( DISPLAY_PIN_EN, ON );
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	2006      	movs	r0, #6
 8001c90:	f7ff ff42 	bl	8001b18 <displayPinWrite>
                //HAL_Delay(1);
                display_delay_us(DISPLAY_DEL_01US);
 8001c94:	2001      	movs	r0, #1
 8001c96:	f000 f83b 	bl	8001d10 <display_delay_us>

                displayPinWrite( DISPLAY_PIN_EN, OFF );
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	2006      	movs	r0, #6
 8001c9e:	f7ff ff3b 	bl	8001b18 <displayPinWrite>
                //HAL_Delay(1);
                display_delay_us(DISPLAY_DEL_37US);
 8001ca2:	2025      	movs	r0, #37	@ 0x25
 8001ca4:	f000 f834 	bl	8001d10 <display_delay_us>

                displayPinWrite( DISPLAY_PIN_D7, dataBus & 0b00001000 );
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	4619      	mov	r1, r3
 8001cb0:	200e      	movs	r0, #14
 8001cb2:	f7ff ff31 	bl	8001b18 <displayPinWrite>
                displayPinWrite( DISPLAY_PIN_D6, dataBus & 0b00000100 );
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	200d      	movs	r0, #13
 8001cc0:	f7ff ff2a 	bl	8001b18 <displayPinWrite>
                displayPinWrite( DISPLAY_PIN_D5, dataBus & 0b00000010 );
 8001cc4:	79fb      	ldrb	r3, [r7, #7]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	4619      	mov	r1, r3
 8001ccc:	200c      	movs	r0, #12
 8001cce:	f7ff ff23 	bl	8001b18 <displayPinWrite>
                displayPinWrite( DISPLAY_PIN_D4, dataBus & 0b00000001 );
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	4619      	mov	r1, r3
 8001cda:	200b      	movs	r0, #11
 8001cdc:	f7ff ff1c 	bl	8001b18 <displayPinWrite>
            }
        break;
 8001ce0:	bf00      	nop

    }
    displayPinWrite( DISPLAY_PIN_EN, ON );
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	2006      	movs	r0, #6
 8001ce6:	f7ff ff17 	bl	8001b18 <displayPinWrite>
    //HAL_Delay(1);
    display_delay_us(DISPLAY_DEL_01US);
 8001cea:	2001      	movs	r0, #1
 8001cec:	f000 f810 	bl	8001d10 <display_delay_us>

    displayPinWrite( DISPLAY_PIN_EN, OFF );
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	2006      	movs	r0, #6
 8001cf4:	f7ff ff10 	bl	8001b18 <displayPinWrite>
    //HAL_Delay(1);
    display_delay_us(DISPLAY_DEL_37US);
 8001cf8:	2025      	movs	r0, #37	@ 0x25
 8001cfa:	f000 f809 	bl	8001d10 <display_delay_us>
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	2000010c 	.word	0x2000010c
 8001d0c:	2000010d 	.word	0x2000010d

08001d10 <display_delay_us>:

void display_delay_us(uint32_t delay_us)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
	uint32_t now = cycle_counter_time_us();
 8001d18:	4b12      	ldr	r3, [pc, #72]	@ (8001d64 <display_delay_us+0x54>)
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	4b12      	ldr	r3, [pc, #72]	@ (8001d68 <display_delay_us+0x58>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4912      	ldr	r1, [pc, #72]	@ (8001d6c <display_delay_us+0x5c>)
 8001d22:	fba1 1303 	umull	r1, r3, r1, r3
 8001d26:	0c9b      	lsrs	r3, r3, #18
 8001d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2c:	60fb      	str	r3, [r7, #12]
	uint32_t then = delay_us + now;
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4413      	add	r3, r2
 8001d34:	60bb      	str	r3, [r7, #8]

	while (now < then)
 8001d36:	e00a      	b.n	8001d4e <display_delay_us+0x3e>
		now = cycle_counter_time_us();
 8001d38:	4b0a      	ldr	r3, [pc, #40]	@ (8001d64 <display_delay_us+0x54>)
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d68 <display_delay_us+0x58>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	490a      	ldr	r1, [pc, #40]	@ (8001d6c <display_delay_us+0x5c>)
 8001d42:	fba1 1303 	umull	r1, r3, r1, r3
 8001d46:	0c9b      	lsrs	r3, r3, #18
 8001d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4c:	60fb      	str	r3, [r7, #12]
	while (now < then)
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d3f0      	bcc.n	8001d38 <display_delay_us+0x28>
}
 8001d56:	bf00      	nop
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e0001000 	.word	0xe0001000
 8001d68:	20000000 	.word	0x20000000
 8001d6c:	431bde83 	.word	0x431bde83

08001d70 <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
	printf(msg);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 ffcd 	bl	8002d18 <iprintf>
	fflush(stdout);
 8001d7e:	4b05      	ldr	r3, [pc, #20]	@ (8001d94 <logger_log_print_+0x24>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f000 fef1 	bl	8002b6c <fflush>
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	2000003c 	.word	0x2000003c

08001d98 <task_menu_init>:

uint32_t g_task_menu_cnt;
volatile uint32_t g_task_menu_tick_cnt;

void task_menu_init(void *parameters)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
	LOGGER_LOG("Task Menu (Interactive Menu) iniciado\r\n");
 8001da0:	b672      	cpsid	i
 8001da2:	4b1f      	ldr	r3, [pc, #124]	@ (8001e20 <task_menu_init+0x88>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a1f      	ldr	r2, [pc, #124]	@ (8001e24 <task_menu_init+0x8c>)
 8001da8:	213f      	movs	r1, #63	@ 0x3f
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 ffc6 	bl	8002d3c <sniprintf>
 8001db0:	4603      	mov	r3, r0
 8001db2:	4a1d      	ldr	r2, [pc, #116]	@ (8001e28 <task_menu_init+0x90>)
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e20 <task_menu_init+0x88>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff ffd8 	bl	8001d70 <logger_log_print_>
 8001dc0:	b662      	cpsie	i
	g_task_menu_cnt = G_TASK_MEN_CNT_INI;
 8001dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e2c <task_menu_init+0x94>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
	g_task_menu_tick_cnt = G_TASK_MEN_TICK_CNT_INI;
 8001dc8:	4b19      	ldr	r3, [pc, #100]	@ (8001e30 <task_menu_init+0x98>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
	init_queue_event_task_menu();
 8001dce:	f000 f97f 	bl	80020d0 <init_queue_event_task_menu>
	displayInit(DISPLAY_CONNECTION_GPIO_4BITS);
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	f7ff fdb4 	bl	8001940 <displayInit>
	displayCharPositionWrite(0, 0);
 8001dd8:	2100      	movs	r1, #0
 8001dda:	2000      	movs	r0, #0
 8001ddc:	f7ff fe18 	bl	8001a10 <displayCharPositionWrite>
	displayStringWrite("TdSE Bienvenidos");
 8001de0:	4814      	ldr	r0, [pc, #80]	@ (8001e34 <task_menu_init+0x9c>)
 8001de2:	f7ff fe5f 	bl	8001aa4 <displayStringWrite>
	displayCharPositionWrite(0, 1);
 8001de6:	2101      	movs	r1, #1
 8001de8:	2000      	movs	r0, #0
 8001dea:	f7ff fe11 	bl	8001a10 <displayCharPositionWrite>
	displayStringWrite("Test Nro: ");
 8001dee:	4812      	ldr	r0, [pc, #72]	@ (8001e38 <task_menu_init+0xa0>)
 8001df0:	f7ff fe58 	bl	8001aa4 <displayStringWrite>
	cycle_counter_init();
 8001df4:	4b11      	ldr	r3, [pc, #68]	@ (8001e3c <task_menu_init+0xa4>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	4a10      	ldr	r2, [pc, #64]	@ (8001e3c <task_menu_init+0xa4>)
 8001dfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dfe:	60d3      	str	r3, [r2, #12]
 8001e00:	4b0f      	ldr	r3, [pc, #60]	@ (8001e40 <task_menu_init+0xa8>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	4b0e      	ldr	r3, [pc, #56]	@ (8001e40 <task_menu_init+0xa8>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a0d      	ldr	r2, [pc, #52]	@ (8001e40 <task_menu_init+0xa8>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6013      	str	r3, [r2, #0]
	cycle_counter_reset();
 8001e12:	4b0b      	ldr	r3, [pc, #44]	@ (8001e40 <task_menu_init+0xa8>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	605a      	str	r2, [r3, #4]
}
 8001e18:	bf00      	nop
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	08003ea0 	.word	0x08003ea0
 8001e24:	08003d3c 	.word	0x08003d3c
 8001e28:	20000150 	.word	0x20000150
 8001e2c:	20000158 	.word	0x20000158
 8001e30:	2000015c 	.word	0x2000015c
 8001e34:	08003d64 	.word	0x08003d64
 8001e38:	08003d78 	.word	0x08003d78
 8001e3c:	e000edf0 	.word	0xe000edf0
 8001e40:	e0001000 	.word	0xe0001000

08001e44 <task_menu_update>:

void task_menu_update(void *parameters)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
	char menu_str[8];
	g_task_menu_cnt++;
 8001e4c:	4b96      	ldr	r3, [pc, #600]	@ (80020a8 <task_menu_update+0x264>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	3301      	adds	r3, #1
 8001e52:	4a95      	ldr	r2, [pc, #596]	@ (80020a8 <task_menu_update+0x264>)
 8001e54:	6013      	str	r3, [r2, #0]

	__asm("CPSID i");
 8001e56:	b672      	cpsid	i
	if (G_TASK_MEN_TICK_CNT_INI < g_task_menu_tick_cnt)
 8001e58:	4b94      	ldr	r3, [pc, #592]	@ (80020ac <task_menu_update+0x268>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d004      	beq.n	8001e6a <task_menu_update+0x26>
		g_task_menu_tick_cnt--;
 8001e60:	4b92      	ldr	r3, [pc, #584]	@ (80020ac <task_menu_update+0x268>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	3b01      	subs	r3, #1
 8001e66:	4a91      	ldr	r2, [pc, #580]	@ (80020ac <task_menu_update+0x268>)
 8001e68:	6013      	str	r3, [r2, #0]
	__asm("CPSIE i");
 8001e6a:	b662      	cpsie	i

	if (G_TASK_MEN_TICK_CNT_INI < g_task_menu_tick_cnt)
 8001e6c:	4b8f      	ldr	r3, [pc, #572]	@ (80020ac <task_menu_update+0x268>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f040 8111 	bne.w	8002098 <task_menu_update+0x254>
		return;

	g_task_menu_tick_cnt = CUSTOM_DELAY_TICKS;
 8001e76:	4b8d      	ldr	r3, [pc, #564]	@ (80020ac <task_menu_update+0x268>)
 8001e78:	2225      	movs	r2, #37	@ 0x25
 8001e7a:	601a      	str	r2, [r3, #0]
	task_menu_dta_t *p = &task_menu_dta;
 8001e7c:	4b8c      	ldr	r3, [pc, #560]	@ (80020b0 <task_menu_update+0x26c>)
 8001e7e:	617b      	str	r3, [r7, #20]

	if (p->tick > 0)
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d005      	beq.n	8001e94 <task_menu_update+0x50>
		p->tick--;
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	1e5a      	subs	r2, r3, #1
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	e106      	b.n	80020a2 <task_menu_update+0x25e>
	else {
		snprintf(menu_str, sizeof(menu_str), "%lu", g_task_menu_cnt / 1000ul);
 8001e94:	4b84      	ldr	r3, [pc, #528]	@ (80020a8 <task_menu_update+0x264>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a86      	ldr	r2, [pc, #536]	@ (80020b4 <task_menu_update+0x270>)
 8001e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9e:	099b      	lsrs	r3, r3, #6
 8001ea0:	f107 000c 	add.w	r0, r7, #12
 8001ea4:	4a84      	ldr	r2, [pc, #528]	@ (80020b8 <task_menu_update+0x274>)
 8001ea6:	2108      	movs	r1, #8
 8001ea8:	f000 ff48 	bl	8002d3c <sniprintf>
		displayCharPositionWrite(10, 1);
 8001eac:	2101      	movs	r1, #1
 8001eae:	200a      	movs	r0, #10
 8001eb0:	f7ff fdae 	bl	8001a10 <displayCharPositionWrite>
		displayStringWrite(menu_str);
 8001eb4:	f107 030c 	add.w	r3, r7, #12
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff fdf3 	bl	8001aa4 <displayStringWrite>
		p->tick = CUSTOM_DELAY_TICKS;
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	2225      	movs	r2, #37	@ 0x25
 8001ec2:	601a      	str	r2, [r3, #0]

		if (any_event_task_menu()) {
 8001ec4:	f000 f970 	bl	80021a8 <any_event_task_menu>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d008      	beq.n	8001ee0 <task_menu_update+0x9c>
			p->flag = true;
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	719a      	strb	r2, [r3, #6]
			p->event = get_event_task_menu();
 8001ed4:	f000 f942 	bl	800215c <get_event_task_menu>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	461a      	mov	r2, r3
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	715a      	strb	r2, [r3, #5]
		}

		if (!p->flag) return;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	799b      	ldrb	r3, [r3, #6]
 8001ee4:	f083 0301 	eor.w	r3, r3, #1
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f040 80d6 	bne.w	800209c <task_menu_update+0x258>

		switch (p->state)
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	791b      	ldrb	r3, [r3, #4]
 8001ef4:	2b05      	cmp	r3, #5
 8001ef6:	f200 80d4 	bhi.w	80020a2 <task_menu_update+0x25e>
 8001efa:	a201      	add	r2, pc, #4	@ (adr r2, 8001f00 <task_menu_update+0xbc>)
 8001efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f00:	08001f19 	.word	0x08001f19
 8001f04:	08001f31 	.word	0x08001f31
 8001f08:	08001f77 	.word	0x08001f77
 8001f0c:	08001feb 	.word	0x08001feb
 8001f10:	08002021 	.word	0x08002021
 8001f14:	08002063 	.word	0x08002063
		{
			case ST_MEN_IDLE:
				if (p->event == EV_MEN_ENT_ACTIVE) {
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	795b      	ldrb	r3, [r3, #5]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	f040 80bf 	bne.w	80020a0 <task_menu_update+0x25c>
					p->flag = false;
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	2200      	movs	r2, #0
 8001f26:	719a      	strb	r2, [r3, #6]
					p->state = ST_MEN_MENU1;
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	711a      	strb	r2, [r3, #4]
				}
				break;
 8001f2e:	e0b7      	b.n	80020a0 <task_menu_update+0x25c>

			case ST_MEN_MENU1:
				if (p->event == EV_MEN_NEX_ACTIVE) {
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	795b      	ldrb	r3, [r3, #5]
 8001f34:	2b03      	cmp	r3, #3
 8001f36:	d10b      	bne.n	8001f50 <task_menu_update+0x10c>
					selectedMotor = (selectedMotor + 1) % 2;
 8001f38:	4b60      	ldr	r3, [pc, #384]	@ (80020bc <task_menu_update+0x278>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	bfb8      	it	lt
 8001f46:	425b      	neglt	r3, r3
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	4b5c      	ldr	r3, [pc, #368]	@ (80020bc <task_menu_update+0x278>)
 8001f4c:	701a      	strb	r2, [r3, #0]
 8001f4e:	e00e      	b.n	8001f6e <task_menu_update+0x12a>
				} else if (p->event == EV_MEN_ENT_ACTIVE) {
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	795b      	ldrb	r3, [r3, #5]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d103      	bne.n	8001f60 <task_menu_update+0x11c>
					p->state = ST_MEN_MENU2;
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	711a      	strb	r2, [r3, #4]
 8001f5e:	e006      	b.n	8001f6e <task_menu_update+0x12a>
				} else if (p->event == EV_MEN_ESC_ACTIVE) {
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	795b      	ldrb	r3, [r3, #5]
 8001f64:	2b05      	cmp	r3, #5
 8001f66:	d102      	bne.n	8001f6e <task_menu_update+0x12a>
					p->state = ST_MEN_IDLE;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	711a      	strb	r2, [r3, #4]
				}
				p->flag = false;
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	2200      	movs	r2, #0
 8001f72:	719a      	strb	r2, [r3, #6]
				break;
 8001f74:	e095      	b.n	80020a2 <task_menu_update+0x25e>

			case ST_MEN_MENU2:
				if (p->event == EV_MEN_NEX_ACTIVE) {
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	795b      	ldrb	r3, [r3, #5]
 8001f7a:	2b03      	cmp	r3, #3
 8001f7c:	d10f      	bne.n	8001f9e <task_menu_update+0x15a>
					selectedParam = (selectedParam % 3) + 1;
 8001f7e:	4b50      	ldr	r3, [pc, #320]	@ (80020c0 <task_menu_update+0x27c>)
 8001f80:	781a      	ldrb	r2, [r3, #0]
 8001f82:	4b50      	ldr	r3, [pc, #320]	@ (80020c4 <task_menu_update+0x280>)
 8001f84:	fba3 1302 	umull	r1, r3, r3, r2
 8001f88:	0859      	lsrs	r1, r3, #1
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	440b      	add	r3, r1
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	3301      	adds	r3, #1
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	4b49      	ldr	r3, [pc, #292]	@ (80020c0 <task_menu_update+0x27c>)
 8001f9a:	701a      	strb	r2, [r3, #0]
 8001f9c:	e021      	b.n	8001fe2 <task_menu_update+0x19e>
				} else if (p->event == EV_MEN_ENT_ACTIVE) {
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	795b      	ldrb	r3, [r3, #5]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d116      	bne.n	8001fd4 <task_menu_update+0x190>
					switch (selectedParam) {
 8001fa6:	4b46      	ldr	r3, [pc, #280]	@ (80020c0 <task_menu_update+0x27c>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b03      	cmp	r3, #3
 8001fac:	d00e      	beq.n	8001fcc <task_menu_update+0x188>
 8001fae:	2b03      	cmp	r3, #3
 8001fb0:	dc17      	bgt.n	8001fe2 <task_menu_update+0x19e>
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d002      	beq.n	8001fbc <task_menu_update+0x178>
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d004      	beq.n	8001fc4 <task_menu_update+0x180>
 8001fba:	e012      	b.n	8001fe2 <task_menu_update+0x19e>
						case 1: p->state = ST_MEN_MENU3_POWER; break;
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	711a      	strb	r2, [r3, #4]
 8001fc2:	e00e      	b.n	8001fe2 <task_menu_update+0x19e>
						case 2: p->state = ST_MEN_MENU3_SPEED; break;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	2204      	movs	r2, #4
 8001fc8:	711a      	strb	r2, [r3, #4]
 8001fca:	e00a      	b.n	8001fe2 <task_menu_update+0x19e>
						case 3: p->state = ST_MEN_MENU3_SPIN;  break;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	2205      	movs	r2, #5
 8001fd0:	711a      	strb	r2, [r3, #4]
 8001fd2:	e006      	b.n	8001fe2 <task_menu_update+0x19e>
					}
				} else if (p->event == EV_MEN_ESC_ACTIVE) {
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	795b      	ldrb	r3, [r3, #5]
 8001fd8:	2b05      	cmp	r3, #5
 8001fda:	d102      	bne.n	8001fe2 <task_menu_update+0x19e>
					p->state = ST_MEN_MENU1;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	711a      	strb	r2, [r3, #4]
				}
				p->flag = false;
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	719a      	strb	r2, [r3, #6]
				break;
 8001fe8:	e05b      	b.n	80020a2 <task_menu_update+0x25e>

			case ST_MEN_MENU3_POWER:
				if (p->event == EV_MEN_NEX_ACTIVE) {
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	795b      	ldrb	r3, [r3, #5]
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	d10b      	bne.n	800200a <task_menu_update+0x1c6>
					valueTemp = (valueTemp + 1) % 2;
 8001ff2:	4b35      	ldr	r3, [pc, #212]	@ (80020c8 <task_menu_update+0x284>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	bfb8      	it	lt
 8002000:	425b      	neglt	r3, r3
 8002002:	b2da      	uxtb	r2, r3
 8002004:	4b30      	ldr	r3, [pc, #192]	@ (80020c8 <task_menu_update+0x284>)
 8002006:	701a      	strb	r2, [r3, #0]
 8002008:	e006      	b.n	8002018 <task_menu_update+0x1d4>
				} else if (p->event == EV_MEN_ESC_ACTIVE) {
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	795b      	ldrb	r3, [r3, #5]
 800200e:	2b05      	cmp	r3, #5
 8002010:	d102      	bne.n	8002018 <task_menu_update+0x1d4>
					// guardar valor si aplica
					p->state = ST_MEN_MENU2;
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	2202      	movs	r2, #2
 8002016:	711a      	strb	r2, [r3, #4]
				}
				p->flag = false;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	2200      	movs	r2, #0
 800201c:	719a      	strb	r2, [r3, #6]
				break;
 800201e:	e040      	b.n	80020a2 <task_menu_update+0x25e>

			case ST_MEN_MENU3_SPEED:
				if (p->event == EV_MEN_NEX_ACTIVE) {
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	795b      	ldrb	r3, [r3, #5]
 8002024:	2b03      	cmp	r3, #3
 8002026:	d111      	bne.n	800204c <task_menu_update+0x208>
					valueTemp = (valueTemp + 1) % 10;
 8002028:	4b27      	ldr	r3, [pc, #156]	@ (80020c8 <task_menu_update+0x284>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	1c5a      	adds	r2, r3, #1
 800202e:	4b27      	ldr	r3, [pc, #156]	@ (80020cc <task_menu_update+0x288>)
 8002030:	fb83 1302 	smull	r1, r3, r3, r2
 8002034:	1099      	asrs	r1, r3, #2
 8002036:	17d3      	asrs	r3, r2, #31
 8002038:	1ac9      	subs	r1, r1, r3
 800203a:	460b      	mov	r3, r1
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	440b      	add	r3, r1
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	1ad1      	subs	r1, r2, r3
 8002044:	b2ca      	uxtb	r2, r1
 8002046:	4b20      	ldr	r3, [pc, #128]	@ (80020c8 <task_menu_update+0x284>)
 8002048:	701a      	strb	r2, [r3, #0]
 800204a:	e006      	b.n	800205a <task_menu_update+0x216>
				} else if (p->event == EV_MEN_ESC_ACTIVE) {
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	795b      	ldrb	r3, [r3, #5]
 8002050:	2b05      	cmp	r3, #5
 8002052:	d102      	bne.n	800205a <task_menu_update+0x216>
					p->state = ST_MEN_MENU2;
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	2202      	movs	r2, #2
 8002058:	711a      	strb	r2, [r3, #4]
				}
				p->flag = false;
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	2200      	movs	r2, #0
 800205e:	719a      	strb	r2, [r3, #6]
				break;
 8002060:	e01f      	b.n	80020a2 <task_menu_update+0x25e>

			case ST_MEN_MENU3_SPIN:
				if (p->event == EV_MEN_NEX_ACTIVE) {
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	795b      	ldrb	r3, [r3, #5]
 8002066:	2b03      	cmp	r3, #3
 8002068:	d10b      	bne.n	8002082 <task_menu_update+0x23e>
					valueTemp = (valueTemp + 1) % 2;
 800206a:	4b17      	ldr	r3, [pc, #92]	@ (80020c8 <task_menu_update+0x284>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	3301      	adds	r3, #1
 8002070:	2b00      	cmp	r3, #0
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	bfb8      	it	lt
 8002078:	425b      	neglt	r3, r3
 800207a:	b2da      	uxtb	r2, r3
 800207c:	4b12      	ldr	r3, [pc, #72]	@ (80020c8 <task_menu_update+0x284>)
 800207e:	701a      	strb	r2, [r3, #0]
 8002080:	e006      	b.n	8002090 <task_menu_update+0x24c>
				} else if (p->event == EV_MEN_ESC_ACTIVE) {
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	795b      	ldrb	r3, [r3, #5]
 8002086:	2b05      	cmp	r3, #5
 8002088:	d102      	bne.n	8002090 <task_menu_update+0x24c>
					p->state = ST_MEN_MENU2;
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	2202      	movs	r2, #2
 800208e:	711a      	strb	r2, [r3, #4]
				}
				p->flag = false;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	2200      	movs	r2, #0
 8002094:	719a      	strb	r2, [r3, #6]
				break;
 8002096:	e004      	b.n	80020a2 <task_menu_update+0x25e>
		return;
 8002098:	bf00      	nop
 800209a:	e002      	b.n	80020a2 <task_menu_update+0x25e>
		if (!p->flag) return;
 800209c:	bf00      	nop
 800209e:	e000      	b.n	80020a2 <task_menu_update+0x25e>
				break;
 80020a0:	bf00      	nop
		}
	}
}
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	20000158 	.word	0x20000158
 80020ac:	2000015c 	.word	0x2000015c
 80020b0:	20000018 	.word	0x20000018
 80020b4:	10624dd3 	.word	0x10624dd3
 80020b8:	08003d84 	.word	0x08003d84
 80020bc:	20000154 	.word	0x20000154
 80020c0:	20000014 	.word	0x20000014
 80020c4:	aaaaaaab 	.word	0xaaaaaaab
 80020c8:	20000155 	.word	0x20000155
 80020cc:	66666667 	.word	0x66666667

080020d0 <init_queue_event_task_menu>:

/********************** external data declaration ****************************/

/********************** external functions definition ************************/
void init_queue_event_task_menu(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
	uint32_t i;

	queue_task_a.head = 0;
 80020d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002114 <init_queue_event_task_menu+0x44>)
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
	queue_task_a.tail = 0;
 80020dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002114 <init_queue_event_task_menu+0x44>)
 80020de:	2200      	movs	r2, #0
 80020e0:	605a      	str	r2, [r3, #4]
	queue_task_a.count = 0;
 80020e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002114 <init_queue_event_task_menu+0x44>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	609a      	str	r2, [r3, #8]

	for (i = 0; i < MAX_EVENTS; i++)
 80020e8:	2300      	movs	r3, #0
 80020ea:	607b      	str	r3, [r7, #4]
 80020ec:	e008      	b.n	8002100 <init_queue_event_task_menu+0x30>
		queue_task_a.queue[i] = EVENT_UNDEFINED;
 80020ee:	4a09      	ldr	r2, [pc, #36]	@ (8002114 <init_queue_event_task_menu+0x44>)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4413      	add	r3, r2
 80020f4:	330c      	adds	r3, #12
 80020f6:	22ff      	movs	r2, #255	@ 0xff
 80020f8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MAX_EVENTS; i++)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3301      	adds	r3, #1
 80020fe:	607b      	str	r3, [r7, #4]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b0f      	cmp	r3, #15
 8002104:	d9f3      	bls.n	80020ee <init_queue_event_task_menu+0x1e>
}
 8002106:	bf00      	nop
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	20000160 	.word	0x20000160

08002118 <put_event_task_menu>:

void put_event_task_menu(task_menu_ev_t event)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	71fb      	strb	r3, [r7, #7]
	queue_task_a.count++;
 8002122:	4b0d      	ldr	r3, [pc, #52]	@ (8002158 <put_event_task_menu+0x40>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	3301      	adds	r3, #1
 8002128:	4a0b      	ldr	r2, [pc, #44]	@ (8002158 <put_event_task_menu+0x40>)
 800212a:	6093      	str	r3, [r2, #8]
	queue_task_a.queue[queue_task_a.head++] = event;
 800212c:	4b0a      	ldr	r3, [pc, #40]	@ (8002158 <put_event_task_menu+0x40>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	1c5a      	adds	r2, r3, #1
 8002132:	4909      	ldr	r1, [pc, #36]	@ (8002158 <put_event_task_menu+0x40>)
 8002134:	600a      	str	r2, [r1, #0]
 8002136:	4a08      	ldr	r2, [pc, #32]	@ (8002158 <put_event_task_menu+0x40>)
 8002138:	4413      	add	r3, r2
 800213a:	79fa      	ldrb	r2, [r7, #7]
 800213c:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_a.head)
 800213e:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <put_event_task_menu+0x40>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2b10      	cmp	r3, #16
 8002144:	d102      	bne.n	800214c <put_event_task_menu+0x34>
		queue_task_a.head = 0;
 8002146:	4b04      	ldr	r3, [pc, #16]	@ (8002158 <put_event_task_menu+0x40>)
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	bc80      	pop	{r7}
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	20000160 	.word	0x20000160

0800215c <get_event_task_menu>:

task_menu_ev_t get_event_task_menu(void)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
	task_menu_ev_t event;

	queue_task_a.count--;
 8002162:	4b10      	ldr	r3, [pc, #64]	@ (80021a4 <get_event_task_menu+0x48>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	3b01      	subs	r3, #1
 8002168:	4a0e      	ldr	r2, [pc, #56]	@ (80021a4 <get_event_task_menu+0x48>)
 800216a:	6093      	str	r3, [r2, #8]
	event = queue_task_a.queue[queue_task_a.tail];
 800216c:	4b0d      	ldr	r3, [pc, #52]	@ (80021a4 <get_event_task_menu+0x48>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	4a0c      	ldr	r2, [pc, #48]	@ (80021a4 <get_event_task_menu+0x48>)
 8002172:	4413      	add	r3, r2
 8002174:	7b1b      	ldrb	r3, [r3, #12]
 8002176:	71fb      	strb	r3, [r7, #7]
	queue_task_a.queue[queue_task_a.tail++] = EVENT_UNDEFINED;
 8002178:	4b0a      	ldr	r3, [pc, #40]	@ (80021a4 <get_event_task_menu+0x48>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	4909      	ldr	r1, [pc, #36]	@ (80021a4 <get_event_task_menu+0x48>)
 8002180:	604a      	str	r2, [r1, #4]
 8002182:	4a08      	ldr	r2, [pc, #32]	@ (80021a4 <get_event_task_menu+0x48>)
 8002184:	4413      	add	r3, r2
 8002186:	22ff      	movs	r2, #255	@ 0xff
 8002188:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_a.tail)
 800218a:	4b06      	ldr	r3, [pc, #24]	@ (80021a4 <get_event_task_menu+0x48>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b10      	cmp	r3, #16
 8002190:	d102      	bne.n	8002198 <get_event_task_menu+0x3c>
		queue_task_a.tail = 0;
 8002192:	4b04      	ldr	r3, [pc, #16]	@ (80021a4 <get_event_task_menu+0x48>)
 8002194:	2200      	movs	r2, #0
 8002196:	605a      	str	r2, [r3, #4]

	return event;
 8002198:	79fb      	ldrb	r3, [r7, #7]
}
 800219a:	4618      	mov	r0, r3
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr
 80021a4:	20000160 	.word	0x20000160

080021a8 <any_event_task_menu>:

bool any_event_task_menu(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  return (queue_task_a.head != queue_task_a.tail);
 80021ac:	4b06      	ldr	r3, [pc, #24]	@ (80021c8 <any_event_task_menu+0x20>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	4b05      	ldr	r3, [pc, #20]	@ (80021c8 <any_event_task_menu+0x20>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	bf14      	ite	ne
 80021b8:	2301      	movne	r3, #1
 80021ba:	2300      	moveq	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
}
 80021be:	4618      	mov	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	20000160 	.word	0x20000160

080021cc <task_sensor_init>:
uint32_t g_task_sensor_cnt;
volatile uint32_t g_task_sensor_tick_cnt;

/********************** external functions definition ************************/
void task_sensor_init(void *parameters)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b088      	sub	sp, #32
 80021d0:	af02      	add	r7, sp, #8
 80021d2:	6078      	str	r0, [r7, #4]
	task_sensor_dta_t *p_task_sensor_dta;
	task_sensor_st_t state;
	task_sensor_ev_t event;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_sensor_init), p_task_sensor);
 80021d4:	b672      	cpsid	i
 80021d6:	4b49      	ldr	r3, [pc, #292]	@ (80022fc <task_sensor_init+0x130>)
 80021d8:	6818      	ldr	r0, [r3, #0]
 80021da:	4b49      	ldr	r3, [pc, #292]	@ (8002300 <task_sensor_init+0x134>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	4b48      	ldr	r3, [pc, #288]	@ (8002304 <task_sensor_init+0x138>)
 80021e2:	4a49      	ldr	r2, [pc, #292]	@ (8002308 <task_sensor_init+0x13c>)
 80021e4:	213f      	movs	r1, #63	@ 0x3f
 80021e6:	f000 fda9 	bl	8002d3c <sniprintf>
 80021ea:	4603      	mov	r3, r0
 80021ec:	4a47      	ldr	r2, [pc, #284]	@ (800230c <task_sensor_init+0x140>)
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	4b42      	ldr	r3, [pc, #264]	@ (80022fc <task_sensor_init+0x130>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff fdbb 	bl	8001d70 <logger_log_print_>
 80021fa:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_sensor), p_task_sensor_);
 80021fc:	b672      	cpsid	i
 80021fe:	4b3f      	ldr	r3, [pc, #252]	@ (80022fc <task_sensor_init+0x130>)
 8002200:	6818      	ldr	r0, [r3, #0]
 8002202:	4b43      	ldr	r3, [pc, #268]	@ (8002310 <task_sensor_init+0x144>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	4b42      	ldr	r3, [pc, #264]	@ (8002314 <task_sensor_init+0x148>)
 800220a:	4a43      	ldr	r2, [pc, #268]	@ (8002318 <task_sensor_init+0x14c>)
 800220c:	213f      	movs	r1, #63	@ 0x3f
 800220e:	f000 fd95 	bl	8002d3c <sniprintf>
 8002212:	4603      	mov	r3, r0
 8002214:	4a3d      	ldr	r2, [pc, #244]	@ (800230c <task_sensor_init+0x140>)
 8002216:	6013      	str	r3, [r2, #0]
 8002218:	4b38      	ldr	r3, [pc, #224]	@ (80022fc <task_sensor_init+0x130>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff fda7 	bl	8001d70 <logger_log_print_>
 8002222:	b662      	cpsie	i

	g_task_sensor_cnt = G_TASK_SEN_CNT_INIT;
 8002224:	4b3d      	ldr	r3, [pc, #244]	@ (800231c <task_sensor_init+0x150>)
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_sensor_cnt), g_task_sensor_cnt);
 800222a:	b672      	cpsid	i
 800222c:	4b33      	ldr	r3, [pc, #204]	@ (80022fc <task_sensor_init+0x130>)
 800222e:	6818      	ldr	r0, [r3, #0]
 8002230:	4b3a      	ldr	r3, [pc, #232]	@ (800231c <task_sensor_init+0x150>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	4b3a      	ldr	r3, [pc, #232]	@ (8002320 <task_sensor_init+0x154>)
 8002238:	4a3a      	ldr	r2, [pc, #232]	@ (8002324 <task_sensor_init+0x158>)
 800223a:	213f      	movs	r1, #63	@ 0x3f
 800223c:	f000 fd7e 	bl	8002d3c <sniprintf>
 8002240:	4603      	mov	r3, r0
 8002242:	4a32      	ldr	r2, [pc, #200]	@ (800230c <task_sensor_init+0x140>)
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	4b2d      	ldr	r3, [pc, #180]	@ (80022fc <task_sensor_init+0x130>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff fd90 	bl	8001d70 <logger_log_print_>
 8002250:	b662      	cpsie	i

	for (index = 0; SENSOR_DTA_QTY > index; index++)
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
 8002256:	e046      	b.n	80022e6 <task_sensor_init+0x11a>
	{
		/* Update Task Sensor Data Pointer */
		p_task_sensor_dta = &task_sensor_dta_list[index];
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	4a32      	ldr	r2, [pc, #200]	@ (8002328 <task_sensor_init+0x15c>)
 800225e:	4413      	add	r3, r2
 8002260:	613b      	str	r3, [r7, #16]

		/* Print out: Index & Task execution FSM */
		LOGGER_LOG("   %s = %lu", GET_NAME(index), index);
 8002262:	b672      	cpsid	i
 8002264:	4b25      	ldr	r3, [pc, #148]	@ (80022fc <task_sensor_init+0x130>)
 8002266:	6818      	ldr	r0, [r3, #0]
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	4b2f      	ldr	r3, [pc, #188]	@ (800232c <task_sensor_init+0x160>)
 800226e:	4a30      	ldr	r2, [pc, #192]	@ (8002330 <task_sensor_init+0x164>)
 8002270:	213f      	movs	r1, #63	@ 0x3f
 8002272:	f000 fd63 	bl	8002d3c <sniprintf>
 8002276:	4603      	mov	r3, r0
 8002278:	4a24      	ldr	r2, [pc, #144]	@ (800230c <task_sensor_init+0x140>)
 800227a:	6013      	str	r3, [r2, #0]
 800227c:	4b1f      	ldr	r3, [pc, #124]	@ (80022fc <task_sensor_init+0x130>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff fd75 	bl	8001d70 <logger_log_print_>
 8002286:	b662      	cpsie	i

		state = p_task_sensor_dta->state;
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	791b      	ldrb	r3, [r3, #4]
 800228c:	73fb      	strb	r3, [r7, #15]
		LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 800228e:	b672      	cpsid	i
 8002290:	4b1a      	ldr	r3, [pc, #104]	@ (80022fc <task_sensor_init+0x130>)
 8002292:	6818      	ldr	r0, [r3, #0]
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	4b26      	ldr	r3, [pc, #152]	@ (8002334 <task_sensor_init+0x168>)
 800229a:	4a25      	ldr	r2, [pc, #148]	@ (8002330 <task_sensor_init+0x164>)
 800229c:	213f      	movs	r1, #63	@ 0x3f
 800229e:	f000 fd4d 	bl	8002d3c <sniprintf>
 80022a2:	4603      	mov	r3, r0
 80022a4:	4a19      	ldr	r2, [pc, #100]	@ (800230c <task_sensor_init+0x140>)
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	4b14      	ldr	r3, [pc, #80]	@ (80022fc <task_sensor_init+0x130>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff fd5f 	bl	8001d70 <logger_log_print_>
 80022b2:	b662      	cpsie	i

		event = p_task_sensor_dta->event;
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	795b      	ldrb	r3, [r3, #5]
 80022b8:	73bb      	strb	r3, [r7, #14]
		LOGGER_LOG("   %s = %lu\r\n", GET_NAME(event), (uint32_t)event);
 80022ba:	b672      	cpsid	i
 80022bc:	4b0f      	ldr	r3, [pc, #60]	@ (80022fc <task_sensor_init+0x130>)
 80022be:	6818      	ldr	r0, [r3, #0]
 80022c0:	7bbb      	ldrb	r3, [r7, #14]
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	4b1c      	ldr	r3, [pc, #112]	@ (8002338 <task_sensor_init+0x16c>)
 80022c6:	4a17      	ldr	r2, [pc, #92]	@ (8002324 <task_sensor_init+0x158>)
 80022c8:	213f      	movs	r1, #63	@ 0x3f
 80022ca:	f000 fd37 	bl	8002d3c <sniprintf>
 80022ce:	4603      	mov	r3, r0
 80022d0:	4a0e      	ldr	r2, [pc, #56]	@ (800230c <task_sensor_init+0x140>)
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	4b09      	ldr	r3, [pc, #36]	@ (80022fc <task_sensor_init+0x130>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff fd49 	bl	8001d70 <logger_log_print_>
 80022de:	b662      	cpsie	i
	for (index = 0; SENSOR_DTA_QTY > index; index++)
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	3301      	adds	r3, #1
 80022e4:	617b      	str	r3, [r7, #20]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d9b5      	bls.n	8002258 <task_sensor_init+0x8c>
	}
	g_task_sensor_tick_cnt = G_TASK_SEN_TICK_CNT_INI;
 80022ec:	4b13      	ldr	r3, [pc, #76]	@ (800233c <task_sensor_init+0x170>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
}
 80022f2:	bf00      	nop
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	08003ea0 	.word	0x08003ea0
 8002300:	20000020 	.word	0x20000020
 8002304:	08003dcc 	.word	0x08003dcc
 8002308:	08003de0 	.word	0x08003de0
 800230c:	20000150 	.word	0x20000150
 8002310:	20000024 	.word	0x20000024
 8002314:	08003df8 	.word	0x08003df8
 8002318:	08003e04 	.word	0x08003e04
 800231c:	20000194 	.word	0x20000194
 8002320:	08003e14 	.word	0x08003e14
 8002324:	08003e28 	.word	0x08003e28
 8002328:	2000017c 	.word	0x2000017c
 800232c:	08003e38 	.word	0x08003e38
 8002330:	08003e40 	.word	0x08003e40
 8002334:	08003e4c 	.word	0x08003e4c
 8002338:	08003e54 	.word	0x08003e54
 800233c:	20000198 	.word	0x20000198

08002340 <task_sensor_update>:

void task_sensor_update(void *parameters)
{
 8002340:	b590      	push	{r4, r7, lr}
 8002342:	b087      	sub	sp, #28
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
	uint32_t index;
	const task_sensor_cfg_t *p_task_sensor_cfg;
	task_sensor_dta_t *p_task_sensor_dta;
	bool b_time_update_required = false;
 8002348:	2300      	movs	r3, #0
 800234a:	74fb      	strb	r3, [r7, #19]

	/* Update Task Sensor Counter */
	g_task_sensor_cnt++;
 800234c:	4b61      	ldr	r3, [pc, #388]	@ (80024d4 <task_sensor_update+0x194>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	3301      	adds	r3, #1
 8002352:	4a60      	ldr	r2, [pc, #384]	@ (80024d4 <task_sensor_update+0x194>)
 8002354:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_sensor_tick_cnt) */
	__asm("CPSID i");	/* disable interrupts*/
 8002356:	b672      	cpsid	i
    if (G_TASK_SEN_TICK_CNT_INI < g_task_sensor_tick_cnt)
 8002358:	4b5f      	ldr	r3, [pc, #380]	@ (80024d8 <task_sensor_update+0x198>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d006      	beq.n	800236e <task_sensor_update+0x2e>
    {
    	g_task_sensor_tick_cnt--;
 8002360:	4b5d      	ldr	r3, [pc, #372]	@ (80024d8 <task_sensor_update+0x198>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	3b01      	subs	r3, #1
 8002366:	4a5c      	ldr	r2, [pc, #368]	@ (80024d8 <task_sensor_update+0x198>)
 8002368:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 800236a:	2301      	movs	r3, #1
 800236c:	74fb      	strb	r3, [r7, #19]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 800236e:	b662      	cpsie	i

    while (b_time_update_required)
 8002370:	e0a6      	b.n	80024c0 <task_sensor_update+0x180>
    {
		/* Protect shared resource (g_task_sensor_tick_cnt) */
		__asm("CPSID i");	/* disable interrupts*/
 8002372:	b672      	cpsid	i
		if (G_TASK_SEN_TICK_CNT_INI < g_task_sensor_tick_cnt)
 8002374:	4b58      	ldr	r3, [pc, #352]	@ (80024d8 <task_sensor_update+0x198>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d007      	beq.n	800238c <task_sensor_update+0x4c>
		{
			g_task_sensor_tick_cnt--;
 800237c:	4b56      	ldr	r3, [pc, #344]	@ (80024d8 <task_sensor_update+0x198>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	3b01      	subs	r3, #1
 8002382:	4a55      	ldr	r2, [pc, #340]	@ (80024d8 <task_sensor_update+0x198>)
 8002384:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 8002386:	2301      	movs	r3, #1
 8002388:	74fb      	strb	r3, [r7, #19]
 800238a:	e001      	b.n	8002390 <task_sensor_update+0x50>
		}
		else
		{
			b_time_update_required = false;
 800238c:	2300      	movs	r3, #0
 800238e:	74fb      	strb	r3, [r7, #19]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 8002390:	b662      	cpsie	i

    	for (index = 0; SENSOR_DTA_QTY > index; index++)
 8002392:	2300      	movs	r3, #0
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	e08f      	b.n	80024b8 <task_sensor_update+0x178>
		{
    		/* Update Task Sensor Configuration & Data Pointer */
			p_task_sensor_cfg = &task_sensor_cfg_list[index];
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	4613      	mov	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4a4e      	ldr	r2, [pc, #312]	@ (80024dc <task_sensor_update+0x19c>)
 80023a4:	4413      	add	r3, r2
 80023a6:	60fb      	str	r3, [r7, #12]
			p_task_sensor_dta = &task_sensor_dta_list[index];
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	4a4c      	ldr	r2, [pc, #304]	@ (80024e0 <task_sensor_update+0x1a0>)
 80023ae:	4413      	add	r3, r2
 80023b0:	60bb      	str	r3, [r7, #8]

			if (p_task_sensor_cfg->pressed == HAL_GPIO_ReadPin(p_task_sensor_cfg->gpio_port, p_task_sensor_cfg->pin))
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	7a9c      	ldrb	r4, [r3, #10]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	891b      	ldrh	r3, [r3, #8]
 80023be:	4619      	mov	r1, r3
 80023c0:	4610      	mov	r0, r2
 80023c2:	f7fe fc35 	bl	8000c30 <HAL_GPIO_ReadPin>
 80023c6:	4603      	mov	r3, r0
 80023c8:	429c      	cmp	r4, r3
 80023ca:	d103      	bne.n	80023d4 <task_sensor_update+0x94>
			{
				p_task_sensor_dta->event =	EV_BTN_XX_DOWN;
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	2201      	movs	r2, #1
 80023d0:	715a      	strb	r2, [r3, #5]
 80023d2:	e002      	b.n	80023da <task_sensor_update+0x9a>
			}
			else
			{
				p_task_sensor_dta->event =	EV_BTN_XX_UP;
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2200      	movs	r2, #0
 80023d8:	715a      	strb	r2, [r3, #5]
			}

			switch (p_task_sensor_dta->state)
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	791b      	ldrb	r3, [r3, #4]
 80023de:	2b03      	cmp	r3, #3
 80023e0:	d856      	bhi.n	8002490 <task_sensor_update+0x150>
 80023e2:	a201      	add	r2, pc, #4	@ (adr r2, 80023e8 <task_sensor_update+0xa8>)
 80023e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e8:	080023f9 	.word	0x080023f9
 80023ec:	08002411 	.word	0x08002411
 80023f0:	08002445 	.word	0x08002445
 80023f4:	0800245d 	.word	0x0800245d
			{
				case ST_BTN_XX_UP:

					if (EV_BTN_XX_DOWN == p_task_sensor_dta->event)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	795b      	ldrb	r3, [r3, #5]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d151      	bne.n	80024a4 <task_sensor_update+0x164>
					{
						p_task_sensor_dta->tick = p_task_sensor_cfg->tick_max;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	68da      	ldr	r2, [r3, #12]
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	601a      	str	r2, [r3, #0]
						p_task_sensor_dta->state = ST_BTN_XX_FALLING;
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2201      	movs	r2, #1
 800240c:	711a      	strb	r2, [r3, #4]
					}

					break;
 800240e:	e049      	b.n	80024a4 <task_sensor_update+0x164>

				case ST_BTN_XX_FALLING:

					p_task_sensor_dta->tick--;
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	1e5a      	subs	r2, r3, #1
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	601a      	str	r2, [r3, #0]
					if (DEL_BTN_XX_MIN == p_task_sensor_dta->tick)
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d142      	bne.n	80024a8 <task_sensor_update+0x168>
					{
						if (EV_BTN_XX_DOWN == p_task_sensor_dta->event)
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	795b      	ldrb	r3, [r3, #5]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d108      	bne.n	800243c <task_sensor_update+0xfc>
						{
							put_event_task_menu(p_task_sensor_cfg->signal_down);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	7c5b      	ldrb	r3, [r3, #17]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff fe72 	bl	8002118 <put_event_task_menu>
							p_task_sensor_dta->state = ST_BTN_XX_DOWN;
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2202      	movs	r2, #2
 8002438:	711a      	strb	r2, [r3, #4]
						{
							p_task_sensor_dta->state = ST_BTN_XX_UP;
						}
					}

					break;
 800243a:	e035      	b.n	80024a8 <task_sensor_update+0x168>
							p_task_sensor_dta->state = ST_BTN_XX_UP;
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2200      	movs	r2, #0
 8002440:	711a      	strb	r2, [r3, #4]
					break;
 8002442:	e031      	b.n	80024a8 <task_sensor_update+0x168>

				case ST_BTN_XX_DOWN:

					if (EV_BTN_XX_UP == p_task_sensor_dta->event)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	795b      	ldrb	r3, [r3, #5]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d12f      	bne.n	80024ac <task_sensor_update+0x16c>
					{
						p_task_sensor_dta->state = ST_BTN_XX_RISING;
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2203      	movs	r2, #3
 8002450:	711a      	strb	r2, [r3, #4]
						p_task_sensor_dta->tick = p_task_sensor_cfg->tick_max;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	601a      	str	r2, [r3, #0]
					}

					break;
 800245a:	e027      	b.n	80024ac <task_sensor_update+0x16c>

				case ST_BTN_XX_RISING:

					p_task_sensor_dta->tick--;
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	1e5a      	subs	r2, r3, #1
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	601a      	str	r2, [r3, #0]
					if (DEL_BTN_XX_MIN == p_task_sensor_dta->tick)
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d120      	bne.n	80024b0 <task_sensor_update+0x170>
					{
						if (EV_BTN_XX_UP == p_task_sensor_dta->event)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	795b      	ldrb	r3, [r3, #5]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d108      	bne.n	8002488 <task_sensor_update+0x148>
						{
							put_event_task_menu(p_task_sensor_cfg->signal_up);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	7c1b      	ldrb	r3, [r3, #16]
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff fe4c 	bl	8002118 <put_event_task_menu>
							p_task_sensor_dta->state = ST_BTN_XX_UP;
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2200      	movs	r2, #0
 8002484:	711a      	strb	r2, [r3, #4]
						{
							p_task_sensor_dta->state = ST_BTN_XX_DOWN;
						}
					}

					break;
 8002486:	e013      	b.n	80024b0 <task_sensor_update+0x170>
							p_task_sensor_dta->state = ST_BTN_XX_DOWN;
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2202      	movs	r2, #2
 800248c:	711a      	strb	r2, [r3, #4]
					break;
 800248e:	e00f      	b.n	80024b0 <task_sensor_update+0x170>

				default:

					p_task_sensor_dta->tick  = DEL_BTN_XX_MIN;
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
					p_task_sensor_dta->state = ST_BTN_XX_UP;
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	2200      	movs	r2, #0
 800249a:	711a      	strb	r2, [r3, #4]
					p_task_sensor_dta->event = EV_BTN_XX_UP;
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	2200      	movs	r2, #0
 80024a0:	715a      	strb	r2, [r3, #5]

					break;
 80024a2:	e006      	b.n	80024b2 <task_sensor_update+0x172>
					break;
 80024a4:	bf00      	nop
 80024a6:	e004      	b.n	80024b2 <task_sensor_update+0x172>
					break;
 80024a8:	bf00      	nop
 80024aa:	e002      	b.n	80024b2 <task_sensor_update+0x172>
					break;
 80024ac:	bf00      	nop
 80024ae:	e000      	b.n	80024b2 <task_sensor_update+0x172>
					break;
 80024b0:	bf00      	nop
    	for (index = 0; SENSOR_DTA_QTY > index; index++)
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	3301      	adds	r3, #1
 80024b6:	617b      	str	r3, [r7, #20]
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	f67f af6c 	bls.w	8002398 <task_sensor_update+0x58>
    while (b_time_update_required)
 80024c0:	7cfb      	ldrb	r3, [r7, #19]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f47f af55 	bne.w	8002372 <task_sensor_update+0x32>
			}
		}
    }
}
 80024c8:	bf00      	nop
 80024ca:	bf00      	nop
 80024cc:	371c      	adds	r7, #28
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd90      	pop	{r4, r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20000194 	.word	0x20000194
 80024d8:	20000198 	.word	0x20000198
 80024dc:	08003ea4 	.word	0x08003ea4
 80024e0:	2000017c 	.word	0x2000017c

080024e4 <findslot>:
 80024e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002510 <findslot+0x2c>)
 80024e6:	b510      	push	{r4, lr}
 80024e8:	4604      	mov	r4, r0
 80024ea:	6818      	ldr	r0, [r3, #0]
 80024ec:	b118      	cbz	r0, 80024f6 <findslot+0x12>
 80024ee:	6a03      	ldr	r3, [r0, #32]
 80024f0:	b90b      	cbnz	r3, 80024f6 <findslot+0x12>
 80024f2:	f000 fbdb 	bl	8002cac <__sinit>
 80024f6:	2c13      	cmp	r4, #19
 80024f8:	d807      	bhi.n	800250a <findslot+0x26>
 80024fa:	4806      	ldr	r0, [pc, #24]	@ (8002514 <findslot+0x30>)
 80024fc:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8002500:	3201      	adds	r2, #1
 8002502:	d002      	beq.n	800250a <findslot+0x26>
 8002504:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002508:	bd10      	pop	{r4, pc}
 800250a:	2000      	movs	r0, #0
 800250c:	e7fc      	b.n	8002508 <findslot+0x24>
 800250e:	bf00      	nop
 8002510:	2000003c 	.word	0x2000003c
 8002514:	200001a8 	.word	0x200001a8

08002518 <error>:
 8002518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800251a:	4604      	mov	r4, r0
 800251c:	f000 fcd6 	bl	8002ecc <__errno>
 8002520:	2613      	movs	r6, #19
 8002522:	4605      	mov	r5, r0
 8002524:	2700      	movs	r7, #0
 8002526:	4630      	mov	r0, r6
 8002528:	4639      	mov	r1, r7
 800252a:	beab      	bkpt	0x00ab
 800252c:	4606      	mov	r6, r0
 800252e:	4620      	mov	r0, r4
 8002530:	602e      	str	r6, [r5, #0]
 8002532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002534 <checkerror>:
 8002534:	1c43      	adds	r3, r0, #1
 8002536:	d101      	bne.n	800253c <checkerror+0x8>
 8002538:	f7ff bfee 	b.w	8002518 <error>
 800253c:	4770      	bx	lr

0800253e <_swiread>:
 800253e:	b530      	push	{r4, r5, lr}
 8002540:	b085      	sub	sp, #20
 8002542:	2406      	movs	r4, #6
 8002544:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002548:	9203      	str	r2, [sp, #12]
 800254a:	ad01      	add	r5, sp, #4
 800254c:	4620      	mov	r0, r4
 800254e:	4629      	mov	r1, r5
 8002550:	beab      	bkpt	0x00ab
 8002552:	4604      	mov	r4, r0
 8002554:	4620      	mov	r0, r4
 8002556:	f7ff ffed 	bl	8002534 <checkerror>
 800255a:	b005      	add	sp, #20
 800255c:	bd30      	pop	{r4, r5, pc}

0800255e <_read>:
 800255e:	b570      	push	{r4, r5, r6, lr}
 8002560:	460e      	mov	r6, r1
 8002562:	4614      	mov	r4, r2
 8002564:	f7ff ffbe 	bl	80024e4 <findslot>
 8002568:	4605      	mov	r5, r0
 800256a:	b930      	cbnz	r0, 800257a <_read+0x1c>
 800256c:	f000 fcae 	bl	8002ecc <__errno>
 8002570:	2309      	movs	r3, #9
 8002572:	6003      	str	r3, [r0, #0]
 8002574:	f04f 30ff 	mov.w	r0, #4294967295
 8002578:	bd70      	pop	{r4, r5, r6, pc}
 800257a:	4622      	mov	r2, r4
 800257c:	4631      	mov	r1, r6
 800257e:	6800      	ldr	r0, [r0, #0]
 8002580:	f7ff ffdd 	bl	800253e <_swiread>
 8002584:	1c43      	adds	r3, r0, #1
 8002586:	d0f5      	beq.n	8002574 <_read+0x16>
 8002588:	686b      	ldr	r3, [r5, #4]
 800258a:	1a20      	subs	r0, r4, r0
 800258c:	4403      	add	r3, r0
 800258e:	606b      	str	r3, [r5, #4]
 8002590:	e7f2      	b.n	8002578 <_read+0x1a>

08002592 <_swilseek>:
 8002592:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002594:	460c      	mov	r4, r1
 8002596:	4616      	mov	r6, r2
 8002598:	f7ff ffa4 	bl	80024e4 <findslot>
 800259c:	4605      	mov	r5, r0
 800259e:	b940      	cbnz	r0, 80025b2 <_swilseek+0x20>
 80025a0:	f000 fc94 	bl	8002ecc <__errno>
 80025a4:	2309      	movs	r3, #9
 80025a6:	6003      	str	r3, [r0, #0]
 80025a8:	f04f 34ff 	mov.w	r4, #4294967295
 80025ac:	4620      	mov	r0, r4
 80025ae:	b003      	add	sp, #12
 80025b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025b2:	2e02      	cmp	r6, #2
 80025b4:	d903      	bls.n	80025be <_swilseek+0x2c>
 80025b6:	f000 fc89 	bl	8002ecc <__errno>
 80025ba:	2316      	movs	r3, #22
 80025bc:	e7f3      	b.n	80025a6 <_swilseek+0x14>
 80025be:	2e01      	cmp	r6, #1
 80025c0:	d112      	bne.n	80025e8 <_swilseek+0x56>
 80025c2:	6843      	ldr	r3, [r0, #4]
 80025c4:	18e4      	adds	r4, r4, r3
 80025c6:	d4f6      	bmi.n	80025b6 <_swilseek+0x24>
 80025c8:	682b      	ldr	r3, [r5, #0]
 80025ca:	260a      	movs	r6, #10
 80025cc:	466f      	mov	r7, sp
 80025ce:	e9cd 3400 	strd	r3, r4, [sp]
 80025d2:	4630      	mov	r0, r6
 80025d4:	4639      	mov	r1, r7
 80025d6:	beab      	bkpt	0x00ab
 80025d8:	4606      	mov	r6, r0
 80025da:	4630      	mov	r0, r6
 80025dc:	f7ff ffaa 	bl	8002534 <checkerror>
 80025e0:	2800      	cmp	r0, #0
 80025e2:	dbe1      	blt.n	80025a8 <_swilseek+0x16>
 80025e4:	606c      	str	r4, [r5, #4]
 80025e6:	e7e1      	b.n	80025ac <_swilseek+0x1a>
 80025e8:	2e02      	cmp	r6, #2
 80025ea:	6803      	ldr	r3, [r0, #0]
 80025ec:	d1ec      	bne.n	80025c8 <_swilseek+0x36>
 80025ee:	260c      	movs	r6, #12
 80025f0:	466f      	mov	r7, sp
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	4630      	mov	r0, r6
 80025f6:	4639      	mov	r1, r7
 80025f8:	beab      	bkpt	0x00ab
 80025fa:	4606      	mov	r6, r0
 80025fc:	4630      	mov	r0, r6
 80025fe:	f7ff ff99 	bl	8002534 <checkerror>
 8002602:	1c43      	adds	r3, r0, #1
 8002604:	d0d0      	beq.n	80025a8 <_swilseek+0x16>
 8002606:	4404      	add	r4, r0
 8002608:	e7de      	b.n	80025c8 <_swilseek+0x36>

0800260a <_lseek>:
 800260a:	f7ff bfc2 	b.w	8002592 <_swilseek>

0800260e <_swiwrite>:
 800260e:	b530      	push	{r4, r5, lr}
 8002610:	b085      	sub	sp, #20
 8002612:	2405      	movs	r4, #5
 8002614:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002618:	9203      	str	r2, [sp, #12]
 800261a:	ad01      	add	r5, sp, #4
 800261c:	4620      	mov	r0, r4
 800261e:	4629      	mov	r1, r5
 8002620:	beab      	bkpt	0x00ab
 8002622:	4604      	mov	r4, r0
 8002624:	4620      	mov	r0, r4
 8002626:	f7ff ff85 	bl	8002534 <checkerror>
 800262a:	b005      	add	sp, #20
 800262c:	bd30      	pop	{r4, r5, pc}

0800262e <_write>:
 800262e:	b570      	push	{r4, r5, r6, lr}
 8002630:	460e      	mov	r6, r1
 8002632:	4615      	mov	r5, r2
 8002634:	f7ff ff56 	bl	80024e4 <findslot>
 8002638:	4604      	mov	r4, r0
 800263a:	b930      	cbnz	r0, 800264a <_write+0x1c>
 800263c:	f000 fc46 	bl	8002ecc <__errno>
 8002640:	2309      	movs	r3, #9
 8002642:	6003      	str	r3, [r0, #0]
 8002644:	f04f 30ff 	mov.w	r0, #4294967295
 8002648:	bd70      	pop	{r4, r5, r6, pc}
 800264a:	462a      	mov	r2, r5
 800264c:	4631      	mov	r1, r6
 800264e:	6800      	ldr	r0, [r0, #0]
 8002650:	f7ff ffdd 	bl	800260e <_swiwrite>
 8002654:	1e03      	subs	r3, r0, #0
 8002656:	dbf5      	blt.n	8002644 <_write+0x16>
 8002658:	6862      	ldr	r2, [r4, #4]
 800265a:	1ae8      	subs	r0, r5, r3
 800265c:	4402      	add	r2, r0
 800265e:	42ab      	cmp	r3, r5
 8002660:	6062      	str	r2, [r4, #4]
 8002662:	d1f1      	bne.n	8002648 <_write+0x1a>
 8002664:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002668:	2000      	movs	r0, #0
 800266a:	f7ff bf55 	b.w	8002518 <error>

0800266e <_swiclose>:
 800266e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002670:	2402      	movs	r4, #2
 8002672:	9001      	str	r0, [sp, #4]
 8002674:	ad01      	add	r5, sp, #4
 8002676:	4620      	mov	r0, r4
 8002678:	4629      	mov	r1, r5
 800267a:	beab      	bkpt	0x00ab
 800267c:	4604      	mov	r4, r0
 800267e:	4620      	mov	r0, r4
 8002680:	f7ff ff58 	bl	8002534 <checkerror>
 8002684:	b003      	add	sp, #12
 8002686:	bd30      	pop	{r4, r5, pc}

08002688 <_close>:
 8002688:	b538      	push	{r3, r4, r5, lr}
 800268a:	4605      	mov	r5, r0
 800268c:	f7ff ff2a 	bl	80024e4 <findslot>
 8002690:	4604      	mov	r4, r0
 8002692:	b930      	cbnz	r0, 80026a2 <_close+0x1a>
 8002694:	f000 fc1a 	bl	8002ecc <__errno>
 8002698:	2309      	movs	r3, #9
 800269a:	6003      	str	r3, [r0, #0]
 800269c:	f04f 30ff 	mov.w	r0, #4294967295
 80026a0:	bd38      	pop	{r3, r4, r5, pc}
 80026a2:	3d01      	subs	r5, #1
 80026a4:	2d01      	cmp	r5, #1
 80026a6:	d809      	bhi.n	80026bc <_close+0x34>
 80026a8:	4b09      	ldr	r3, [pc, #36]	@ (80026d0 <_close+0x48>)
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d104      	bne.n	80026bc <_close+0x34>
 80026b2:	f04f 33ff 	mov.w	r3, #4294967295
 80026b6:	6003      	str	r3, [r0, #0]
 80026b8:	2000      	movs	r0, #0
 80026ba:	e7f1      	b.n	80026a0 <_close+0x18>
 80026bc:	6820      	ldr	r0, [r4, #0]
 80026be:	f7ff ffd6 	bl	800266e <_swiclose>
 80026c2:	2800      	cmp	r0, #0
 80026c4:	d1ec      	bne.n	80026a0 <_close+0x18>
 80026c6:	f04f 33ff 	mov.w	r3, #4294967295
 80026ca:	6023      	str	r3, [r4, #0]
 80026cc:	e7e8      	b.n	80026a0 <_close+0x18>
 80026ce:	bf00      	nop
 80026d0:	200001a8 	.word	0x200001a8

080026d4 <_swistat>:
 80026d4:	b570      	push	{r4, r5, r6, lr}
 80026d6:	460c      	mov	r4, r1
 80026d8:	f7ff ff04 	bl	80024e4 <findslot>
 80026dc:	4605      	mov	r5, r0
 80026de:	b930      	cbnz	r0, 80026ee <_swistat+0x1a>
 80026e0:	f000 fbf4 	bl	8002ecc <__errno>
 80026e4:	2309      	movs	r3, #9
 80026e6:	6003      	str	r3, [r0, #0]
 80026e8:	f04f 30ff 	mov.w	r0, #4294967295
 80026ec:	bd70      	pop	{r4, r5, r6, pc}
 80026ee:	6863      	ldr	r3, [r4, #4]
 80026f0:	260c      	movs	r6, #12
 80026f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80026f6:	6063      	str	r3, [r4, #4]
 80026f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026fc:	64a3      	str	r3, [r4, #72]	@ 0x48
 80026fe:	4630      	mov	r0, r6
 8002700:	4629      	mov	r1, r5
 8002702:	beab      	bkpt	0x00ab
 8002704:	4605      	mov	r5, r0
 8002706:	4628      	mov	r0, r5
 8002708:	f7ff ff14 	bl	8002534 <checkerror>
 800270c:	1c43      	adds	r3, r0, #1
 800270e:	d0eb      	beq.n	80026e8 <_swistat+0x14>
 8002710:	6120      	str	r0, [r4, #16]
 8002712:	2000      	movs	r0, #0
 8002714:	e7ea      	b.n	80026ec <_swistat+0x18>

08002716 <_fstat>:
 8002716:	460b      	mov	r3, r1
 8002718:	b510      	push	{r4, lr}
 800271a:	2100      	movs	r1, #0
 800271c:	4604      	mov	r4, r0
 800271e:	2258      	movs	r2, #88	@ 0x58
 8002720:	4618      	mov	r0, r3
 8002722:	f000 fb84 	bl	8002e2e <memset>
 8002726:	4601      	mov	r1, r0
 8002728:	4620      	mov	r0, r4
 800272a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800272e:	f7ff bfd1 	b.w	80026d4 <_swistat>

08002732 <_stat>:
 8002732:	b538      	push	{r3, r4, r5, lr}
 8002734:	460d      	mov	r5, r1
 8002736:	4604      	mov	r4, r0
 8002738:	2258      	movs	r2, #88	@ 0x58
 800273a:	2100      	movs	r1, #0
 800273c:	4628      	mov	r0, r5
 800273e:	f000 fb76 	bl	8002e2e <memset>
 8002742:	4620      	mov	r0, r4
 8002744:	2100      	movs	r1, #0
 8002746:	f000 f811 	bl	800276c <_swiopen>
 800274a:	1c43      	adds	r3, r0, #1
 800274c:	4604      	mov	r4, r0
 800274e:	d00b      	beq.n	8002768 <_stat+0x36>
 8002750:	686b      	ldr	r3, [r5, #4]
 8002752:	4629      	mov	r1, r5
 8002754:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8002758:	606b      	str	r3, [r5, #4]
 800275a:	f7ff ffbb 	bl	80026d4 <_swistat>
 800275e:	4605      	mov	r5, r0
 8002760:	4620      	mov	r0, r4
 8002762:	f7ff ff91 	bl	8002688 <_close>
 8002766:	462c      	mov	r4, r5
 8002768:	4620      	mov	r0, r4
 800276a:	bd38      	pop	{r3, r4, r5, pc}

0800276c <_swiopen>:
 800276c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002770:	4607      	mov	r7, r0
 8002772:	460e      	mov	r6, r1
 8002774:	2400      	movs	r4, #0
 8002776:	f8df 90a4 	ldr.w	r9, [pc, #164]	@ 800281c <_swiopen+0xb0>
 800277a:	b096      	sub	sp, #88	@ 0x58
 800277c:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 8002780:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8002784:	3301      	adds	r3, #1
 8002786:	d032      	beq.n	80027ee <_swiopen+0x82>
 8002788:	3401      	adds	r4, #1
 800278a:	2c14      	cmp	r4, #20
 800278c:	d1f6      	bne.n	800277c <_swiopen+0x10>
 800278e:	f000 fb9d 	bl	8002ecc <__errno>
 8002792:	2318      	movs	r3, #24
 8002794:	e03a      	b.n	800280c <_swiopen+0xa0>
 8002796:	f240 6301 	movw	r3, #1537	@ 0x601
 800279a:	f3c6 4500 	ubfx	r5, r6, #16, #1
 800279e:	07b2      	lsls	r2, r6, #30
 80027a0:	bf48      	it	mi
 80027a2:	f045 0502 	orrmi.w	r5, r5, #2
 80027a6:	421e      	tst	r6, r3
 80027a8:	bf18      	it	ne
 80027aa:	f045 0504 	orrne.w	r5, r5, #4
 80027ae:	0733      	lsls	r3, r6, #28
 80027b0:	bf48      	it	mi
 80027b2:	f025 0504 	bicmi.w	r5, r5, #4
 80027b6:	4638      	mov	r0, r7
 80027b8:	bf48      	it	mi
 80027ba:	f045 0508 	orrmi.w	r5, r5, #8
 80027be:	9700      	str	r7, [sp, #0]
 80027c0:	f7fd fcc4 	bl	800014c <strlen>
 80027c4:	e9cd 5001 	strd	r5, r0, [sp, #4]
 80027c8:	2501      	movs	r5, #1
 80027ca:	4628      	mov	r0, r5
 80027cc:	4651      	mov	r1, sl
 80027ce:	beab      	bkpt	0x00ab
 80027d0:	4605      	mov	r5, r0
 80027d2:	2d00      	cmp	r5, #0
 80027d4:	db06      	blt.n	80027e4 <_swiopen+0x78>
 80027d6:	2300      	movs	r3, #0
 80027d8:	44c8      	add	r8, r9
 80027da:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 80027de:	f8c8 3004 	str.w	r3, [r8, #4]
 80027e2:	e016      	b.n	8002812 <_swiopen+0xa6>
 80027e4:	4628      	mov	r0, r5
 80027e6:	f7ff fe97 	bl	8002518 <error>
 80027ea:	4604      	mov	r4, r0
 80027ec:	e011      	b.n	8002812 <_swiopen+0xa6>
 80027ee:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 80027f2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80027f6:	46ea      	mov	sl, sp
 80027f8:	d1cd      	bne.n	8002796 <_swiopen+0x2a>
 80027fa:	4651      	mov	r1, sl
 80027fc:	4638      	mov	r0, r7
 80027fe:	f7ff ff98 	bl	8002732 <_stat>
 8002802:	3001      	adds	r0, #1
 8002804:	d0c7      	beq.n	8002796 <_swiopen+0x2a>
 8002806:	f000 fb61 	bl	8002ecc <__errno>
 800280a:	2311      	movs	r3, #17
 800280c:	f04f 34ff 	mov.w	r4, #4294967295
 8002810:	6003      	str	r3, [r0, #0]
 8002812:	4620      	mov	r0, r4
 8002814:	b016      	add	sp, #88	@ 0x58
 8002816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800281a:	bf00      	nop
 800281c:	200001a8 	.word	0x200001a8

08002820 <_get_semihosting_exts>:
 8002820:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002824:	4606      	mov	r6, r0
 8002826:	460f      	mov	r7, r1
 8002828:	4829      	ldr	r0, [pc, #164]	@ (80028d0 <_get_semihosting_exts+0xb0>)
 800282a:	2100      	movs	r1, #0
 800282c:	4615      	mov	r5, r2
 800282e:	f7ff ff9d 	bl	800276c <_swiopen>
 8002832:	4604      	mov	r4, r0
 8002834:	462a      	mov	r2, r5
 8002836:	2100      	movs	r1, #0
 8002838:	4630      	mov	r0, r6
 800283a:	f000 faf8 	bl	8002e2e <memset>
 800283e:	1c63      	adds	r3, r4, #1
 8002840:	d014      	beq.n	800286c <_get_semihosting_exts+0x4c>
 8002842:	4620      	mov	r0, r4
 8002844:	f7ff fe4e 	bl	80024e4 <findslot>
 8002848:	f04f 080c 	mov.w	r8, #12
 800284c:	4681      	mov	r9, r0
 800284e:	4640      	mov	r0, r8
 8002850:	4649      	mov	r1, r9
 8002852:	beab      	bkpt	0x00ab
 8002854:	4680      	mov	r8, r0
 8002856:	4640      	mov	r0, r8
 8002858:	f7ff fe6c 	bl	8002534 <checkerror>
 800285c:	2803      	cmp	r0, #3
 800285e:	dd02      	ble.n	8002866 <_get_semihosting_exts+0x46>
 8002860:	1ec3      	subs	r3, r0, #3
 8002862:	42ab      	cmp	r3, r5
 8002864:	dc07      	bgt.n	8002876 <_get_semihosting_exts+0x56>
 8002866:	4620      	mov	r0, r4
 8002868:	f7ff ff0e 	bl	8002688 <_close>
 800286c:	f04f 30ff 	mov.w	r0, #4294967295
 8002870:	b003      	add	sp, #12
 8002872:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002876:	2204      	movs	r2, #4
 8002878:	4620      	mov	r0, r4
 800287a:	eb0d 0102 	add.w	r1, sp, r2
 800287e:	f7ff fe6e 	bl	800255e <_read>
 8002882:	2803      	cmp	r0, #3
 8002884:	ddef      	ble.n	8002866 <_get_semihosting_exts+0x46>
 8002886:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800288a:	2b53      	cmp	r3, #83	@ 0x53
 800288c:	d1eb      	bne.n	8002866 <_get_semihosting_exts+0x46>
 800288e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002892:	2b48      	cmp	r3, #72	@ 0x48
 8002894:	d1e7      	bne.n	8002866 <_get_semihosting_exts+0x46>
 8002896:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800289a:	2b46      	cmp	r3, #70	@ 0x46
 800289c:	d1e3      	bne.n	8002866 <_get_semihosting_exts+0x46>
 800289e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80028a2:	2b42      	cmp	r3, #66	@ 0x42
 80028a4:	d1df      	bne.n	8002866 <_get_semihosting_exts+0x46>
 80028a6:	2201      	movs	r2, #1
 80028a8:	4639      	mov	r1, r7
 80028aa:	4620      	mov	r0, r4
 80028ac:	f7ff fe71 	bl	8002592 <_swilseek>
 80028b0:	2800      	cmp	r0, #0
 80028b2:	dbd8      	blt.n	8002866 <_get_semihosting_exts+0x46>
 80028b4:	462a      	mov	r2, r5
 80028b6:	4631      	mov	r1, r6
 80028b8:	4620      	mov	r0, r4
 80028ba:	f7ff fe50 	bl	800255e <_read>
 80028be:	4605      	mov	r5, r0
 80028c0:	4620      	mov	r0, r4
 80028c2:	f7ff fee1 	bl	8002688 <_close>
 80028c6:	4628      	mov	r0, r5
 80028c8:	f7ff fe34 	bl	8002534 <checkerror>
 80028cc:	e7d0      	b.n	8002870 <_get_semihosting_exts+0x50>
 80028ce:	bf00      	nop
 80028d0:	08003ee0 	.word	0x08003ee0

080028d4 <initialise_semihosting_exts>:
 80028d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80028d6:	2100      	movs	r1, #0
 80028d8:	2201      	movs	r2, #1
 80028da:	4d09      	ldr	r5, [pc, #36]	@ (8002900 <initialise_semihosting_exts+0x2c>)
 80028dc:	4c09      	ldr	r4, [pc, #36]	@ (8002904 <initialise_semihosting_exts+0x30>)
 80028de:	a801      	add	r0, sp, #4
 80028e0:	6029      	str	r1, [r5, #0]
 80028e2:	6022      	str	r2, [r4, #0]
 80028e4:	f7ff ff9c 	bl	8002820 <_get_semihosting_exts>
 80028e8:	2800      	cmp	r0, #0
 80028ea:	dd07      	ble.n	80028fc <initialise_semihosting_exts+0x28>
 80028ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80028f0:	f003 0201 	and.w	r2, r3, #1
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	602a      	str	r2, [r5, #0]
 80028fa:	6023      	str	r3, [r4, #0]
 80028fc:	b003      	add	sp, #12
 80028fe:	bd30      	pop	{r4, r5, pc}
 8002900:	2000002c 	.word	0x2000002c
 8002904:	20000028 	.word	0x20000028

08002908 <_has_ext_stdout_stderr>:
 8002908:	b510      	push	{r4, lr}
 800290a:	4c04      	ldr	r4, [pc, #16]	@ (800291c <_has_ext_stdout_stderr+0x14>)
 800290c:	6823      	ldr	r3, [r4, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	da01      	bge.n	8002916 <_has_ext_stdout_stderr+0xe>
 8002912:	f7ff ffdf 	bl	80028d4 <initialise_semihosting_exts>
 8002916:	6820      	ldr	r0, [r4, #0]
 8002918:	bd10      	pop	{r4, pc}
 800291a:	bf00      	nop
 800291c:	20000028 	.word	0x20000028

08002920 <initialise_monitor_handles>:
 8002920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002924:	2303      	movs	r3, #3
 8002926:	2400      	movs	r4, #0
 8002928:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 80029cc <initialise_monitor_handles+0xac>
 800292c:	b085      	sub	sp, #20
 800292e:	f8cd 9004 	str.w	r9, [sp, #4]
 8002932:	af01      	add	r7, sp, #4
 8002934:	9303      	str	r3, [sp, #12]
 8002936:	2501      	movs	r5, #1
 8002938:	9402      	str	r4, [sp, #8]
 800293a:	4628      	mov	r0, r5
 800293c:	4639      	mov	r1, r7
 800293e:	beab      	bkpt	0x00ab
 8002940:	4605      	mov	r5, r0
 8002942:	f04f 32ff 	mov.w	r2, #4294967295
 8002946:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 80029d0 <initialise_monitor_handles+0xb0>
 800294a:	4623      	mov	r3, r4
 800294c:	4c21      	ldr	r4, [pc, #132]	@ (80029d4 <initialise_monitor_handles+0xb4>)
 800294e:	f8c8 5000 	str.w	r5, [r8]
 8002952:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8002956:	3301      	adds	r3, #1
 8002958:	2b14      	cmp	r3, #20
 800295a:	d1fa      	bne.n	8002952 <initialise_monitor_handles+0x32>
 800295c:	f7ff ffd4 	bl	8002908 <_has_ext_stdout_stderr>
 8002960:	4d1d      	ldr	r5, [pc, #116]	@ (80029d8 <initialise_monitor_handles+0xb8>)
 8002962:	b1d0      	cbz	r0, 800299a <initialise_monitor_handles+0x7a>
 8002964:	f04f 0a03 	mov.w	sl, #3
 8002968:	2304      	movs	r3, #4
 800296a:	f8cd 9004 	str.w	r9, [sp, #4]
 800296e:	2601      	movs	r6, #1
 8002970:	f8cd a00c 	str.w	sl, [sp, #12]
 8002974:	9302      	str	r3, [sp, #8]
 8002976:	4630      	mov	r0, r6
 8002978:	4639      	mov	r1, r7
 800297a:	beab      	bkpt	0x00ab
 800297c:	4683      	mov	fp, r0
 800297e:	4b17      	ldr	r3, [pc, #92]	@ (80029dc <initialise_monitor_handles+0xbc>)
 8002980:	f8cd 9004 	str.w	r9, [sp, #4]
 8002984:	f8c3 b000 	str.w	fp, [r3]
 8002988:	2308      	movs	r3, #8
 800298a:	f8cd a00c 	str.w	sl, [sp, #12]
 800298e:	9302      	str	r3, [sp, #8]
 8002990:	4630      	mov	r0, r6
 8002992:	4639      	mov	r1, r7
 8002994:	beab      	bkpt	0x00ab
 8002996:	4606      	mov	r6, r0
 8002998:	602e      	str	r6, [r5, #0]
 800299a:	2600      	movs	r6, #0
 800299c:	682b      	ldr	r3, [r5, #0]
 800299e:	6066      	str	r6, [r4, #4]
 80029a0:	3301      	adds	r3, #1
 80029a2:	bf02      	ittt	eq
 80029a4:	4b0d      	ldreq	r3, [pc, #52]	@ (80029dc <initialise_monitor_handles+0xbc>)
 80029a6:	681b      	ldreq	r3, [r3, #0]
 80029a8:	602b      	streq	r3, [r5, #0]
 80029aa:	f8d8 3000 	ldr.w	r3, [r8]
 80029ae:	6023      	str	r3, [r4, #0]
 80029b0:	f7ff ffaa 	bl	8002908 <_has_ext_stdout_stderr>
 80029b4:	b130      	cbz	r0, 80029c4 <initialise_monitor_handles+0xa4>
 80029b6:	4b09      	ldr	r3, [pc, #36]	@ (80029dc <initialise_monitor_handles+0xbc>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80029be:	682b      	ldr	r3, [r5, #0]
 80029c0:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80029c4:	b005      	add	sp, #20
 80029c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029ca:	bf00      	nop
 80029cc:	08003ef6 	.word	0x08003ef6
 80029d0:	200001a4 	.word	0x200001a4
 80029d4:	200001a8 	.word	0x200001a8
 80029d8:	2000019c 	.word	0x2000019c
 80029dc:	200001a0 	.word	0x200001a0

080029e0 <_isatty>:
 80029e0:	b570      	push	{r4, r5, r6, lr}
 80029e2:	f7ff fd7f 	bl	80024e4 <findslot>
 80029e6:	2409      	movs	r4, #9
 80029e8:	4605      	mov	r5, r0
 80029ea:	b920      	cbnz	r0, 80029f6 <_isatty+0x16>
 80029ec:	f000 fa6e 	bl	8002ecc <__errno>
 80029f0:	6004      	str	r4, [r0, #0]
 80029f2:	2000      	movs	r0, #0
 80029f4:	bd70      	pop	{r4, r5, r6, pc}
 80029f6:	4620      	mov	r0, r4
 80029f8:	4629      	mov	r1, r5
 80029fa:	beab      	bkpt	0x00ab
 80029fc:	4604      	mov	r4, r0
 80029fe:	2c01      	cmp	r4, #1
 8002a00:	4620      	mov	r0, r4
 8002a02:	d0f7      	beq.n	80029f4 <_isatty+0x14>
 8002a04:	f000 fa62 	bl	8002ecc <__errno>
 8002a08:	2513      	movs	r5, #19
 8002a0a:	4604      	mov	r4, r0
 8002a0c:	2600      	movs	r6, #0
 8002a0e:	4628      	mov	r0, r5
 8002a10:	4631      	mov	r1, r6
 8002a12:	beab      	bkpt	0x00ab
 8002a14:	4605      	mov	r5, r0
 8002a16:	6025      	str	r5, [r4, #0]
 8002a18:	e7eb      	b.n	80029f2 <_isatty+0x12>
	...

08002a1c <__sflush_r>:
 8002a1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a22:	0716      	lsls	r6, r2, #28
 8002a24:	4605      	mov	r5, r0
 8002a26:	460c      	mov	r4, r1
 8002a28:	d454      	bmi.n	8002ad4 <__sflush_r+0xb8>
 8002a2a:	684b      	ldr	r3, [r1, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	dc02      	bgt.n	8002a36 <__sflush_r+0x1a>
 8002a30:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	dd48      	ble.n	8002ac8 <__sflush_r+0xac>
 8002a36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002a38:	2e00      	cmp	r6, #0
 8002a3a:	d045      	beq.n	8002ac8 <__sflush_r+0xac>
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002a42:	682f      	ldr	r7, [r5, #0]
 8002a44:	6a21      	ldr	r1, [r4, #32]
 8002a46:	602b      	str	r3, [r5, #0]
 8002a48:	d030      	beq.n	8002aac <__sflush_r+0x90>
 8002a4a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002a4c:	89a3      	ldrh	r3, [r4, #12]
 8002a4e:	0759      	lsls	r1, r3, #29
 8002a50:	d505      	bpl.n	8002a5e <__sflush_r+0x42>
 8002a52:	6863      	ldr	r3, [r4, #4]
 8002a54:	1ad2      	subs	r2, r2, r3
 8002a56:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002a58:	b10b      	cbz	r3, 8002a5e <__sflush_r+0x42>
 8002a5a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a5c:	1ad2      	subs	r2, r2, r3
 8002a5e:	2300      	movs	r3, #0
 8002a60:	4628      	mov	r0, r5
 8002a62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002a64:	6a21      	ldr	r1, [r4, #32]
 8002a66:	47b0      	blx	r6
 8002a68:	1c43      	adds	r3, r0, #1
 8002a6a:	89a3      	ldrh	r3, [r4, #12]
 8002a6c:	d106      	bne.n	8002a7c <__sflush_r+0x60>
 8002a6e:	6829      	ldr	r1, [r5, #0]
 8002a70:	291d      	cmp	r1, #29
 8002a72:	d82b      	bhi.n	8002acc <__sflush_r+0xb0>
 8002a74:	4a28      	ldr	r2, [pc, #160]	@ (8002b18 <__sflush_r+0xfc>)
 8002a76:	40ca      	lsrs	r2, r1
 8002a78:	07d6      	lsls	r6, r2, #31
 8002a7a:	d527      	bpl.n	8002acc <__sflush_r+0xb0>
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	6062      	str	r2, [r4, #4]
 8002a80:	6922      	ldr	r2, [r4, #16]
 8002a82:	04d9      	lsls	r1, r3, #19
 8002a84:	6022      	str	r2, [r4, #0]
 8002a86:	d504      	bpl.n	8002a92 <__sflush_r+0x76>
 8002a88:	1c42      	adds	r2, r0, #1
 8002a8a:	d101      	bne.n	8002a90 <__sflush_r+0x74>
 8002a8c:	682b      	ldr	r3, [r5, #0]
 8002a8e:	b903      	cbnz	r3, 8002a92 <__sflush_r+0x76>
 8002a90:	6560      	str	r0, [r4, #84]	@ 0x54
 8002a92:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002a94:	602f      	str	r7, [r5, #0]
 8002a96:	b1b9      	cbz	r1, 8002ac8 <__sflush_r+0xac>
 8002a98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002a9c:	4299      	cmp	r1, r3
 8002a9e:	d002      	beq.n	8002aa6 <__sflush_r+0x8a>
 8002aa0:	4628      	mov	r0, r5
 8002aa2:	f000 fa41 	bl	8002f28 <_free_r>
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	6363      	str	r3, [r4, #52]	@ 0x34
 8002aaa:	e00d      	b.n	8002ac8 <__sflush_r+0xac>
 8002aac:	2301      	movs	r3, #1
 8002aae:	4628      	mov	r0, r5
 8002ab0:	47b0      	blx	r6
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	1c50      	adds	r0, r2, #1
 8002ab6:	d1c9      	bne.n	8002a4c <__sflush_r+0x30>
 8002ab8:	682b      	ldr	r3, [r5, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0c6      	beq.n	8002a4c <__sflush_r+0x30>
 8002abe:	2b1d      	cmp	r3, #29
 8002ac0:	d001      	beq.n	8002ac6 <__sflush_r+0xaa>
 8002ac2:	2b16      	cmp	r3, #22
 8002ac4:	d11d      	bne.n	8002b02 <__sflush_r+0xe6>
 8002ac6:	602f      	str	r7, [r5, #0]
 8002ac8:	2000      	movs	r0, #0
 8002aca:	e021      	b.n	8002b10 <__sflush_r+0xf4>
 8002acc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ad0:	b21b      	sxth	r3, r3
 8002ad2:	e01a      	b.n	8002b0a <__sflush_r+0xee>
 8002ad4:	690f      	ldr	r7, [r1, #16]
 8002ad6:	2f00      	cmp	r7, #0
 8002ad8:	d0f6      	beq.n	8002ac8 <__sflush_r+0xac>
 8002ada:	0793      	lsls	r3, r2, #30
 8002adc:	bf18      	it	ne
 8002ade:	2300      	movne	r3, #0
 8002ae0:	680e      	ldr	r6, [r1, #0]
 8002ae2:	bf08      	it	eq
 8002ae4:	694b      	ldreq	r3, [r1, #20]
 8002ae6:	1bf6      	subs	r6, r6, r7
 8002ae8:	600f      	str	r7, [r1, #0]
 8002aea:	608b      	str	r3, [r1, #8]
 8002aec:	2e00      	cmp	r6, #0
 8002aee:	ddeb      	ble.n	8002ac8 <__sflush_r+0xac>
 8002af0:	4633      	mov	r3, r6
 8002af2:	463a      	mov	r2, r7
 8002af4:	4628      	mov	r0, r5
 8002af6:	6a21      	ldr	r1, [r4, #32]
 8002af8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002afc:	47e0      	blx	ip
 8002afe:	2800      	cmp	r0, #0
 8002b00:	dc07      	bgt.n	8002b12 <__sflush_r+0xf6>
 8002b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8002b0e:	81a3      	strh	r3, [r4, #12]
 8002b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b12:	4407      	add	r7, r0
 8002b14:	1a36      	subs	r6, r6, r0
 8002b16:	e7e9      	b.n	8002aec <__sflush_r+0xd0>
 8002b18:	20400001 	.word	0x20400001

08002b1c <_fflush_r>:
 8002b1c:	b538      	push	{r3, r4, r5, lr}
 8002b1e:	690b      	ldr	r3, [r1, #16]
 8002b20:	4605      	mov	r5, r0
 8002b22:	460c      	mov	r4, r1
 8002b24:	b913      	cbnz	r3, 8002b2c <_fflush_r+0x10>
 8002b26:	2500      	movs	r5, #0
 8002b28:	4628      	mov	r0, r5
 8002b2a:	bd38      	pop	{r3, r4, r5, pc}
 8002b2c:	b118      	cbz	r0, 8002b36 <_fflush_r+0x1a>
 8002b2e:	6a03      	ldr	r3, [r0, #32]
 8002b30:	b90b      	cbnz	r3, 8002b36 <_fflush_r+0x1a>
 8002b32:	f000 f8bb 	bl	8002cac <__sinit>
 8002b36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f3      	beq.n	8002b26 <_fflush_r+0xa>
 8002b3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002b40:	07d0      	lsls	r0, r2, #31
 8002b42:	d404      	bmi.n	8002b4e <_fflush_r+0x32>
 8002b44:	0599      	lsls	r1, r3, #22
 8002b46:	d402      	bmi.n	8002b4e <_fflush_r+0x32>
 8002b48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002b4a:	f000 f9ea 	bl	8002f22 <__retarget_lock_acquire_recursive>
 8002b4e:	4628      	mov	r0, r5
 8002b50:	4621      	mov	r1, r4
 8002b52:	f7ff ff63 	bl	8002a1c <__sflush_r>
 8002b56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002b58:	4605      	mov	r5, r0
 8002b5a:	07da      	lsls	r2, r3, #31
 8002b5c:	d4e4      	bmi.n	8002b28 <_fflush_r+0xc>
 8002b5e:	89a3      	ldrh	r3, [r4, #12]
 8002b60:	059b      	lsls	r3, r3, #22
 8002b62:	d4e1      	bmi.n	8002b28 <_fflush_r+0xc>
 8002b64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002b66:	f000 f9dd 	bl	8002f24 <__retarget_lock_release_recursive>
 8002b6a:	e7dd      	b.n	8002b28 <_fflush_r+0xc>

08002b6c <fflush>:
 8002b6c:	4601      	mov	r1, r0
 8002b6e:	b920      	cbnz	r0, 8002b7a <fflush+0xe>
 8002b70:	4a04      	ldr	r2, [pc, #16]	@ (8002b84 <fflush+0x18>)
 8002b72:	4905      	ldr	r1, [pc, #20]	@ (8002b88 <fflush+0x1c>)
 8002b74:	4805      	ldr	r0, [pc, #20]	@ (8002b8c <fflush+0x20>)
 8002b76:	f000 b8b1 	b.w	8002cdc <_fwalk_sglue>
 8002b7a:	4b05      	ldr	r3, [pc, #20]	@ (8002b90 <fflush+0x24>)
 8002b7c:	6818      	ldr	r0, [r3, #0]
 8002b7e:	f7ff bfcd 	b.w	8002b1c <_fflush_r>
 8002b82:	bf00      	nop
 8002b84:	20000030 	.word	0x20000030
 8002b88:	08002b1d 	.word	0x08002b1d
 8002b8c:	20000040 	.word	0x20000040
 8002b90:	2000003c 	.word	0x2000003c

08002b94 <std>:
 8002b94:	2300      	movs	r3, #0
 8002b96:	b510      	push	{r4, lr}
 8002b98:	4604      	mov	r4, r0
 8002b9a:	e9c0 3300 	strd	r3, r3, [r0]
 8002b9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002ba2:	6083      	str	r3, [r0, #8]
 8002ba4:	8181      	strh	r1, [r0, #12]
 8002ba6:	6643      	str	r3, [r0, #100]	@ 0x64
 8002ba8:	81c2      	strh	r2, [r0, #14]
 8002baa:	6183      	str	r3, [r0, #24]
 8002bac:	4619      	mov	r1, r3
 8002bae:	2208      	movs	r2, #8
 8002bb0:	305c      	adds	r0, #92	@ 0x5c
 8002bb2:	f000 f93c 	bl	8002e2e <memset>
 8002bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8002bec <std+0x58>)
 8002bb8:	6224      	str	r4, [r4, #32]
 8002bba:	6263      	str	r3, [r4, #36]	@ 0x24
 8002bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf0 <std+0x5c>)
 8002bbe:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf4 <std+0x60>)
 8002bc2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf8 <std+0x64>)
 8002bc6:	6323      	str	r3, [r4, #48]	@ 0x30
 8002bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8002bfc <std+0x68>)
 8002bca:	429c      	cmp	r4, r3
 8002bcc:	d006      	beq.n	8002bdc <std+0x48>
 8002bce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002bd2:	4294      	cmp	r4, r2
 8002bd4:	d002      	beq.n	8002bdc <std+0x48>
 8002bd6:	33d0      	adds	r3, #208	@ 0xd0
 8002bd8:	429c      	cmp	r4, r3
 8002bda:	d105      	bne.n	8002be8 <std+0x54>
 8002bdc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002be4:	f000 b99c 	b.w	8002f20 <__retarget_lock_init_recursive>
 8002be8:	bd10      	pop	{r4, pc}
 8002bea:	bf00      	nop
 8002bec:	08002da9 	.word	0x08002da9
 8002bf0:	08002dcb 	.word	0x08002dcb
 8002bf4:	08002e03 	.word	0x08002e03
 8002bf8:	08002e27 	.word	0x08002e27
 8002bfc:	20000248 	.word	0x20000248

08002c00 <stdio_exit_handler>:
 8002c00:	4a02      	ldr	r2, [pc, #8]	@ (8002c0c <stdio_exit_handler+0xc>)
 8002c02:	4903      	ldr	r1, [pc, #12]	@ (8002c10 <stdio_exit_handler+0x10>)
 8002c04:	4803      	ldr	r0, [pc, #12]	@ (8002c14 <stdio_exit_handler+0x14>)
 8002c06:	f000 b869 	b.w	8002cdc <_fwalk_sglue>
 8002c0a:	bf00      	nop
 8002c0c:	20000030 	.word	0x20000030
 8002c10:	08002b1d 	.word	0x08002b1d
 8002c14:	20000040 	.word	0x20000040

08002c18 <cleanup_stdio>:
 8002c18:	6841      	ldr	r1, [r0, #4]
 8002c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c4c <cleanup_stdio+0x34>)
 8002c1c:	b510      	push	{r4, lr}
 8002c1e:	4299      	cmp	r1, r3
 8002c20:	4604      	mov	r4, r0
 8002c22:	d001      	beq.n	8002c28 <cleanup_stdio+0x10>
 8002c24:	f7ff ff7a 	bl	8002b1c <_fflush_r>
 8002c28:	68a1      	ldr	r1, [r4, #8]
 8002c2a:	4b09      	ldr	r3, [pc, #36]	@ (8002c50 <cleanup_stdio+0x38>)
 8002c2c:	4299      	cmp	r1, r3
 8002c2e:	d002      	beq.n	8002c36 <cleanup_stdio+0x1e>
 8002c30:	4620      	mov	r0, r4
 8002c32:	f7ff ff73 	bl	8002b1c <_fflush_r>
 8002c36:	68e1      	ldr	r1, [r4, #12]
 8002c38:	4b06      	ldr	r3, [pc, #24]	@ (8002c54 <cleanup_stdio+0x3c>)
 8002c3a:	4299      	cmp	r1, r3
 8002c3c:	d004      	beq.n	8002c48 <cleanup_stdio+0x30>
 8002c3e:	4620      	mov	r0, r4
 8002c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c44:	f7ff bf6a 	b.w	8002b1c <_fflush_r>
 8002c48:	bd10      	pop	{r4, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20000248 	.word	0x20000248
 8002c50:	200002b0 	.word	0x200002b0
 8002c54:	20000318 	.word	0x20000318

08002c58 <global_stdio_init.part.0>:
 8002c58:	b510      	push	{r4, lr}
 8002c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c88 <global_stdio_init.part.0+0x30>)
 8002c5c:	4c0b      	ldr	r4, [pc, #44]	@ (8002c8c <global_stdio_init.part.0+0x34>)
 8002c5e:	4a0c      	ldr	r2, [pc, #48]	@ (8002c90 <global_stdio_init.part.0+0x38>)
 8002c60:	4620      	mov	r0, r4
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	2104      	movs	r1, #4
 8002c66:	2200      	movs	r2, #0
 8002c68:	f7ff ff94 	bl	8002b94 <std>
 8002c6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002c70:	2201      	movs	r2, #1
 8002c72:	2109      	movs	r1, #9
 8002c74:	f7ff ff8e 	bl	8002b94 <std>
 8002c78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c82:	2112      	movs	r1, #18
 8002c84:	f7ff bf86 	b.w	8002b94 <std>
 8002c88:	20000380 	.word	0x20000380
 8002c8c:	20000248 	.word	0x20000248
 8002c90:	08002c01 	.word	0x08002c01

08002c94 <__sfp_lock_acquire>:
 8002c94:	4801      	ldr	r0, [pc, #4]	@ (8002c9c <__sfp_lock_acquire+0x8>)
 8002c96:	f000 b944 	b.w	8002f22 <__retarget_lock_acquire_recursive>
 8002c9a:	bf00      	nop
 8002c9c:	20000389 	.word	0x20000389

08002ca0 <__sfp_lock_release>:
 8002ca0:	4801      	ldr	r0, [pc, #4]	@ (8002ca8 <__sfp_lock_release+0x8>)
 8002ca2:	f000 b93f 	b.w	8002f24 <__retarget_lock_release_recursive>
 8002ca6:	bf00      	nop
 8002ca8:	20000389 	.word	0x20000389

08002cac <__sinit>:
 8002cac:	b510      	push	{r4, lr}
 8002cae:	4604      	mov	r4, r0
 8002cb0:	f7ff fff0 	bl	8002c94 <__sfp_lock_acquire>
 8002cb4:	6a23      	ldr	r3, [r4, #32]
 8002cb6:	b11b      	cbz	r3, 8002cc0 <__sinit+0x14>
 8002cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cbc:	f7ff bff0 	b.w	8002ca0 <__sfp_lock_release>
 8002cc0:	4b04      	ldr	r3, [pc, #16]	@ (8002cd4 <__sinit+0x28>)
 8002cc2:	6223      	str	r3, [r4, #32]
 8002cc4:	4b04      	ldr	r3, [pc, #16]	@ (8002cd8 <__sinit+0x2c>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1f5      	bne.n	8002cb8 <__sinit+0xc>
 8002ccc:	f7ff ffc4 	bl	8002c58 <global_stdio_init.part.0>
 8002cd0:	e7f2      	b.n	8002cb8 <__sinit+0xc>
 8002cd2:	bf00      	nop
 8002cd4:	08002c19 	.word	0x08002c19
 8002cd8:	20000380 	.word	0x20000380

08002cdc <_fwalk_sglue>:
 8002cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ce0:	4607      	mov	r7, r0
 8002ce2:	4688      	mov	r8, r1
 8002ce4:	4614      	mov	r4, r2
 8002ce6:	2600      	movs	r6, #0
 8002ce8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002cec:	f1b9 0901 	subs.w	r9, r9, #1
 8002cf0:	d505      	bpl.n	8002cfe <_fwalk_sglue+0x22>
 8002cf2:	6824      	ldr	r4, [r4, #0]
 8002cf4:	2c00      	cmp	r4, #0
 8002cf6:	d1f7      	bne.n	8002ce8 <_fwalk_sglue+0xc>
 8002cf8:	4630      	mov	r0, r6
 8002cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002cfe:	89ab      	ldrh	r3, [r5, #12]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d907      	bls.n	8002d14 <_fwalk_sglue+0x38>
 8002d04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	d003      	beq.n	8002d14 <_fwalk_sglue+0x38>
 8002d0c:	4629      	mov	r1, r5
 8002d0e:	4638      	mov	r0, r7
 8002d10:	47c0      	blx	r8
 8002d12:	4306      	orrs	r6, r0
 8002d14:	3568      	adds	r5, #104	@ 0x68
 8002d16:	e7e9      	b.n	8002cec <_fwalk_sglue+0x10>

08002d18 <iprintf>:
 8002d18:	b40f      	push	{r0, r1, r2, r3}
 8002d1a:	b507      	push	{r0, r1, r2, lr}
 8002d1c:	4906      	ldr	r1, [pc, #24]	@ (8002d38 <iprintf+0x20>)
 8002d1e:	ab04      	add	r3, sp, #16
 8002d20:	6808      	ldr	r0, [r1, #0]
 8002d22:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d26:	6881      	ldr	r1, [r0, #8]
 8002d28:	9301      	str	r3, [sp, #4]
 8002d2a:	f000 fb73 	bl	8003414 <_vfiprintf_r>
 8002d2e:	b003      	add	sp, #12
 8002d30:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d34:	b004      	add	sp, #16
 8002d36:	4770      	bx	lr
 8002d38:	2000003c 	.word	0x2000003c

08002d3c <sniprintf>:
 8002d3c:	b40c      	push	{r2, r3}
 8002d3e:	b530      	push	{r4, r5, lr}
 8002d40:	4b18      	ldr	r3, [pc, #96]	@ (8002da4 <sniprintf+0x68>)
 8002d42:	1e0c      	subs	r4, r1, #0
 8002d44:	681d      	ldr	r5, [r3, #0]
 8002d46:	b09d      	sub	sp, #116	@ 0x74
 8002d48:	da08      	bge.n	8002d5c <sniprintf+0x20>
 8002d4a:	238b      	movs	r3, #139	@ 0x8b
 8002d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d50:	602b      	str	r3, [r5, #0]
 8002d52:	b01d      	add	sp, #116	@ 0x74
 8002d54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d58:	b002      	add	sp, #8
 8002d5a:	4770      	bx	lr
 8002d5c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002d60:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	931b      	str	r3, [sp, #108]	@ 0x6c
 8002d6a:	bf0c      	ite	eq
 8002d6c:	4623      	moveq	r3, r4
 8002d6e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002d72:	9304      	str	r3, [sp, #16]
 8002d74:	9307      	str	r3, [sp, #28]
 8002d76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d7a:	9002      	str	r0, [sp, #8]
 8002d7c:	9006      	str	r0, [sp, #24]
 8002d7e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002d82:	4628      	mov	r0, r5
 8002d84:	ab21      	add	r3, sp, #132	@ 0x84
 8002d86:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002d88:	a902      	add	r1, sp, #8
 8002d8a:	9301      	str	r3, [sp, #4]
 8002d8c:	f000 fa1e 	bl	80031cc <_svfiprintf_r>
 8002d90:	1c43      	adds	r3, r0, #1
 8002d92:	bfbc      	itt	lt
 8002d94:	238b      	movlt	r3, #139	@ 0x8b
 8002d96:	602b      	strlt	r3, [r5, #0]
 8002d98:	2c00      	cmp	r4, #0
 8002d9a:	d0da      	beq.n	8002d52 <sniprintf+0x16>
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	9b02      	ldr	r3, [sp, #8]
 8002da0:	701a      	strb	r2, [r3, #0]
 8002da2:	e7d6      	b.n	8002d52 <sniprintf+0x16>
 8002da4:	2000003c 	.word	0x2000003c

08002da8 <__sread>:
 8002da8:	b510      	push	{r4, lr}
 8002daa:	460c      	mov	r4, r1
 8002dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002db0:	f000 f868 	bl	8002e84 <_read_r>
 8002db4:	2800      	cmp	r0, #0
 8002db6:	bfab      	itete	ge
 8002db8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002dba:	89a3      	ldrhlt	r3, [r4, #12]
 8002dbc:	181b      	addge	r3, r3, r0
 8002dbe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002dc2:	bfac      	ite	ge
 8002dc4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002dc6:	81a3      	strhlt	r3, [r4, #12]
 8002dc8:	bd10      	pop	{r4, pc}

08002dca <__swrite>:
 8002dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dce:	461f      	mov	r7, r3
 8002dd0:	898b      	ldrh	r3, [r1, #12]
 8002dd2:	4605      	mov	r5, r0
 8002dd4:	05db      	lsls	r3, r3, #23
 8002dd6:	460c      	mov	r4, r1
 8002dd8:	4616      	mov	r6, r2
 8002dda:	d505      	bpl.n	8002de8 <__swrite+0x1e>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	2200      	movs	r2, #0
 8002de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002de4:	f000 f83c 	bl	8002e60 <_lseek_r>
 8002de8:	89a3      	ldrh	r3, [r4, #12]
 8002dea:	4632      	mov	r2, r6
 8002dec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002df0:	81a3      	strh	r3, [r4, #12]
 8002df2:	4628      	mov	r0, r5
 8002df4:	463b      	mov	r3, r7
 8002df6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002dfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002dfe:	f000 b853 	b.w	8002ea8 <_write_r>

08002e02 <__sseek>:
 8002e02:	b510      	push	{r4, lr}
 8002e04:	460c      	mov	r4, r1
 8002e06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e0a:	f000 f829 	bl	8002e60 <_lseek_r>
 8002e0e:	1c43      	adds	r3, r0, #1
 8002e10:	89a3      	ldrh	r3, [r4, #12]
 8002e12:	bf15      	itete	ne
 8002e14:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002e16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002e1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002e1e:	81a3      	strheq	r3, [r4, #12]
 8002e20:	bf18      	it	ne
 8002e22:	81a3      	strhne	r3, [r4, #12]
 8002e24:	bd10      	pop	{r4, pc}

08002e26 <__sclose>:
 8002e26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e2a:	f000 b809 	b.w	8002e40 <_close_r>

08002e2e <memset>:
 8002e2e:	4603      	mov	r3, r0
 8002e30:	4402      	add	r2, r0
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d100      	bne.n	8002e38 <memset+0xa>
 8002e36:	4770      	bx	lr
 8002e38:	f803 1b01 	strb.w	r1, [r3], #1
 8002e3c:	e7f9      	b.n	8002e32 <memset+0x4>
	...

08002e40 <_close_r>:
 8002e40:	b538      	push	{r3, r4, r5, lr}
 8002e42:	2300      	movs	r3, #0
 8002e44:	4d05      	ldr	r5, [pc, #20]	@ (8002e5c <_close_r+0x1c>)
 8002e46:	4604      	mov	r4, r0
 8002e48:	4608      	mov	r0, r1
 8002e4a:	602b      	str	r3, [r5, #0]
 8002e4c:	f7ff fc1c 	bl	8002688 <_close>
 8002e50:	1c43      	adds	r3, r0, #1
 8002e52:	d102      	bne.n	8002e5a <_close_r+0x1a>
 8002e54:	682b      	ldr	r3, [r5, #0]
 8002e56:	b103      	cbz	r3, 8002e5a <_close_r+0x1a>
 8002e58:	6023      	str	r3, [r4, #0]
 8002e5a:	bd38      	pop	{r3, r4, r5, pc}
 8002e5c:	20000384 	.word	0x20000384

08002e60 <_lseek_r>:
 8002e60:	b538      	push	{r3, r4, r5, lr}
 8002e62:	4604      	mov	r4, r0
 8002e64:	4608      	mov	r0, r1
 8002e66:	4611      	mov	r1, r2
 8002e68:	2200      	movs	r2, #0
 8002e6a:	4d05      	ldr	r5, [pc, #20]	@ (8002e80 <_lseek_r+0x20>)
 8002e6c:	602a      	str	r2, [r5, #0]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	f7ff fbcb 	bl	800260a <_lseek>
 8002e74:	1c43      	adds	r3, r0, #1
 8002e76:	d102      	bne.n	8002e7e <_lseek_r+0x1e>
 8002e78:	682b      	ldr	r3, [r5, #0]
 8002e7a:	b103      	cbz	r3, 8002e7e <_lseek_r+0x1e>
 8002e7c:	6023      	str	r3, [r4, #0]
 8002e7e:	bd38      	pop	{r3, r4, r5, pc}
 8002e80:	20000384 	.word	0x20000384

08002e84 <_read_r>:
 8002e84:	b538      	push	{r3, r4, r5, lr}
 8002e86:	4604      	mov	r4, r0
 8002e88:	4608      	mov	r0, r1
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	4d05      	ldr	r5, [pc, #20]	@ (8002ea4 <_read_r+0x20>)
 8002e90:	602a      	str	r2, [r5, #0]
 8002e92:	461a      	mov	r2, r3
 8002e94:	f7ff fb63 	bl	800255e <_read>
 8002e98:	1c43      	adds	r3, r0, #1
 8002e9a:	d102      	bne.n	8002ea2 <_read_r+0x1e>
 8002e9c:	682b      	ldr	r3, [r5, #0]
 8002e9e:	b103      	cbz	r3, 8002ea2 <_read_r+0x1e>
 8002ea0:	6023      	str	r3, [r4, #0]
 8002ea2:	bd38      	pop	{r3, r4, r5, pc}
 8002ea4:	20000384 	.word	0x20000384

08002ea8 <_write_r>:
 8002ea8:	b538      	push	{r3, r4, r5, lr}
 8002eaa:	4604      	mov	r4, r0
 8002eac:	4608      	mov	r0, r1
 8002eae:	4611      	mov	r1, r2
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	4d05      	ldr	r5, [pc, #20]	@ (8002ec8 <_write_r+0x20>)
 8002eb4:	602a      	str	r2, [r5, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	f7ff fbb9 	bl	800262e <_write>
 8002ebc:	1c43      	adds	r3, r0, #1
 8002ebe:	d102      	bne.n	8002ec6 <_write_r+0x1e>
 8002ec0:	682b      	ldr	r3, [r5, #0]
 8002ec2:	b103      	cbz	r3, 8002ec6 <_write_r+0x1e>
 8002ec4:	6023      	str	r3, [r4, #0]
 8002ec6:	bd38      	pop	{r3, r4, r5, pc}
 8002ec8:	20000384 	.word	0x20000384

08002ecc <__errno>:
 8002ecc:	4b01      	ldr	r3, [pc, #4]	@ (8002ed4 <__errno+0x8>)
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	2000003c 	.word	0x2000003c

08002ed8 <__libc_init_array>:
 8002ed8:	b570      	push	{r4, r5, r6, lr}
 8002eda:	2600      	movs	r6, #0
 8002edc:	4d0c      	ldr	r5, [pc, #48]	@ (8002f10 <__libc_init_array+0x38>)
 8002ede:	4c0d      	ldr	r4, [pc, #52]	@ (8002f14 <__libc_init_array+0x3c>)
 8002ee0:	1b64      	subs	r4, r4, r5
 8002ee2:	10a4      	asrs	r4, r4, #2
 8002ee4:	42a6      	cmp	r6, r4
 8002ee6:	d109      	bne.n	8002efc <__libc_init_array+0x24>
 8002ee8:	f000 fed0 	bl	8003c8c <_init>
 8002eec:	2600      	movs	r6, #0
 8002eee:	4d0a      	ldr	r5, [pc, #40]	@ (8002f18 <__libc_init_array+0x40>)
 8002ef0:	4c0a      	ldr	r4, [pc, #40]	@ (8002f1c <__libc_init_array+0x44>)
 8002ef2:	1b64      	subs	r4, r4, r5
 8002ef4:	10a4      	asrs	r4, r4, #2
 8002ef6:	42a6      	cmp	r6, r4
 8002ef8:	d105      	bne.n	8002f06 <__libc_init_array+0x2e>
 8002efa:	bd70      	pop	{r4, r5, r6, pc}
 8002efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f00:	4798      	blx	r3
 8002f02:	3601      	adds	r6, #1
 8002f04:	e7ee      	b.n	8002ee4 <__libc_init_array+0xc>
 8002f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f0a:	4798      	blx	r3
 8002f0c:	3601      	adds	r6, #1
 8002f0e:	e7f2      	b.n	8002ef6 <__libc_init_array+0x1e>
 8002f10:	08003f38 	.word	0x08003f38
 8002f14:	08003f38 	.word	0x08003f38
 8002f18:	08003f38 	.word	0x08003f38
 8002f1c:	08003f3c 	.word	0x08003f3c

08002f20 <__retarget_lock_init_recursive>:
 8002f20:	4770      	bx	lr

08002f22 <__retarget_lock_acquire_recursive>:
 8002f22:	4770      	bx	lr

08002f24 <__retarget_lock_release_recursive>:
 8002f24:	4770      	bx	lr
	...

08002f28 <_free_r>:
 8002f28:	b538      	push	{r3, r4, r5, lr}
 8002f2a:	4605      	mov	r5, r0
 8002f2c:	2900      	cmp	r1, #0
 8002f2e:	d040      	beq.n	8002fb2 <_free_r+0x8a>
 8002f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f34:	1f0c      	subs	r4, r1, #4
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	bfb8      	it	lt
 8002f3a:	18e4      	addlt	r4, r4, r3
 8002f3c:	f000 f8de 	bl	80030fc <__malloc_lock>
 8002f40:	4a1c      	ldr	r2, [pc, #112]	@ (8002fb4 <_free_r+0x8c>)
 8002f42:	6813      	ldr	r3, [r2, #0]
 8002f44:	b933      	cbnz	r3, 8002f54 <_free_r+0x2c>
 8002f46:	6063      	str	r3, [r4, #4]
 8002f48:	6014      	str	r4, [r2, #0]
 8002f4a:	4628      	mov	r0, r5
 8002f4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f50:	f000 b8da 	b.w	8003108 <__malloc_unlock>
 8002f54:	42a3      	cmp	r3, r4
 8002f56:	d908      	bls.n	8002f6a <_free_r+0x42>
 8002f58:	6820      	ldr	r0, [r4, #0]
 8002f5a:	1821      	adds	r1, r4, r0
 8002f5c:	428b      	cmp	r3, r1
 8002f5e:	bf01      	itttt	eq
 8002f60:	6819      	ldreq	r1, [r3, #0]
 8002f62:	685b      	ldreq	r3, [r3, #4]
 8002f64:	1809      	addeq	r1, r1, r0
 8002f66:	6021      	streq	r1, [r4, #0]
 8002f68:	e7ed      	b.n	8002f46 <_free_r+0x1e>
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	b10b      	cbz	r3, 8002f74 <_free_r+0x4c>
 8002f70:	42a3      	cmp	r3, r4
 8002f72:	d9fa      	bls.n	8002f6a <_free_r+0x42>
 8002f74:	6811      	ldr	r1, [r2, #0]
 8002f76:	1850      	adds	r0, r2, r1
 8002f78:	42a0      	cmp	r0, r4
 8002f7a:	d10b      	bne.n	8002f94 <_free_r+0x6c>
 8002f7c:	6820      	ldr	r0, [r4, #0]
 8002f7e:	4401      	add	r1, r0
 8002f80:	1850      	adds	r0, r2, r1
 8002f82:	4283      	cmp	r3, r0
 8002f84:	6011      	str	r1, [r2, #0]
 8002f86:	d1e0      	bne.n	8002f4a <_free_r+0x22>
 8002f88:	6818      	ldr	r0, [r3, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	4408      	add	r0, r1
 8002f8e:	6010      	str	r0, [r2, #0]
 8002f90:	6053      	str	r3, [r2, #4]
 8002f92:	e7da      	b.n	8002f4a <_free_r+0x22>
 8002f94:	d902      	bls.n	8002f9c <_free_r+0x74>
 8002f96:	230c      	movs	r3, #12
 8002f98:	602b      	str	r3, [r5, #0]
 8002f9a:	e7d6      	b.n	8002f4a <_free_r+0x22>
 8002f9c:	6820      	ldr	r0, [r4, #0]
 8002f9e:	1821      	adds	r1, r4, r0
 8002fa0:	428b      	cmp	r3, r1
 8002fa2:	bf01      	itttt	eq
 8002fa4:	6819      	ldreq	r1, [r3, #0]
 8002fa6:	685b      	ldreq	r3, [r3, #4]
 8002fa8:	1809      	addeq	r1, r1, r0
 8002faa:	6021      	streq	r1, [r4, #0]
 8002fac:	6063      	str	r3, [r4, #4]
 8002fae:	6054      	str	r4, [r2, #4]
 8002fb0:	e7cb      	b.n	8002f4a <_free_r+0x22>
 8002fb2:	bd38      	pop	{r3, r4, r5, pc}
 8002fb4:	20000390 	.word	0x20000390

08002fb8 <sbrk_aligned>:
 8002fb8:	b570      	push	{r4, r5, r6, lr}
 8002fba:	4e0f      	ldr	r6, [pc, #60]	@ (8002ff8 <sbrk_aligned+0x40>)
 8002fbc:	460c      	mov	r4, r1
 8002fbe:	6831      	ldr	r1, [r6, #0]
 8002fc0:	4605      	mov	r5, r0
 8002fc2:	b911      	cbnz	r1, 8002fca <sbrk_aligned+0x12>
 8002fc4:	f000 fd7c 	bl	8003ac0 <_sbrk_r>
 8002fc8:	6030      	str	r0, [r6, #0]
 8002fca:	4621      	mov	r1, r4
 8002fcc:	4628      	mov	r0, r5
 8002fce:	f000 fd77 	bl	8003ac0 <_sbrk_r>
 8002fd2:	1c43      	adds	r3, r0, #1
 8002fd4:	d103      	bne.n	8002fde <sbrk_aligned+0x26>
 8002fd6:	f04f 34ff 	mov.w	r4, #4294967295
 8002fda:	4620      	mov	r0, r4
 8002fdc:	bd70      	pop	{r4, r5, r6, pc}
 8002fde:	1cc4      	adds	r4, r0, #3
 8002fe0:	f024 0403 	bic.w	r4, r4, #3
 8002fe4:	42a0      	cmp	r0, r4
 8002fe6:	d0f8      	beq.n	8002fda <sbrk_aligned+0x22>
 8002fe8:	1a21      	subs	r1, r4, r0
 8002fea:	4628      	mov	r0, r5
 8002fec:	f000 fd68 	bl	8003ac0 <_sbrk_r>
 8002ff0:	3001      	adds	r0, #1
 8002ff2:	d1f2      	bne.n	8002fda <sbrk_aligned+0x22>
 8002ff4:	e7ef      	b.n	8002fd6 <sbrk_aligned+0x1e>
 8002ff6:	bf00      	nop
 8002ff8:	2000038c 	.word	0x2000038c

08002ffc <_malloc_r>:
 8002ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003000:	1ccd      	adds	r5, r1, #3
 8003002:	f025 0503 	bic.w	r5, r5, #3
 8003006:	3508      	adds	r5, #8
 8003008:	2d0c      	cmp	r5, #12
 800300a:	bf38      	it	cc
 800300c:	250c      	movcc	r5, #12
 800300e:	2d00      	cmp	r5, #0
 8003010:	4606      	mov	r6, r0
 8003012:	db01      	blt.n	8003018 <_malloc_r+0x1c>
 8003014:	42a9      	cmp	r1, r5
 8003016:	d904      	bls.n	8003022 <_malloc_r+0x26>
 8003018:	230c      	movs	r3, #12
 800301a:	6033      	str	r3, [r6, #0]
 800301c:	2000      	movs	r0, #0
 800301e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003022:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80030f8 <_malloc_r+0xfc>
 8003026:	f000 f869 	bl	80030fc <__malloc_lock>
 800302a:	f8d8 3000 	ldr.w	r3, [r8]
 800302e:	461c      	mov	r4, r3
 8003030:	bb44      	cbnz	r4, 8003084 <_malloc_r+0x88>
 8003032:	4629      	mov	r1, r5
 8003034:	4630      	mov	r0, r6
 8003036:	f7ff ffbf 	bl	8002fb8 <sbrk_aligned>
 800303a:	1c43      	adds	r3, r0, #1
 800303c:	4604      	mov	r4, r0
 800303e:	d158      	bne.n	80030f2 <_malloc_r+0xf6>
 8003040:	f8d8 4000 	ldr.w	r4, [r8]
 8003044:	4627      	mov	r7, r4
 8003046:	2f00      	cmp	r7, #0
 8003048:	d143      	bne.n	80030d2 <_malloc_r+0xd6>
 800304a:	2c00      	cmp	r4, #0
 800304c:	d04b      	beq.n	80030e6 <_malloc_r+0xea>
 800304e:	6823      	ldr	r3, [r4, #0]
 8003050:	4639      	mov	r1, r7
 8003052:	4630      	mov	r0, r6
 8003054:	eb04 0903 	add.w	r9, r4, r3
 8003058:	f000 fd32 	bl	8003ac0 <_sbrk_r>
 800305c:	4581      	cmp	r9, r0
 800305e:	d142      	bne.n	80030e6 <_malloc_r+0xea>
 8003060:	6821      	ldr	r1, [r4, #0]
 8003062:	4630      	mov	r0, r6
 8003064:	1a6d      	subs	r5, r5, r1
 8003066:	4629      	mov	r1, r5
 8003068:	f7ff ffa6 	bl	8002fb8 <sbrk_aligned>
 800306c:	3001      	adds	r0, #1
 800306e:	d03a      	beq.n	80030e6 <_malloc_r+0xea>
 8003070:	6823      	ldr	r3, [r4, #0]
 8003072:	442b      	add	r3, r5
 8003074:	6023      	str	r3, [r4, #0]
 8003076:	f8d8 3000 	ldr.w	r3, [r8]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	bb62      	cbnz	r2, 80030d8 <_malloc_r+0xdc>
 800307e:	f8c8 7000 	str.w	r7, [r8]
 8003082:	e00f      	b.n	80030a4 <_malloc_r+0xa8>
 8003084:	6822      	ldr	r2, [r4, #0]
 8003086:	1b52      	subs	r2, r2, r5
 8003088:	d420      	bmi.n	80030cc <_malloc_r+0xd0>
 800308a:	2a0b      	cmp	r2, #11
 800308c:	d917      	bls.n	80030be <_malloc_r+0xc2>
 800308e:	1961      	adds	r1, r4, r5
 8003090:	42a3      	cmp	r3, r4
 8003092:	6025      	str	r5, [r4, #0]
 8003094:	bf18      	it	ne
 8003096:	6059      	strne	r1, [r3, #4]
 8003098:	6863      	ldr	r3, [r4, #4]
 800309a:	bf08      	it	eq
 800309c:	f8c8 1000 	streq.w	r1, [r8]
 80030a0:	5162      	str	r2, [r4, r5]
 80030a2:	604b      	str	r3, [r1, #4]
 80030a4:	4630      	mov	r0, r6
 80030a6:	f000 f82f 	bl	8003108 <__malloc_unlock>
 80030aa:	f104 000b 	add.w	r0, r4, #11
 80030ae:	1d23      	adds	r3, r4, #4
 80030b0:	f020 0007 	bic.w	r0, r0, #7
 80030b4:	1ac2      	subs	r2, r0, r3
 80030b6:	bf1c      	itt	ne
 80030b8:	1a1b      	subne	r3, r3, r0
 80030ba:	50a3      	strne	r3, [r4, r2]
 80030bc:	e7af      	b.n	800301e <_malloc_r+0x22>
 80030be:	6862      	ldr	r2, [r4, #4]
 80030c0:	42a3      	cmp	r3, r4
 80030c2:	bf0c      	ite	eq
 80030c4:	f8c8 2000 	streq.w	r2, [r8]
 80030c8:	605a      	strne	r2, [r3, #4]
 80030ca:	e7eb      	b.n	80030a4 <_malloc_r+0xa8>
 80030cc:	4623      	mov	r3, r4
 80030ce:	6864      	ldr	r4, [r4, #4]
 80030d0:	e7ae      	b.n	8003030 <_malloc_r+0x34>
 80030d2:	463c      	mov	r4, r7
 80030d4:	687f      	ldr	r7, [r7, #4]
 80030d6:	e7b6      	b.n	8003046 <_malloc_r+0x4a>
 80030d8:	461a      	mov	r2, r3
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	42a3      	cmp	r3, r4
 80030de:	d1fb      	bne.n	80030d8 <_malloc_r+0xdc>
 80030e0:	2300      	movs	r3, #0
 80030e2:	6053      	str	r3, [r2, #4]
 80030e4:	e7de      	b.n	80030a4 <_malloc_r+0xa8>
 80030e6:	230c      	movs	r3, #12
 80030e8:	4630      	mov	r0, r6
 80030ea:	6033      	str	r3, [r6, #0]
 80030ec:	f000 f80c 	bl	8003108 <__malloc_unlock>
 80030f0:	e794      	b.n	800301c <_malloc_r+0x20>
 80030f2:	6005      	str	r5, [r0, #0]
 80030f4:	e7d6      	b.n	80030a4 <_malloc_r+0xa8>
 80030f6:	bf00      	nop
 80030f8:	20000390 	.word	0x20000390

080030fc <__malloc_lock>:
 80030fc:	4801      	ldr	r0, [pc, #4]	@ (8003104 <__malloc_lock+0x8>)
 80030fe:	f7ff bf10 	b.w	8002f22 <__retarget_lock_acquire_recursive>
 8003102:	bf00      	nop
 8003104:	20000388 	.word	0x20000388

08003108 <__malloc_unlock>:
 8003108:	4801      	ldr	r0, [pc, #4]	@ (8003110 <__malloc_unlock+0x8>)
 800310a:	f7ff bf0b 	b.w	8002f24 <__retarget_lock_release_recursive>
 800310e:	bf00      	nop
 8003110:	20000388 	.word	0x20000388

08003114 <__ssputs_r>:
 8003114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003118:	461f      	mov	r7, r3
 800311a:	688e      	ldr	r6, [r1, #8]
 800311c:	4682      	mov	sl, r0
 800311e:	42be      	cmp	r6, r7
 8003120:	460c      	mov	r4, r1
 8003122:	4690      	mov	r8, r2
 8003124:	680b      	ldr	r3, [r1, #0]
 8003126:	d82d      	bhi.n	8003184 <__ssputs_r+0x70>
 8003128:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800312c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003130:	d026      	beq.n	8003180 <__ssputs_r+0x6c>
 8003132:	6965      	ldr	r5, [r4, #20]
 8003134:	6909      	ldr	r1, [r1, #16]
 8003136:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800313a:	eba3 0901 	sub.w	r9, r3, r1
 800313e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003142:	1c7b      	adds	r3, r7, #1
 8003144:	444b      	add	r3, r9
 8003146:	106d      	asrs	r5, r5, #1
 8003148:	429d      	cmp	r5, r3
 800314a:	bf38      	it	cc
 800314c:	461d      	movcc	r5, r3
 800314e:	0553      	lsls	r3, r2, #21
 8003150:	d527      	bpl.n	80031a2 <__ssputs_r+0x8e>
 8003152:	4629      	mov	r1, r5
 8003154:	f7ff ff52 	bl	8002ffc <_malloc_r>
 8003158:	4606      	mov	r6, r0
 800315a:	b360      	cbz	r0, 80031b6 <__ssputs_r+0xa2>
 800315c:	464a      	mov	r2, r9
 800315e:	6921      	ldr	r1, [r4, #16]
 8003160:	f000 fccc 	bl	8003afc <memcpy>
 8003164:	89a3      	ldrh	r3, [r4, #12]
 8003166:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800316a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800316e:	81a3      	strh	r3, [r4, #12]
 8003170:	6126      	str	r6, [r4, #16]
 8003172:	444e      	add	r6, r9
 8003174:	6026      	str	r6, [r4, #0]
 8003176:	463e      	mov	r6, r7
 8003178:	6165      	str	r5, [r4, #20]
 800317a:	eba5 0509 	sub.w	r5, r5, r9
 800317e:	60a5      	str	r5, [r4, #8]
 8003180:	42be      	cmp	r6, r7
 8003182:	d900      	bls.n	8003186 <__ssputs_r+0x72>
 8003184:	463e      	mov	r6, r7
 8003186:	4632      	mov	r2, r6
 8003188:	4641      	mov	r1, r8
 800318a:	6820      	ldr	r0, [r4, #0]
 800318c:	f000 fc7e 	bl	8003a8c <memmove>
 8003190:	2000      	movs	r0, #0
 8003192:	68a3      	ldr	r3, [r4, #8]
 8003194:	1b9b      	subs	r3, r3, r6
 8003196:	60a3      	str	r3, [r4, #8]
 8003198:	6823      	ldr	r3, [r4, #0]
 800319a:	4433      	add	r3, r6
 800319c:	6023      	str	r3, [r4, #0]
 800319e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031a2:	462a      	mov	r2, r5
 80031a4:	f000 fcb8 	bl	8003b18 <_realloc_r>
 80031a8:	4606      	mov	r6, r0
 80031aa:	2800      	cmp	r0, #0
 80031ac:	d1e0      	bne.n	8003170 <__ssputs_r+0x5c>
 80031ae:	4650      	mov	r0, sl
 80031b0:	6921      	ldr	r1, [r4, #16]
 80031b2:	f7ff feb9 	bl	8002f28 <_free_r>
 80031b6:	230c      	movs	r3, #12
 80031b8:	f8ca 3000 	str.w	r3, [sl]
 80031bc:	89a3      	ldrh	r3, [r4, #12]
 80031be:	f04f 30ff 	mov.w	r0, #4294967295
 80031c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031c6:	81a3      	strh	r3, [r4, #12]
 80031c8:	e7e9      	b.n	800319e <__ssputs_r+0x8a>
	...

080031cc <_svfiprintf_r>:
 80031cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031d0:	4698      	mov	r8, r3
 80031d2:	898b      	ldrh	r3, [r1, #12]
 80031d4:	4607      	mov	r7, r0
 80031d6:	061b      	lsls	r3, r3, #24
 80031d8:	460d      	mov	r5, r1
 80031da:	4614      	mov	r4, r2
 80031dc:	b09d      	sub	sp, #116	@ 0x74
 80031de:	d510      	bpl.n	8003202 <_svfiprintf_r+0x36>
 80031e0:	690b      	ldr	r3, [r1, #16]
 80031e2:	b973      	cbnz	r3, 8003202 <_svfiprintf_r+0x36>
 80031e4:	2140      	movs	r1, #64	@ 0x40
 80031e6:	f7ff ff09 	bl	8002ffc <_malloc_r>
 80031ea:	6028      	str	r0, [r5, #0]
 80031ec:	6128      	str	r0, [r5, #16]
 80031ee:	b930      	cbnz	r0, 80031fe <_svfiprintf_r+0x32>
 80031f0:	230c      	movs	r3, #12
 80031f2:	603b      	str	r3, [r7, #0]
 80031f4:	f04f 30ff 	mov.w	r0, #4294967295
 80031f8:	b01d      	add	sp, #116	@ 0x74
 80031fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031fe:	2340      	movs	r3, #64	@ 0x40
 8003200:	616b      	str	r3, [r5, #20]
 8003202:	2300      	movs	r3, #0
 8003204:	9309      	str	r3, [sp, #36]	@ 0x24
 8003206:	2320      	movs	r3, #32
 8003208:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800320c:	2330      	movs	r3, #48	@ 0x30
 800320e:	f04f 0901 	mov.w	r9, #1
 8003212:	f8cd 800c 	str.w	r8, [sp, #12]
 8003216:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80033b0 <_svfiprintf_r+0x1e4>
 800321a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800321e:	4623      	mov	r3, r4
 8003220:	469a      	mov	sl, r3
 8003222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003226:	b10a      	cbz	r2, 800322c <_svfiprintf_r+0x60>
 8003228:	2a25      	cmp	r2, #37	@ 0x25
 800322a:	d1f9      	bne.n	8003220 <_svfiprintf_r+0x54>
 800322c:	ebba 0b04 	subs.w	fp, sl, r4
 8003230:	d00b      	beq.n	800324a <_svfiprintf_r+0x7e>
 8003232:	465b      	mov	r3, fp
 8003234:	4622      	mov	r2, r4
 8003236:	4629      	mov	r1, r5
 8003238:	4638      	mov	r0, r7
 800323a:	f7ff ff6b 	bl	8003114 <__ssputs_r>
 800323e:	3001      	adds	r0, #1
 8003240:	f000 80a7 	beq.w	8003392 <_svfiprintf_r+0x1c6>
 8003244:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003246:	445a      	add	r2, fp
 8003248:	9209      	str	r2, [sp, #36]	@ 0x24
 800324a:	f89a 3000 	ldrb.w	r3, [sl]
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 809f 	beq.w	8003392 <_svfiprintf_r+0x1c6>
 8003254:	2300      	movs	r3, #0
 8003256:	f04f 32ff 	mov.w	r2, #4294967295
 800325a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800325e:	f10a 0a01 	add.w	sl, sl, #1
 8003262:	9304      	str	r3, [sp, #16]
 8003264:	9307      	str	r3, [sp, #28]
 8003266:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800326a:	931a      	str	r3, [sp, #104]	@ 0x68
 800326c:	4654      	mov	r4, sl
 800326e:	2205      	movs	r2, #5
 8003270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003274:	484e      	ldr	r0, [pc, #312]	@ (80033b0 <_svfiprintf_r+0x1e4>)
 8003276:	f000 fc33 	bl	8003ae0 <memchr>
 800327a:	9a04      	ldr	r2, [sp, #16]
 800327c:	b9d8      	cbnz	r0, 80032b6 <_svfiprintf_r+0xea>
 800327e:	06d0      	lsls	r0, r2, #27
 8003280:	bf44      	itt	mi
 8003282:	2320      	movmi	r3, #32
 8003284:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003288:	0711      	lsls	r1, r2, #28
 800328a:	bf44      	itt	mi
 800328c:	232b      	movmi	r3, #43	@ 0x2b
 800328e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003292:	f89a 3000 	ldrb.w	r3, [sl]
 8003296:	2b2a      	cmp	r3, #42	@ 0x2a
 8003298:	d015      	beq.n	80032c6 <_svfiprintf_r+0xfa>
 800329a:	4654      	mov	r4, sl
 800329c:	2000      	movs	r0, #0
 800329e:	f04f 0c0a 	mov.w	ip, #10
 80032a2:	9a07      	ldr	r2, [sp, #28]
 80032a4:	4621      	mov	r1, r4
 80032a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032aa:	3b30      	subs	r3, #48	@ 0x30
 80032ac:	2b09      	cmp	r3, #9
 80032ae:	d94b      	bls.n	8003348 <_svfiprintf_r+0x17c>
 80032b0:	b1b0      	cbz	r0, 80032e0 <_svfiprintf_r+0x114>
 80032b2:	9207      	str	r2, [sp, #28]
 80032b4:	e014      	b.n	80032e0 <_svfiprintf_r+0x114>
 80032b6:	eba0 0308 	sub.w	r3, r0, r8
 80032ba:	fa09 f303 	lsl.w	r3, r9, r3
 80032be:	4313      	orrs	r3, r2
 80032c0:	46a2      	mov	sl, r4
 80032c2:	9304      	str	r3, [sp, #16]
 80032c4:	e7d2      	b.n	800326c <_svfiprintf_r+0xa0>
 80032c6:	9b03      	ldr	r3, [sp, #12]
 80032c8:	1d19      	adds	r1, r3, #4
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	9103      	str	r1, [sp, #12]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	bfbb      	ittet	lt
 80032d2:	425b      	neglt	r3, r3
 80032d4:	f042 0202 	orrlt.w	r2, r2, #2
 80032d8:	9307      	strge	r3, [sp, #28]
 80032da:	9307      	strlt	r3, [sp, #28]
 80032dc:	bfb8      	it	lt
 80032de:	9204      	strlt	r2, [sp, #16]
 80032e0:	7823      	ldrb	r3, [r4, #0]
 80032e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80032e4:	d10a      	bne.n	80032fc <_svfiprintf_r+0x130>
 80032e6:	7863      	ldrb	r3, [r4, #1]
 80032e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80032ea:	d132      	bne.n	8003352 <_svfiprintf_r+0x186>
 80032ec:	9b03      	ldr	r3, [sp, #12]
 80032ee:	3402      	adds	r4, #2
 80032f0:	1d1a      	adds	r2, r3, #4
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	9203      	str	r2, [sp, #12]
 80032f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80032fa:	9305      	str	r3, [sp, #20]
 80032fc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80033b4 <_svfiprintf_r+0x1e8>
 8003300:	2203      	movs	r2, #3
 8003302:	4650      	mov	r0, sl
 8003304:	7821      	ldrb	r1, [r4, #0]
 8003306:	f000 fbeb 	bl	8003ae0 <memchr>
 800330a:	b138      	cbz	r0, 800331c <_svfiprintf_r+0x150>
 800330c:	2240      	movs	r2, #64	@ 0x40
 800330e:	9b04      	ldr	r3, [sp, #16]
 8003310:	eba0 000a 	sub.w	r0, r0, sl
 8003314:	4082      	lsls	r2, r0
 8003316:	4313      	orrs	r3, r2
 8003318:	3401      	adds	r4, #1
 800331a:	9304      	str	r3, [sp, #16]
 800331c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003320:	2206      	movs	r2, #6
 8003322:	4825      	ldr	r0, [pc, #148]	@ (80033b8 <_svfiprintf_r+0x1ec>)
 8003324:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003328:	f000 fbda 	bl	8003ae0 <memchr>
 800332c:	2800      	cmp	r0, #0
 800332e:	d036      	beq.n	800339e <_svfiprintf_r+0x1d2>
 8003330:	4b22      	ldr	r3, [pc, #136]	@ (80033bc <_svfiprintf_r+0x1f0>)
 8003332:	bb1b      	cbnz	r3, 800337c <_svfiprintf_r+0x1b0>
 8003334:	9b03      	ldr	r3, [sp, #12]
 8003336:	3307      	adds	r3, #7
 8003338:	f023 0307 	bic.w	r3, r3, #7
 800333c:	3308      	adds	r3, #8
 800333e:	9303      	str	r3, [sp, #12]
 8003340:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003342:	4433      	add	r3, r6
 8003344:	9309      	str	r3, [sp, #36]	@ 0x24
 8003346:	e76a      	b.n	800321e <_svfiprintf_r+0x52>
 8003348:	460c      	mov	r4, r1
 800334a:	2001      	movs	r0, #1
 800334c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003350:	e7a8      	b.n	80032a4 <_svfiprintf_r+0xd8>
 8003352:	2300      	movs	r3, #0
 8003354:	f04f 0c0a 	mov.w	ip, #10
 8003358:	4619      	mov	r1, r3
 800335a:	3401      	adds	r4, #1
 800335c:	9305      	str	r3, [sp, #20]
 800335e:	4620      	mov	r0, r4
 8003360:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003364:	3a30      	subs	r2, #48	@ 0x30
 8003366:	2a09      	cmp	r2, #9
 8003368:	d903      	bls.n	8003372 <_svfiprintf_r+0x1a6>
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0c6      	beq.n	80032fc <_svfiprintf_r+0x130>
 800336e:	9105      	str	r1, [sp, #20]
 8003370:	e7c4      	b.n	80032fc <_svfiprintf_r+0x130>
 8003372:	4604      	mov	r4, r0
 8003374:	2301      	movs	r3, #1
 8003376:	fb0c 2101 	mla	r1, ip, r1, r2
 800337a:	e7f0      	b.n	800335e <_svfiprintf_r+0x192>
 800337c:	ab03      	add	r3, sp, #12
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	462a      	mov	r2, r5
 8003382:	4638      	mov	r0, r7
 8003384:	4b0e      	ldr	r3, [pc, #56]	@ (80033c0 <_svfiprintf_r+0x1f4>)
 8003386:	a904      	add	r1, sp, #16
 8003388:	f3af 8000 	nop.w
 800338c:	1c42      	adds	r2, r0, #1
 800338e:	4606      	mov	r6, r0
 8003390:	d1d6      	bne.n	8003340 <_svfiprintf_r+0x174>
 8003392:	89ab      	ldrh	r3, [r5, #12]
 8003394:	065b      	lsls	r3, r3, #25
 8003396:	f53f af2d 	bmi.w	80031f4 <_svfiprintf_r+0x28>
 800339a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800339c:	e72c      	b.n	80031f8 <_svfiprintf_r+0x2c>
 800339e:	ab03      	add	r3, sp, #12
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	462a      	mov	r2, r5
 80033a4:	4638      	mov	r0, r7
 80033a6:	4b06      	ldr	r3, [pc, #24]	@ (80033c0 <_svfiprintf_r+0x1f4>)
 80033a8:	a904      	add	r1, sp, #16
 80033aa:	f000 f9bd 	bl	8003728 <_printf_i>
 80033ae:	e7ed      	b.n	800338c <_svfiprintf_r+0x1c0>
 80033b0:	08003efa 	.word	0x08003efa
 80033b4:	08003f00 	.word	0x08003f00
 80033b8:	08003f04 	.word	0x08003f04
 80033bc:	00000000 	.word	0x00000000
 80033c0:	08003115 	.word	0x08003115

080033c4 <__sfputc_r>:
 80033c4:	6893      	ldr	r3, [r2, #8]
 80033c6:	b410      	push	{r4}
 80033c8:	3b01      	subs	r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	6093      	str	r3, [r2, #8]
 80033ce:	da07      	bge.n	80033e0 <__sfputc_r+0x1c>
 80033d0:	6994      	ldr	r4, [r2, #24]
 80033d2:	42a3      	cmp	r3, r4
 80033d4:	db01      	blt.n	80033da <__sfputc_r+0x16>
 80033d6:	290a      	cmp	r1, #10
 80033d8:	d102      	bne.n	80033e0 <__sfputc_r+0x1c>
 80033da:	bc10      	pop	{r4}
 80033dc:	f000 bac2 	b.w	8003964 <__swbuf_r>
 80033e0:	6813      	ldr	r3, [r2, #0]
 80033e2:	1c58      	adds	r0, r3, #1
 80033e4:	6010      	str	r0, [r2, #0]
 80033e6:	7019      	strb	r1, [r3, #0]
 80033e8:	4608      	mov	r0, r1
 80033ea:	bc10      	pop	{r4}
 80033ec:	4770      	bx	lr

080033ee <__sfputs_r>:
 80033ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033f0:	4606      	mov	r6, r0
 80033f2:	460f      	mov	r7, r1
 80033f4:	4614      	mov	r4, r2
 80033f6:	18d5      	adds	r5, r2, r3
 80033f8:	42ac      	cmp	r4, r5
 80033fa:	d101      	bne.n	8003400 <__sfputs_r+0x12>
 80033fc:	2000      	movs	r0, #0
 80033fe:	e007      	b.n	8003410 <__sfputs_r+0x22>
 8003400:	463a      	mov	r2, r7
 8003402:	4630      	mov	r0, r6
 8003404:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003408:	f7ff ffdc 	bl	80033c4 <__sfputc_r>
 800340c:	1c43      	adds	r3, r0, #1
 800340e:	d1f3      	bne.n	80033f8 <__sfputs_r+0xa>
 8003410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003414 <_vfiprintf_r>:
 8003414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003418:	460d      	mov	r5, r1
 800341a:	4614      	mov	r4, r2
 800341c:	4698      	mov	r8, r3
 800341e:	4606      	mov	r6, r0
 8003420:	b09d      	sub	sp, #116	@ 0x74
 8003422:	b118      	cbz	r0, 800342c <_vfiprintf_r+0x18>
 8003424:	6a03      	ldr	r3, [r0, #32]
 8003426:	b90b      	cbnz	r3, 800342c <_vfiprintf_r+0x18>
 8003428:	f7ff fc40 	bl	8002cac <__sinit>
 800342c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800342e:	07d9      	lsls	r1, r3, #31
 8003430:	d405      	bmi.n	800343e <_vfiprintf_r+0x2a>
 8003432:	89ab      	ldrh	r3, [r5, #12]
 8003434:	059a      	lsls	r2, r3, #22
 8003436:	d402      	bmi.n	800343e <_vfiprintf_r+0x2a>
 8003438:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800343a:	f7ff fd72 	bl	8002f22 <__retarget_lock_acquire_recursive>
 800343e:	89ab      	ldrh	r3, [r5, #12]
 8003440:	071b      	lsls	r3, r3, #28
 8003442:	d501      	bpl.n	8003448 <_vfiprintf_r+0x34>
 8003444:	692b      	ldr	r3, [r5, #16]
 8003446:	b99b      	cbnz	r3, 8003470 <_vfiprintf_r+0x5c>
 8003448:	4629      	mov	r1, r5
 800344a:	4630      	mov	r0, r6
 800344c:	f000 fac8 	bl	80039e0 <__swsetup_r>
 8003450:	b170      	cbz	r0, 8003470 <_vfiprintf_r+0x5c>
 8003452:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003454:	07dc      	lsls	r4, r3, #31
 8003456:	d504      	bpl.n	8003462 <_vfiprintf_r+0x4e>
 8003458:	f04f 30ff 	mov.w	r0, #4294967295
 800345c:	b01d      	add	sp, #116	@ 0x74
 800345e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003462:	89ab      	ldrh	r3, [r5, #12]
 8003464:	0598      	lsls	r0, r3, #22
 8003466:	d4f7      	bmi.n	8003458 <_vfiprintf_r+0x44>
 8003468:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800346a:	f7ff fd5b 	bl	8002f24 <__retarget_lock_release_recursive>
 800346e:	e7f3      	b.n	8003458 <_vfiprintf_r+0x44>
 8003470:	2300      	movs	r3, #0
 8003472:	9309      	str	r3, [sp, #36]	@ 0x24
 8003474:	2320      	movs	r3, #32
 8003476:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800347a:	2330      	movs	r3, #48	@ 0x30
 800347c:	f04f 0901 	mov.w	r9, #1
 8003480:	f8cd 800c 	str.w	r8, [sp, #12]
 8003484:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003630 <_vfiprintf_r+0x21c>
 8003488:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800348c:	4623      	mov	r3, r4
 800348e:	469a      	mov	sl, r3
 8003490:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003494:	b10a      	cbz	r2, 800349a <_vfiprintf_r+0x86>
 8003496:	2a25      	cmp	r2, #37	@ 0x25
 8003498:	d1f9      	bne.n	800348e <_vfiprintf_r+0x7a>
 800349a:	ebba 0b04 	subs.w	fp, sl, r4
 800349e:	d00b      	beq.n	80034b8 <_vfiprintf_r+0xa4>
 80034a0:	465b      	mov	r3, fp
 80034a2:	4622      	mov	r2, r4
 80034a4:	4629      	mov	r1, r5
 80034a6:	4630      	mov	r0, r6
 80034a8:	f7ff ffa1 	bl	80033ee <__sfputs_r>
 80034ac:	3001      	adds	r0, #1
 80034ae:	f000 80a7 	beq.w	8003600 <_vfiprintf_r+0x1ec>
 80034b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80034b4:	445a      	add	r2, fp
 80034b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80034b8:	f89a 3000 	ldrb.w	r3, [sl]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 809f 	beq.w	8003600 <_vfiprintf_r+0x1ec>
 80034c2:	2300      	movs	r3, #0
 80034c4:	f04f 32ff 	mov.w	r2, #4294967295
 80034c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034cc:	f10a 0a01 	add.w	sl, sl, #1
 80034d0:	9304      	str	r3, [sp, #16]
 80034d2:	9307      	str	r3, [sp, #28]
 80034d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80034d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80034da:	4654      	mov	r4, sl
 80034dc:	2205      	movs	r2, #5
 80034de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034e2:	4853      	ldr	r0, [pc, #332]	@ (8003630 <_vfiprintf_r+0x21c>)
 80034e4:	f000 fafc 	bl	8003ae0 <memchr>
 80034e8:	9a04      	ldr	r2, [sp, #16]
 80034ea:	b9d8      	cbnz	r0, 8003524 <_vfiprintf_r+0x110>
 80034ec:	06d1      	lsls	r1, r2, #27
 80034ee:	bf44      	itt	mi
 80034f0:	2320      	movmi	r3, #32
 80034f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80034f6:	0713      	lsls	r3, r2, #28
 80034f8:	bf44      	itt	mi
 80034fa:	232b      	movmi	r3, #43	@ 0x2b
 80034fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003500:	f89a 3000 	ldrb.w	r3, [sl]
 8003504:	2b2a      	cmp	r3, #42	@ 0x2a
 8003506:	d015      	beq.n	8003534 <_vfiprintf_r+0x120>
 8003508:	4654      	mov	r4, sl
 800350a:	2000      	movs	r0, #0
 800350c:	f04f 0c0a 	mov.w	ip, #10
 8003510:	9a07      	ldr	r2, [sp, #28]
 8003512:	4621      	mov	r1, r4
 8003514:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003518:	3b30      	subs	r3, #48	@ 0x30
 800351a:	2b09      	cmp	r3, #9
 800351c:	d94b      	bls.n	80035b6 <_vfiprintf_r+0x1a2>
 800351e:	b1b0      	cbz	r0, 800354e <_vfiprintf_r+0x13a>
 8003520:	9207      	str	r2, [sp, #28]
 8003522:	e014      	b.n	800354e <_vfiprintf_r+0x13a>
 8003524:	eba0 0308 	sub.w	r3, r0, r8
 8003528:	fa09 f303 	lsl.w	r3, r9, r3
 800352c:	4313      	orrs	r3, r2
 800352e:	46a2      	mov	sl, r4
 8003530:	9304      	str	r3, [sp, #16]
 8003532:	e7d2      	b.n	80034da <_vfiprintf_r+0xc6>
 8003534:	9b03      	ldr	r3, [sp, #12]
 8003536:	1d19      	adds	r1, r3, #4
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	9103      	str	r1, [sp, #12]
 800353c:	2b00      	cmp	r3, #0
 800353e:	bfbb      	ittet	lt
 8003540:	425b      	neglt	r3, r3
 8003542:	f042 0202 	orrlt.w	r2, r2, #2
 8003546:	9307      	strge	r3, [sp, #28]
 8003548:	9307      	strlt	r3, [sp, #28]
 800354a:	bfb8      	it	lt
 800354c:	9204      	strlt	r2, [sp, #16]
 800354e:	7823      	ldrb	r3, [r4, #0]
 8003550:	2b2e      	cmp	r3, #46	@ 0x2e
 8003552:	d10a      	bne.n	800356a <_vfiprintf_r+0x156>
 8003554:	7863      	ldrb	r3, [r4, #1]
 8003556:	2b2a      	cmp	r3, #42	@ 0x2a
 8003558:	d132      	bne.n	80035c0 <_vfiprintf_r+0x1ac>
 800355a:	9b03      	ldr	r3, [sp, #12]
 800355c:	3402      	adds	r4, #2
 800355e:	1d1a      	adds	r2, r3, #4
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	9203      	str	r2, [sp, #12]
 8003564:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003568:	9305      	str	r3, [sp, #20]
 800356a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003634 <_vfiprintf_r+0x220>
 800356e:	2203      	movs	r2, #3
 8003570:	4650      	mov	r0, sl
 8003572:	7821      	ldrb	r1, [r4, #0]
 8003574:	f000 fab4 	bl	8003ae0 <memchr>
 8003578:	b138      	cbz	r0, 800358a <_vfiprintf_r+0x176>
 800357a:	2240      	movs	r2, #64	@ 0x40
 800357c:	9b04      	ldr	r3, [sp, #16]
 800357e:	eba0 000a 	sub.w	r0, r0, sl
 8003582:	4082      	lsls	r2, r0
 8003584:	4313      	orrs	r3, r2
 8003586:	3401      	adds	r4, #1
 8003588:	9304      	str	r3, [sp, #16]
 800358a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800358e:	2206      	movs	r2, #6
 8003590:	4829      	ldr	r0, [pc, #164]	@ (8003638 <_vfiprintf_r+0x224>)
 8003592:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003596:	f000 faa3 	bl	8003ae0 <memchr>
 800359a:	2800      	cmp	r0, #0
 800359c:	d03f      	beq.n	800361e <_vfiprintf_r+0x20a>
 800359e:	4b27      	ldr	r3, [pc, #156]	@ (800363c <_vfiprintf_r+0x228>)
 80035a0:	bb1b      	cbnz	r3, 80035ea <_vfiprintf_r+0x1d6>
 80035a2:	9b03      	ldr	r3, [sp, #12]
 80035a4:	3307      	adds	r3, #7
 80035a6:	f023 0307 	bic.w	r3, r3, #7
 80035aa:	3308      	adds	r3, #8
 80035ac:	9303      	str	r3, [sp, #12]
 80035ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80035b0:	443b      	add	r3, r7
 80035b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80035b4:	e76a      	b.n	800348c <_vfiprintf_r+0x78>
 80035b6:	460c      	mov	r4, r1
 80035b8:	2001      	movs	r0, #1
 80035ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80035be:	e7a8      	b.n	8003512 <_vfiprintf_r+0xfe>
 80035c0:	2300      	movs	r3, #0
 80035c2:	f04f 0c0a 	mov.w	ip, #10
 80035c6:	4619      	mov	r1, r3
 80035c8:	3401      	adds	r4, #1
 80035ca:	9305      	str	r3, [sp, #20]
 80035cc:	4620      	mov	r0, r4
 80035ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035d2:	3a30      	subs	r2, #48	@ 0x30
 80035d4:	2a09      	cmp	r2, #9
 80035d6:	d903      	bls.n	80035e0 <_vfiprintf_r+0x1cc>
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0c6      	beq.n	800356a <_vfiprintf_r+0x156>
 80035dc:	9105      	str	r1, [sp, #20]
 80035de:	e7c4      	b.n	800356a <_vfiprintf_r+0x156>
 80035e0:	4604      	mov	r4, r0
 80035e2:	2301      	movs	r3, #1
 80035e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80035e8:	e7f0      	b.n	80035cc <_vfiprintf_r+0x1b8>
 80035ea:	ab03      	add	r3, sp, #12
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	462a      	mov	r2, r5
 80035f0:	4630      	mov	r0, r6
 80035f2:	4b13      	ldr	r3, [pc, #76]	@ (8003640 <_vfiprintf_r+0x22c>)
 80035f4:	a904      	add	r1, sp, #16
 80035f6:	f3af 8000 	nop.w
 80035fa:	4607      	mov	r7, r0
 80035fc:	1c78      	adds	r0, r7, #1
 80035fe:	d1d6      	bne.n	80035ae <_vfiprintf_r+0x19a>
 8003600:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003602:	07d9      	lsls	r1, r3, #31
 8003604:	d405      	bmi.n	8003612 <_vfiprintf_r+0x1fe>
 8003606:	89ab      	ldrh	r3, [r5, #12]
 8003608:	059a      	lsls	r2, r3, #22
 800360a:	d402      	bmi.n	8003612 <_vfiprintf_r+0x1fe>
 800360c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800360e:	f7ff fc89 	bl	8002f24 <__retarget_lock_release_recursive>
 8003612:	89ab      	ldrh	r3, [r5, #12]
 8003614:	065b      	lsls	r3, r3, #25
 8003616:	f53f af1f 	bmi.w	8003458 <_vfiprintf_r+0x44>
 800361a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800361c:	e71e      	b.n	800345c <_vfiprintf_r+0x48>
 800361e:	ab03      	add	r3, sp, #12
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	462a      	mov	r2, r5
 8003624:	4630      	mov	r0, r6
 8003626:	4b06      	ldr	r3, [pc, #24]	@ (8003640 <_vfiprintf_r+0x22c>)
 8003628:	a904      	add	r1, sp, #16
 800362a:	f000 f87d 	bl	8003728 <_printf_i>
 800362e:	e7e4      	b.n	80035fa <_vfiprintf_r+0x1e6>
 8003630:	08003efa 	.word	0x08003efa
 8003634:	08003f00 	.word	0x08003f00
 8003638:	08003f04 	.word	0x08003f04
 800363c:	00000000 	.word	0x00000000
 8003640:	080033ef 	.word	0x080033ef

08003644 <_printf_common>:
 8003644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003648:	4616      	mov	r6, r2
 800364a:	4698      	mov	r8, r3
 800364c:	688a      	ldr	r2, [r1, #8]
 800364e:	690b      	ldr	r3, [r1, #16]
 8003650:	4607      	mov	r7, r0
 8003652:	4293      	cmp	r3, r2
 8003654:	bfb8      	it	lt
 8003656:	4613      	movlt	r3, r2
 8003658:	6033      	str	r3, [r6, #0]
 800365a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800365e:	460c      	mov	r4, r1
 8003660:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003664:	b10a      	cbz	r2, 800366a <_printf_common+0x26>
 8003666:	3301      	adds	r3, #1
 8003668:	6033      	str	r3, [r6, #0]
 800366a:	6823      	ldr	r3, [r4, #0]
 800366c:	0699      	lsls	r1, r3, #26
 800366e:	bf42      	ittt	mi
 8003670:	6833      	ldrmi	r3, [r6, #0]
 8003672:	3302      	addmi	r3, #2
 8003674:	6033      	strmi	r3, [r6, #0]
 8003676:	6825      	ldr	r5, [r4, #0]
 8003678:	f015 0506 	ands.w	r5, r5, #6
 800367c:	d106      	bne.n	800368c <_printf_common+0x48>
 800367e:	f104 0a19 	add.w	sl, r4, #25
 8003682:	68e3      	ldr	r3, [r4, #12]
 8003684:	6832      	ldr	r2, [r6, #0]
 8003686:	1a9b      	subs	r3, r3, r2
 8003688:	42ab      	cmp	r3, r5
 800368a:	dc2b      	bgt.n	80036e4 <_printf_common+0xa0>
 800368c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003690:	6822      	ldr	r2, [r4, #0]
 8003692:	3b00      	subs	r3, #0
 8003694:	bf18      	it	ne
 8003696:	2301      	movne	r3, #1
 8003698:	0692      	lsls	r2, r2, #26
 800369a:	d430      	bmi.n	80036fe <_printf_common+0xba>
 800369c:	4641      	mov	r1, r8
 800369e:	4638      	mov	r0, r7
 80036a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80036a4:	47c8      	blx	r9
 80036a6:	3001      	adds	r0, #1
 80036a8:	d023      	beq.n	80036f2 <_printf_common+0xae>
 80036aa:	6823      	ldr	r3, [r4, #0]
 80036ac:	6922      	ldr	r2, [r4, #16]
 80036ae:	f003 0306 	and.w	r3, r3, #6
 80036b2:	2b04      	cmp	r3, #4
 80036b4:	bf14      	ite	ne
 80036b6:	2500      	movne	r5, #0
 80036b8:	6833      	ldreq	r3, [r6, #0]
 80036ba:	f04f 0600 	mov.w	r6, #0
 80036be:	bf08      	it	eq
 80036c0:	68e5      	ldreq	r5, [r4, #12]
 80036c2:	f104 041a 	add.w	r4, r4, #26
 80036c6:	bf08      	it	eq
 80036c8:	1aed      	subeq	r5, r5, r3
 80036ca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80036ce:	bf08      	it	eq
 80036d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036d4:	4293      	cmp	r3, r2
 80036d6:	bfc4      	itt	gt
 80036d8:	1a9b      	subgt	r3, r3, r2
 80036da:	18ed      	addgt	r5, r5, r3
 80036dc:	42b5      	cmp	r5, r6
 80036de:	d11a      	bne.n	8003716 <_printf_common+0xd2>
 80036e0:	2000      	movs	r0, #0
 80036e2:	e008      	b.n	80036f6 <_printf_common+0xb2>
 80036e4:	2301      	movs	r3, #1
 80036e6:	4652      	mov	r2, sl
 80036e8:	4641      	mov	r1, r8
 80036ea:	4638      	mov	r0, r7
 80036ec:	47c8      	blx	r9
 80036ee:	3001      	adds	r0, #1
 80036f0:	d103      	bne.n	80036fa <_printf_common+0xb6>
 80036f2:	f04f 30ff 	mov.w	r0, #4294967295
 80036f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036fa:	3501      	adds	r5, #1
 80036fc:	e7c1      	b.n	8003682 <_printf_common+0x3e>
 80036fe:	2030      	movs	r0, #48	@ 0x30
 8003700:	18e1      	adds	r1, r4, r3
 8003702:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003706:	1c5a      	adds	r2, r3, #1
 8003708:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800370c:	4422      	add	r2, r4
 800370e:	3302      	adds	r3, #2
 8003710:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003714:	e7c2      	b.n	800369c <_printf_common+0x58>
 8003716:	2301      	movs	r3, #1
 8003718:	4622      	mov	r2, r4
 800371a:	4641      	mov	r1, r8
 800371c:	4638      	mov	r0, r7
 800371e:	47c8      	blx	r9
 8003720:	3001      	adds	r0, #1
 8003722:	d0e6      	beq.n	80036f2 <_printf_common+0xae>
 8003724:	3601      	adds	r6, #1
 8003726:	e7d9      	b.n	80036dc <_printf_common+0x98>

08003728 <_printf_i>:
 8003728:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800372c:	7e0f      	ldrb	r7, [r1, #24]
 800372e:	4691      	mov	r9, r2
 8003730:	2f78      	cmp	r7, #120	@ 0x78
 8003732:	4680      	mov	r8, r0
 8003734:	460c      	mov	r4, r1
 8003736:	469a      	mov	sl, r3
 8003738:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800373a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800373e:	d807      	bhi.n	8003750 <_printf_i+0x28>
 8003740:	2f62      	cmp	r7, #98	@ 0x62
 8003742:	d80a      	bhi.n	800375a <_printf_i+0x32>
 8003744:	2f00      	cmp	r7, #0
 8003746:	f000 80d1 	beq.w	80038ec <_printf_i+0x1c4>
 800374a:	2f58      	cmp	r7, #88	@ 0x58
 800374c:	f000 80b8 	beq.w	80038c0 <_printf_i+0x198>
 8003750:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003754:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003758:	e03a      	b.n	80037d0 <_printf_i+0xa8>
 800375a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800375e:	2b15      	cmp	r3, #21
 8003760:	d8f6      	bhi.n	8003750 <_printf_i+0x28>
 8003762:	a101      	add	r1, pc, #4	@ (adr r1, 8003768 <_printf_i+0x40>)
 8003764:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003768:	080037c1 	.word	0x080037c1
 800376c:	080037d5 	.word	0x080037d5
 8003770:	08003751 	.word	0x08003751
 8003774:	08003751 	.word	0x08003751
 8003778:	08003751 	.word	0x08003751
 800377c:	08003751 	.word	0x08003751
 8003780:	080037d5 	.word	0x080037d5
 8003784:	08003751 	.word	0x08003751
 8003788:	08003751 	.word	0x08003751
 800378c:	08003751 	.word	0x08003751
 8003790:	08003751 	.word	0x08003751
 8003794:	080038d3 	.word	0x080038d3
 8003798:	080037ff 	.word	0x080037ff
 800379c:	0800388d 	.word	0x0800388d
 80037a0:	08003751 	.word	0x08003751
 80037a4:	08003751 	.word	0x08003751
 80037a8:	080038f5 	.word	0x080038f5
 80037ac:	08003751 	.word	0x08003751
 80037b0:	080037ff 	.word	0x080037ff
 80037b4:	08003751 	.word	0x08003751
 80037b8:	08003751 	.word	0x08003751
 80037bc:	08003895 	.word	0x08003895
 80037c0:	6833      	ldr	r3, [r6, #0]
 80037c2:	1d1a      	adds	r2, r3, #4
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6032      	str	r2, [r6, #0]
 80037c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80037d0:	2301      	movs	r3, #1
 80037d2:	e09c      	b.n	800390e <_printf_i+0x1e6>
 80037d4:	6833      	ldr	r3, [r6, #0]
 80037d6:	6820      	ldr	r0, [r4, #0]
 80037d8:	1d19      	adds	r1, r3, #4
 80037da:	6031      	str	r1, [r6, #0]
 80037dc:	0606      	lsls	r6, r0, #24
 80037de:	d501      	bpl.n	80037e4 <_printf_i+0xbc>
 80037e0:	681d      	ldr	r5, [r3, #0]
 80037e2:	e003      	b.n	80037ec <_printf_i+0xc4>
 80037e4:	0645      	lsls	r5, r0, #25
 80037e6:	d5fb      	bpl.n	80037e0 <_printf_i+0xb8>
 80037e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80037ec:	2d00      	cmp	r5, #0
 80037ee:	da03      	bge.n	80037f8 <_printf_i+0xd0>
 80037f0:	232d      	movs	r3, #45	@ 0x2d
 80037f2:	426d      	negs	r5, r5
 80037f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80037f8:	230a      	movs	r3, #10
 80037fa:	4858      	ldr	r0, [pc, #352]	@ (800395c <_printf_i+0x234>)
 80037fc:	e011      	b.n	8003822 <_printf_i+0xfa>
 80037fe:	6821      	ldr	r1, [r4, #0]
 8003800:	6833      	ldr	r3, [r6, #0]
 8003802:	0608      	lsls	r0, r1, #24
 8003804:	f853 5b04 	ldr.w	r5, [r3], #4
 8003808:	d402      	bmi.n	8003810 <_printf_i+0xe8>
 800380a:	0649      	lsls	r1, r1, #25
 800380c:	bf48      	it	mi
 800380e:	b2ad      	uxthmi	r5, r5
 8003810:	2f6f      	cmp	r7, #111	@ 0x6f
 8003812:	6033      	str	r3, [r6, #0]
 8003814:	bf14      	ite	ne
 8003816:	230a      	movne	r3, #10
 8003818:	2308      	moveq	r3, #8
 800381a:	4850      	ldr	r0, [pc, #320]	@ (800395c <_printf_i+0x234>)
 800381c:	2100      	movs	r1, #0
 800381e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003822:	6866      	ldr	r6, [r4, #4]
 8003824:	2e00      	cmp	r6, #0
 8003826:	60a6      	str	r6, [r4, #8]
 8003828:	db05      	blt.n	8003836 <_printf_i+0x10e>
 800382a:	6821      	ldr	r1, [r4, #0]
 800382c:	432e      	orrs	r6, r5
 800382e:	f021 0104 	bic.w	r1, r1, #4
 8003832:	6021      	str	r1, [r4, #0]
 8003834:	d04b      	beq.n	80038ce <_printf_i+0x1a6>
 8003836:	4616      	mov	r6, r2
 8003838:	fbb5 f1f3 	udiv	r1, r5, r3
 800383c:	fb03 5711 	mls	r7, r3, r1, r5
 8003840:	5dc7      	ldrb	r7, [r0, r7]
 8003842:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003846:	462f      	mov	r7, r5
 8003848:	42bb      	cmp	r3, r7
 800384a:	460d      	mov	r5, r1
 800384c:	d9f4      	bls.n	8003838 <_printf_i+0x110>
 800384e:	2b08      	cmp	r3, #8
 8003850:	d10b      	bne.n	800386a <_printf_i+0x142>
 8003852:	6823      	ldr	r3, [r4, #0]
 8003854:	07df      	lsls	r7, r3, #31
 8003856:	d508      	bpl.n	800386a <_printf_i+0x142>
 8003858:	6923      	ldr	r3, [r4, #16]
 800385a:	6861      	ldr	r1, [r4, #4]
 800385c:	4299      	cmp	r1, r3
 800385e:	bfde      	ittt	le
 8003860:	2330      	movle	r3, #48	@ 0x30
 8003862:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003866:	f106 36ff 	addle.w	r6, r6, #4294967295
 800386a:	1b92      	subs	r2, r2, r6
 800386c:	6122      	str	r2, [r4, #16]
 800386e:	464b      	mov	r3, r9
 8003870:	4621      	mov	r1, r4
 8003872:	4640      	mov	r0, r8
 8003874:	f8cd a000 	str.w	sl, [sp]
 8003878:	aa03      	add	r2, sp, #12
 800387a:	f7ff fee3 	bl	8003644 <_printf_common>
 800387e:	3001      	adds	r0, #1
 8003880:	d14a      	bne.n	8003918 <_printf_i+0x1f0>
 8003882:	f04f 30ff 	mov.w	r0, #4294967295
 8003886:	b004      	add	sp, #16
 8003888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800388c:	6823      	ldr	r3, [r4, #0]
 800388e:	f043 0320 	orr.w	r3, r3, #32
 8003892:	6023      	str	r3, [r4, #0]
 8003894:	2778      	movs	r7, #120	@ 0x78
 8003896:	4832      	ldr	r0, [pc, #200]	@ (8003960 <_printf_i+0x238>)
 8003898:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800389c:	6823      	ldr	r3, [r4, #0]
 800389e:	6831      	ldr	r1, [r6, #0]
 80038a0:	061f      	lsls	r7, r3, #24
 80038a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80038a6:	d402      	bmi.n	80038ae <_printf_i+0x186>
 80038a8:	065f      	lsls	r7, r3, #25
 80038aa:	bf48      	it	mi
 80038ac:	b2ad      	uxthmi	r5, r5
 80038ae:	6031      	str	r1, [r6, #0]
 80038b0:	07d9      	lsls	r1, r3, #31
 80038b2:	bf44      	itt	mi
 80038b4:	f043 0320 	orrmi.w	r3, r3, #32
 80038b8:	6023      	strmi	r3, [r4, #0]
 80038ba:	b11d      	cbz	r5, 80038c4 <_printf_i+0x19c>
 80038bc:	2310      	movs	r3, #16
 80038be:	e7ad      	b.n	800381c <_printf_i+0xf4>
 80038c0:	4826      	ldr	r0, [pc, #152]	@ (800395c <_printf_i+0x234>)
 80038c2:	e7e9      	b.n	8003898 <_printf_i+0x170>
 80038c4:	6823      	ldr	r3, [r4, #0]
 80038c6:	f023 0320 	bic.w	r3, r3, #32
 80038ca:	6023      	str	r3, [r4, #0]
 80038cc:	e7f6      	b.n	80038bc <_printf_i+0x194>
 80038ce:	4616      	mov	r6, r2
 80038d0:	e7bd      	b.n	800384e <_printf_i+0x126>
 80038d2:	6833      	ldr	r3, [r6, #0]
 80038d4:	6825      	ldr	r5, [r4, #0]
 80038d6:	1d18      	adds	r0, r3, #4
 80038d8:	6961      	ldr	r1, [r4, #20]
 80038da:	6030      	str	r0, [r6, #0]
 80038dc:	062e      	lsls	r6, r5, #24
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	d501      	bpl.n	80038e6 <_printf_i+0x1be>
 80038e2:	6019      	str	r1, [r3, #0]
 80038e4:	e002      	b.n	80038ec <_printf_i+0x1c4>
 80038e6:	0668      	lsls	r0, r5, #25
 80038e8:	d5fb      	bpl.n	80038e2 <_printf_i+0x1ba>
 80038ea:	8019      	strh	r1, [r3, #0]
 80038ec:	2300      	movs	r3, #0
 80038ee:	4616      	mov	r6, r2
 80038f0:	6123      	str	r3, [r4, #16]
 80038f2:	e7bc      	b.n	800386e <_printf_i+0x146>
 80038f4:	6833      	ldr	r3, [r6, #0]
 80038f6:	2100      	movs	r1, #0
 80038f8:	1d1a      	adds	r2, r3, #4
 80038fa:	6032      	str	r2, [r6, #0]
 80038fc:	681e      	ldr	r6, [r3, #0]
 80038fe:	6862      	ldr	r2, [r4, #4]
 8003900:	4630      	mov	r0, r6
 8003902:	f000 f8ed 	bl	8003ae0 <memchr>
 8003906:	b108      	cbz	r0, 800390c <_printf_i+0x1e4>
 8003908:	1b80      	subs	r0, r0, r6
 800390a:	6060      	str	r0, [r4, #4]
 800390c:	6863      	ldr	r3, [r4, #4]
 800390e:	6123      	str	r3, [r4, #16]
 8003910:	2300      	movs	r3, #0
 8003912:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003916:	e7aa      	b.n	800386e <_printf_i+0x146>
 8003918:	4632      	mov	r2, r6
 800391a:	4649      	mov	r1, r9
 800391c:	4640      	mov	r0, r8
 800391e:	6923      	ldr	r3, [r4, #16]
 8003920:	47d0      	blx	sl
 8003922:	3001      	adds	r0, #1
 8003924:	d0ad      	beq.n	8003882 <_printf_i+0x15a>
 8003926:	6823      	ldr	r3, [r4, #0]
 8003928:	079b      	lsls	r3, r3, #30
 800392a:	d413      	bmi.n	8003954 <_printf_i+0x22c>
 800392c:	68e0      	ldr	r0, [r4, #12]
 800392e:	9b03      	ldr	r3, [sp, #12]
 8003930:	4298      	cmp	r0, r3
 8003932:	bfb8      	it	lt
 8003934:	4618      	movlt	r0, r3
 8003936:	e7a6      	b.n	8003886 <_printf_i+0x15e>
 8003938:	2301      	movs	r3, #1
 800393a:	4632      	mov	r2, r6
 800393c:	4649      	mov	r1, r9
 800393e:	4640      	mov	r0, r8
 8003940:	47d0      	blx	sl
 8003942:	3001      	adds	r0, #1
 8003944:	d09d      	beq.n	8003882 <_printf_i+0x15a>
 8003946:	3501      	adds	r5, #1
 8003948:	68e3      	ldr	r3, [r4, #12]
 800394a:	9903      	ldr	r1, [sp, #12]
 800394c:	1a5b      	subs	r3, r3, r1
 800394e:	42ab      	cmp	r3, r5
 8003950:	dcf2      	bgt.n	8003938 <_printf_i+0x210>
 8003952:	e7eb      	b.n	800392c <_printf_i+0x204>
 8003954:	2500      	movs	r5, #0
 8003956:	f104 0619 	add.w	r6, r4, #25
 800395a:	e7f5      	b.n	8003948 <_printf_i+0x220>
 800395c:	08003f0b 	.word	0x08003f0b
 8003960:	08003f1c 	.word	0x08003f1c

08003964 <__swbuf_r>:
 8003964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003966:	460e      	mov	r6, r1
 8003968:	4614      	mov	r4, r2
 800396a:	4605      	mov	r5, r0
 800396c:	b118      	cbz	r0, 8003976 <__swbuf_r+0x12>
 800396e:	6a03      	ldr	r3, [r0, #32]
 8003970:	b90b      	cbnz	r3, 8003976 <__swbuf_r+0x12>
 8003972:	f7ff f99b 	bl	8002cac <__sinit>
 8003976:	69a3      	ldr	r3, [r4, #24]
 8003978:	60a3      	str	r3, [r4, #8]
 800397a:	89a3      	ldrh	r3, [r4, #12]
 800397c:	071a      	lsls	r2, r3, #28
 800397e:	d501      	bpl.n	8003984 <__swbuf_r+0x20>
 8003980:	6923      	ldr	r3, [r4, #16]
 8003982:	b943      	cbnz	r3, 8003996 <__swbuf_r+0x32>
 8003984:	4621      	mov	r1, r4
 8003986:	4628      	mov	r0, r5
 8003988:	f000 f82a 	bl	80039e0 <__swsetup_r>
 800398c:	b118      	cbz	r0, 8003996 <__swbuf_r+0x32>
 800398e:	f04f 37ff 	mov.w	r7, #4294967295
 8003992:	4638      	mov	r0, r7
 8003994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003996:	6823      	ldr	r3, [r4, #0]
 8003998:	6922      	ldr	r2, [r4, #16]
 800399a:	b2f6      	uxtb	r6, r6
 800399c:	1a98      	subs	r0, r3, r2
 800399e:	6963      	ldr	r3, [r4, #20]
 80039a0:	4637      	mov	r7, r6
 80039a2:	4283      	cmp	r3, r0
 80039a4:	dc05      	bgt.n	80039b2 <__swbuf_r+0x4e>
 80039a6:	4621      	mov	r1, r4
 80039a8:	4628      	mov	r0, r5
 80039aa:	f7ff f8b7 	bl	8002b1c <_fflush_r>
 80039ae:	2800      	cmp	r0, #0
 80039b0:	d1ed      	bne.n	800398e <__swbuf_r+0x2a>
 80039b2:	68a3      	ldr	r3, [r4, #8]
 80039b4:	3b01      	subs	r3, #1
 80039b6:	60a3      	str	r3, [r4, #8]
 80039b8:	6823      	ldr	r3, [r4, #0]
 80039ba:	1c5a      	adds	r2, r3, #1
 80039bc:	6022      	str	r2, [r4, #0]
 80039be:	701e      	strb	r6, [r3, #0]
 80039c0:	6962      	ldr	r2, [r4, #20]
 80039c2:	1c43      	adds	r3, r0, #1
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d004      	beq.n	80039d2 <__swbuf_r+0x6e>
 80039c8:	89a3      	ldrh	r3, [r4, #12]
 80039ca:	07db      	lsls	r3, r3, #31
 80039cc:	d5e1      	bpl.n	8003992 <__swbuf_r+0x2e>
 80039ce:	2e0a      	cmp	r6, #10
 80039d0:	d1df      	bne.n	8003992 <__swbuf_r+0x2e>
 80039d2:	4621      	mov	r1, r4
 80039d4:	4628      	mov	r0, r5
 80039d6:	f7ff f8a1 	bl	8002b1c <_fflush_r>
 80039da:	2800      	cmp	r0, #0
 80039dc:	d0d9      	beq.n	8003992 <__swbuf_r+0x2e>
 80039de:	e7d6      	b.n	800398e <__swbuf_r+0x2a>

080039e0 <__swsetup_r>:
 80039e0:	b538      	push	{r3, r4, r5, lr}
 80039e2:	4b29      	ldr	r3, [pc, #164]	@ (8003a88 <__swsetup_r+0xa8>)
 80039e4:	4605      	mov	r5, r0
 80039e6:	6818      	ldr	r0, [r3, #0]
 80039e8:	460c      	mov	r4, r1
 80039ea:	b118      	cbz	r0, 80039f4 <__swsetup_r+0x14>
 80039ec:	6a03      	ldr	r3, [r0, #32]
 80039ee:	b90b      	cbnz	r3, 80039f4 <__swsetup_r+0x14>
 80039f0:	f7ff f95c 	bl	8002cac <__sinit>
 80039f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039f8:	0719      	lsls	r1, r3, #28
 80039fa:	d422      	bmi.n	8003a42 <__swsetup_r+0x62>
 80039fc:	06da      	lsls	r2, r3, #27
 80039fe:	d407      	bmi.n	8003a10 <__swsetup_r+0x30>
 8003a00:	2209      	movs	r2, #9
 8003a02:	602a      	str	r2, [r5, #0]
 8003a04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a08:	f04f 30ff 	mov.w	r0, #4294967295
 8003a0c:	81a3      	strh	r3, [r4, #12]
 8003a0e:	e033      	b.n	8003a78 <__swsetup_r+0x98>
 8003a10:	0758      	lsls	r0, r3, #29
 8003a12:	d512      	bpl.n	8003a3a <__swsetup_r+0x5a>
 8003a14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a16:	b141      	cbz	r1, 8003a2a <__swsetup_r+0x4a>
 8003a18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a1c:	4299      	cmp	r1, r3
 8003a1e:	d002      	beq.n	8003a26 <__swsetup_r+0x46>
 8003a20:	4628      	mov	r0, r5
 8003a22:	f7ff fa81 	bl	8002f28 <_free_r>
 8003a26:	2300      	movs	r3, #0
 8003a28:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a2a:	89a3      	ldrh	r3, [r4, #12]
 8003a2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003a30:	81a3      	strh	r3, [r4, #12]
 8003a32:	2300      	movs	r3, #0
 8003a34:	6063      	str	r3, [r4, #4]
 8003a36:	6923      	ldr	r3, [r4, #16]
 8003a38:	6023      	str	r3, [r4, #0]
 8003a3a:	89a3      	ldrh	r3, [r4, #12]
 8003a3c:	f043 0308 	orr.w	r3, r3, #8
 8003a40:	81a3      	strh	r3, [r4, #12]
 8003a42:	6923      	ldr	r3, [r4, #16]
 8003a44:	b94b      	cbnz	r3, 8003a5a <__swsetup_r+0x7a>
 8003a46:	89a3      	ldrh	r3, [r4, #12]
 8003a48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003a4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a50:	d003      	beq.n	8003a5a <__swsetup_r+0x7a>
 8003a52:	4621      	mov	r1, r4
 8003a54:	4628      	mov	r0, r5
 8003a56:	f000 f8b2 	bl	8003bbe <__smakebuf_r>
 8003a5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a5e:	f013 0201 	ands.w	r2, r3, #1
 8003a62:	d00a      	beq.n	8003a7a <__swsetup_r+0x9a>
 8003a64:	2200      	movs	r2, #0
 8003a66:	60a2      	str	r2, [r4, #8]
 8003a68:	6962      	ldr	r2, [r4, #20]
 8003a6a:	4252      	negs	r2, r2
 8003a6c:	61a2      	str	r2, [r4, #24]
 8003a6e:	6922      	ldr	r2, [r4, #16]
 8003a70:	b942      	cbnz	r2, 8003a84 <__swsetup_r+0xa4>
 8003a72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003a76:	d1c5      	bne.n	8003a04 <__swsetup_r+0x24>
 8003a78:	bd38      	pop	{r3, r4, r5, pc}
 8003a7a:	0799      	lsls	r1, r3, #30
 8003a7c:	bf58      	it	pl
 8003a7e:	6962      	ldrpl	r2, [r4, #20]
 8003a80:	60a2      	str	r2, [r4, #8]
 8003a82:	e7f4      	b.n	8003a6e <__swsetup_r+0x8e>
 8003a84:	2000      	movs	r0, #0
 8003a86:	e7f7      	b.n	8003a78 <__swsetup_r+0x98>
 8003a88:	2000003c 	.word	0x2000003c

08003a8c <memmove>:
 8003a8c:	4288      	cmp	r0, r1
 8003a8e:	b510      	push	{r4, lr}
 8003a90:	eb01 0402 	add.w	r4, r1, r2
 8003a94:	d902      	bls.n	8003a9c <memmove+0x10>
 8003a96:	4284      	cmp	r4, r0
 8003a98:	4623      	mov	r3, r4
 8003a9a:	d807      	bhi.n	8003aac <memmove+0x20>
 8003a9c:	1e43      	subs	r3, r0, #1
 8003a9e:	42a1      	cmp	r1, r4
 8003aa0:	d008      	beq.n	8003ab4 <memmove+0x28>
 8003aa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003aa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003aaa:	e7f8      	b.n	8003a9e <memmove+0x12>
 8003aac:	4601      	mov	r1, r0
 8003aae:	4402      	add	r2, r0
 8003ab0:	428a      	cmp	r2, r1
 8003ab2:	d100      	bne.n	8003ab6 <memmove+0x2a>
 8003ab4:	bd10      	pop	{r4, pc}
 8003ab6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003aba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003abe:	e7f7      	b.n	8003ab0 <memmove+0x24>

08003ac0 <_sbrk_r>:
 8003ac0:	b538      	push	{r3, r4, r5, lr}
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	4d05      	ldr	r5, [pc, #20]	@ (8003adc <_sbrk_r+0x1c>)
 8003ac6:	4604      	mov	r4, r0
 8003ac8:	4608      	mov	r0, r1
 8003aca:	602b      	str	r3, [r5, #0]
 8003acc:	f7fc fd30 	bl	8000530 <_sbrk>
 8003ad0:	1c43      	adds	r3, r0, #1
 8003ad2:	d102      	bne.n	8003ada <_sbrk_r+0x1a>
 8003ad4:	682b      	ldr	r3, [r5, #0]
 8003ad6:	b103      	cbz	r3, 8003ada <_sbrk_r+0x1a>
 8003ad8:	6023      	str	r3, [r4, #0]
 8003ada:	bd38      	pop	{r3, r4, r5, pc}
 8003adc:	20000384 	.word	0x20000384

08003ae0 <memchr>:
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	b510      	push	{r4, lr}
 8003ae4:	b2c9      	uxtb	r1, r1
 8003ae6:	4402      	add	r2, r0
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	4618      	mov	r0, r3
 8003aec:	d101      	bne.n	8003af2 <memchr+0x12>
 8003aee:	2000      	movs	r0, #0
 8003af0:	e003      	b.n	8003afa <memchr+0x1a>
 8003af2:	7804      	ldrb	r4, [r0, #0]
 8003af4:	3301      	adds	r3, #1
 8003af6:	428c      	cmp	r4, r1
 8003af8:	d1f6      	bne.n	8003ae8 <memchr+0x8>
 8003afa:	bd10      	pop	{r4, pc}

08003afc <memcpy>:
 8003afc:	440a      	add	r2, r1
 8003afe:	4291      	cmp	r1, r2
 8003b00:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b04:	d100      	bne.n	8003b08 <memcpy+0xc>
 8003b06:	4770      	bx	lr
 8003b08:	b510      	push	{r4, lr}
 8003b0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b0e:	4291      	cmp	r1, r2
 8003b10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b14:	d1f9      	bne.n	8003b0a <memcpy+0xe>
 8003b16:	bd10      	pop	{r4, pc}

08003b18 <_realloc_r>:
 8003b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b1c:	4607      	mov	r7, r0
 8003b1e:	4614      	mov	r4, r2
 8003b20:	460d      	mov	r5, r1
 8003b22:	b921      	cbnz	r1, 8003b2e <_realloc_r+0x16>
 8003b24:	4611      	mov	r1, r2
 8003b26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b2a:	f7ff ba67 	b.w	8002ffc <_malloc_r>
 8003b2e:	b92a      	cbnz	r2, 8003b3c <_realloc_r+0x24>
 8003b30:	f7ff f9fa 	bl	8002f28 <_free_r>
 8003b34:	4625      	mov	r5, r4
 8003b36:	4628      	mov	r0, r5
 8003b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b3c:	f000 f89e 	bl	8003c7c <_malloc_usable_size_r>
 8003b40:	4284      	cmp	r4, r0
 8003b42:	4606      	mov	r6, r0
 8003b44:	d802      	bhi.n	8003b4c <_realloc_r+0x34>
 8003b46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003b4a:	d8f4      	bhi.n	8003b36 <_realloc_r+0x1e>
 8003b4c:	4621      	mov	r1, r4
 8003b4e:	4638      	mov	r0, r7
 8003b50:	f7ff fa54 	bl	8002ffc <_malloc_r>
 8003b54:	4680      	mov	r8, r0
 8003b56:	b908      	cbnz	r0, 8003b5c <_realloc_r+0x44>
 8003b58:	4645      	mov	r5, r8
 8003b5a:	e7ec      	b.n	8003b36 <_realloc_r+0x1e>
 8003b5c:	42b4      	cmp	r4, r6
 8003b5e:	4622      	mov	r2, r4
 8003b60:	4629      	mov	r1, r5
 8003b62:	bf28      	it	cs
 8003b64:	4632      	movcs	r2, r6
 8003b66:	f7ff ffc9 	bl	8003afc <memcpy>
 8003b6a:	4629      	mov	r1, r5
 8003b6c:	4638      	mov	r0, r7
 8003b6e:	f7ff f9db 	bl	8002f28 <_free_r>
 8003b72:	e7f1      	b.n	8003b58 <_realloc_r+0x40>

08003b74 <__swhatbuf_r>:
 8003b74:	b570      	push	{r4, r5, r6, lr}
 8003b76:	460c      	mov	r4, r1
 8003b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b7c:	4615      	mov	r5, r2
 8003b7e:	2900      	cmp	r1, #0
 8003b80:	461e      	mov	r6, r3
 8003b82:	b096      	sub	sp, #88	@ 0x58
 8003b84:	da0c      	bge.n	8003ba0 <__swhatbuf_r+0x2c>
 8003b86:	89a3      	ldrh	r3, [r4, #12]
 8003b88:	2100      	movs	r1, #0
 8003b8a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003b8e:	bf14      	ite	ne
 8003b90:	2340      	movne	r3, #64	@ 0x40
 8003b92:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003b96:	2000      	movs	r0, #0
 8003b98:	6031      	str	r1, [r6, #0]
 8003b9a:	602b      	str	r3, [r5, #0]
 8003b9c:	b016      	add	sp, #88	@ 0x58
 8003b9e:	bd70      	pop	{r4, r5, r6, pc}
 8003ba0:	466a      	mov	r2, sp
 8003ba2:	f000 f849 	bl	8003c38 <_fstat_r>
 8003ba6:	2800      	cmp	r0, #0
 8003ba8:	dbed      	blt.n	8003b86 <__swhatbuf_r+0x12>
 8003baa:	9901      	ldr	r1, [sp, #4]
 8003bac:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003bb0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003bb4:	4259      	negs	r1, r3
 8003bb6:	4159      	adcs	r1, r3
 8003bb8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003bbc:	e7eb      	b.n	8003b96 <__swhatbuf_r+0x22>

08003bbe <__smakebuf_r>:
 8003bbe:	898b      	ldrh	r3, [r1, #12]
 8003bc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bc2:	079d      	lsls	r5, r3, #30
 8003bc4:	4606      	mov	r6, r0
 8003bc6:	460c      	mov	r4, r1
 8003bc8:	d507      	bpl.n	8003bda <__smakebuf_r+0x1c>
 8003bca:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003bce:	6023      	str	r3, [r4, #0]
 8003bd0:	6123      	str	r3, [r4, #16]
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	6163      	str	r3, [r4, #20]
 8003bd6:	b003      	add	sp, #12
 8003bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bda:	466a      	mov	r2, sp
 8003bdc:	ab01      	add	r3, sp, #4
 8003bde:	f7ff ffc9 	bl	8003b74 <__swhatbuf_r>
 8003be2:	9f00      	ldr	r7, [sp, #0]
 8003be4:	4605      	mov	r5, r0
 8003be6:	4639      	mov	r1, r7
 8003be8:	4630      	mov	r0, r6
 8003bea:	f7ff fa07 	bl	8002ffc <_malloc_r>
 8003bee:	b948      	cbnz	r0, 8003c04 <__smakebuf_r+0x46>
 8003bf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bf4:	059a      	lsls	r2, r3, #22
 8003bf6:	d4ee      	bmi.n	8003bd6 <__smakebuf_r+0x18>
 8003bf8:	f023 0303 	bic.w	r3, r3, #3
 8003bfc:	f043 0302 	orr.w	r3, r3, #2
 8003c00:	81a3      	strh	r3, [r4, #12]
 8003c02:	e7e2      	b.n	8003bca <__smakebuf_r+0xc>
 8003c04:	89a3      	ldrh	r3, [r4, #12]
 8003c06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003c0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c0e:	81a3      	strh	r3, [r4, #12]
 8003c10:	9b01      	ldr	r3, [sp, #4]
 8003c12:	6020      	str	r0, [r4, #0]
 8003c14:	b15b      	cbz	r3, 8003c2e <__smakebuf_r+0x70>
 8003c16:	4630      	mov	r0, r6
 8003c18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c1c:	f000 f81e 	bl	8003c5c <_isatty_r>
 8003c20:	b128      	cbz	r0, 8003c2e <__smakebuf_r+0x70>
 8003c22:	89a3      	ldrh	r3, [r4, #12]
 8003c24:	f023 0303 	bic.w	r3, r3, #3
 8003c28:	f043 0301 	orr.w	r3, r3, #1
 8003c2c:	81a3      	strh	r3, [r4, #12]
 8003c2e:	89a3      	ldrh	r3, [r4, #12]
 8003c30:	431d      	orrs	r5, r3
 8003c32:	81a5      	strh	r5, [r4, #12]
 8003c34:	e7cf      	b.n	8003bd6 <__smakebuf_r+0x18>
	...

08003c38 <_fstat_r>:
 8003c38:	b538      	push	{r3, r4, r5, lr}
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	4d06      	ldr	r5, [pc, #24]	@ (8003c58 <_fstat_r+0x20>)
 8003c3e:	4604      	mov	r4, r0
 8003c40:	4608      	mov	r0, r1
 8003c42:	4611      	mov	r1, r2
 8003c44:	602b      	str	r3, [r5, #0]
 8003c46:	f7fe fd66 	bl	8002716 <_fstat>
 8003c4a:	1c43      	adds	r3, r0, #1
 8003c4c:	d102      	bne.n	8003c54 <_fstat_r+0x1c>
 8003c4e:	682b      	ldr	r3, [r5, #0]
 8003c50:	b103      	cbz	r3, 8003c54 <_fstat_r+0x1c>
 8003c52:	6023      	str	r3, [r4, #0]
 8003c54:	bd38      	pop	{r3, r4, r5, pc}
 8003c56:	bf00      	nop
 8003c58:	20000384 	.word	0x20000384

08003c5c <_isatty_r>:
 8003c5c:	b538      	push	{r3, r4, r5, lr}
 8003c5e:	2300      	movs	r3, #0
 8003c60:	4d05      	ldr	r5, [pc, #20]	@ (8003c78 <_isatty_r+0x1c>)
 8003c62:	4604      	mov	r4, r0
 8003c64:	4608      	mov	r0, r1
 8003c66:	602b      	str	r3, [r5, #0]
 8003c68:	f7fe feba 	bl	80029e0 <_isatty>
 8003c6c:	1c43      	adds	r3, r0, #1
 8003c6e:	d102      	bne.n	8003c76 <_isatty_r+0x1a>
 8003c70:	682b      	ldr	r3, [r5, #0]
 8003c72:	b103      	cbz	r3, 8003c76 <_isatty_r+0x1a>
 8003c74:	6023      	str	r3, [r4, #0]
 8003c76:	bd38      	pop	{r3, r4, r5, pc}
 8003c78:	20000384 	.word	0x20000384

08003c7c <_malloc_usable_size_r>:
 8003c7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c80:	1f18      	subs	r0, r3, #4
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	bfbc      	itt	lt
 8003c86:	580b      	ldrlt	r3, [r1, r0]
 8003c88:	18c0      	addlt	r0, r0, r3
 8003c8a:	4770      	bx	lr

08003c8c <_init>:
 8003c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8e:	bf00      	nop
 8003c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c92:	bc08      	pop	{r3}
 8003c94:	469e      	mov	lr, r3
 8003c96:	4770      	bx	lr

08003c98 <_fini>:
 8003c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c9a:	bf00      	nop
 8003c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c9e:	bc08      	pop	{r3}
 8003ca0:	469e      	mov	lr, r3
 8003ca2:	4770      	bx	lr
